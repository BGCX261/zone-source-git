#+STARTUP: showall
* git init
  #+BEGIN_EXAMPLE
  $ cd konichiwa
  $ ls
    README   hello.rb

  $ git init
  Initialized empty Git repository in /opt/konichiwa/.git/
  
  $ ls -a
  .        ..       .git     README   hello.rb

  #+END_EXAMPLE

* git clone
  #+BEGIN_EXAMPLE
$ git clone git://github.com/schacon/simplegit.git
Initialized empty Git repository in /private/tmp/simplegit/.git/
remote: Counting objects: 100, done.
remote: Compressing objects: 100% (86/86), done.
remote: Total 100 (delta 35), reused 0 (delta 0)
Receiving objects: 100% (100/100), 9.51 KiB, done.
Resolving deltas: 100% (35/35), done.
$ cd simplegit/
$ ls
README   Rakefile lib
  
$ ls -a
.        ..       .git     README   Rakefile lib
$ cd .git
$ ls
HEAD        description info        packed-refs
branches    hooks       logs        refs
config      index       objects
#+END_EXAMPLE

* git add
- In Git, you have to add file contents to your staging area before
  you can commit them.
  #+BEGIN_EXAMPLE
$ git status -s
?? README
?? hello.rb
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
$ git add README hello.rb
  #+END_EXAMPLE

#+BEGIN_EXAMPLE
$ git status -s
A  README
A  hello.rb
#+END_EXAMPLE

  #+BEGIN_EXAMPLE
$ vim README
$ git status -s
AM README
A  hello.rb
  #+END_EXAMPLE
- The 'AM' status means that the file has been modified on disk since
  we last added it. This means that if we commit our snapshot right
  now, we will be recording the version of the file when we last ran
  git add, not the version that is on our disk.

* git status
  #+BEGIN_EXAMPLE
$ git status -s
AM README
A  hello.rb
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
$ git status
# On branch master
#
# Initial commit
#
# Changes to be committed:
#   (use "git rm --cached ..." to unstage)
#
# new file:   README
# new file:   hello.rb
#
# Changed but not updated:
#   (use "git add ..." to update what will be committed)
#   (use "git checkout -- ..." to discard changes in working directory)
#
# modified:   README
#
  #+END_EXAMPLE

- Git will also tell you about files that were deleted since your last
  commit or files that were modified or staged since your last commit.
#+BEGIN_EXAMPLE
$ git status -s
M  README
 D hello.rb
#+END_EXAMPLE
- You can see there are two columns in the short status output. The
  first column is for the staging area, the second is for the working
  directory.

- if you have the README file staged and then you modify it again
  without running git add a second time, you'll see this:
  #+BEGIN_EXAMPLE
$ git status -s
MM README
 D hello.rb
  #+END_EXAMPLE

* git diff shows diff of what is staged and what is modified but unstaged
- Without any extra arguments, a simple git diff will display in
  unified diff format (a patch) what code or content you've changed in
  your project since the last commit that are not yet staged for the
  next commit snapshot.
  #+BEGIN_EXAMPLE
$ vim hello.rb
$ git status -s
 M hello.rb
$ git diff
diff --git a/hello.rb b/hello.rb
index d62ac43..8d15d50 100644
--- a/hello.rb
+++ b/hello.rb
@@ -1,7 +1,7 @@
 class HelloWorld
   
   def self.hello
-    puts "hello world"
+    puts "hola mundo"
   end
 
 end
  #+END_EXAMPLE
- The git diff --cached command will show you what contents have been
  staged.

  #+BEGIN_EXAMPLE
$ git status -s
 M hello.rb
$ git add hello.rb 
$ git status -s
M  hello.rb
$ git diff
$
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
$ git status -s
M  hello.rb
$ git diff
$ 
$ git diff --cached
diff --git a/hello.rb b/hello.rb
index d62ac43..8d15d50 100644
--- a/hello.rb
+++ b/hello.rb
@@ -1,7 +1,7 @@
 class HelloWorld
   
   def self.hello
-    puts "hello world"
+    puts "hola mundo"
   end
 
 end
  #+END_EXAMPLE

- If you want to see both staged and unstaged changes together, you
  can run git diff HEAD
  #+BEGIN_EXAMPLE
$ vim hello.rb 
$ git diff
diff --git a/hello.rb b/hello.rb
index 4f40006..2ae9ba4 100644
--- a/hello.rb
+++ b/hello.rb
@@ -1,7 +1,7 @@
 class HelloWorld
   
+  # says hello
   def self.hello
     puts "hola mundo"
   end
 
 end
$ git diff --cached
diff --git a/hello.rb b/hello.rb
index 2aabb6e..4f40006 100644
--- a/hello.rb
+++ b/hello.rb
@@ -1,7 +1,7 @@
 class HelloWorld
 
   def self.hello
-    puts "hello world"
+    puts "hola mundo"
   end
 
 end
$ git diff HEAD
diff --git a/hello.rb b/hello.rb
index 2aabb6e..2ae9ba4 100644
--- a/hello.rb
+++ b/hello.rb
@@ -1,7 +1,8 @@
 class HelloWorld
 
+  # says hello
   def self.hello
-    puts "hello world"
+    puts "hola mundo"
   end
 
 end
  #+END_EXAMPLE

- we can use the --stat option, which will give us a summary of
  changes instead.
  #+BEGIN_EXAMPLE
$ git status -s
MM hello.rb
$ git diff --stat
 hello.rb |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)
$ git diff --cached --stat
 hello.rb |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)
$ git diff HEAD --stat
 hello.rb |    3 ++-
 1 files changed, 2 insertions(+), 1 deletions(-)
  #+END_EXAMPLE

* git commit records a snapshot of the staging area
Git records your name and email address with every commit you make, so
the first step is to tell Git what these are.
  #+BEGIN_EXAMPLE
$ git config --global user.name 'Your Name'
$ git config --global user.email you@somedomain.com
  #+END_EXAMPLE

we'll use the -m option to provide the commit message on the command line. 
  #+BEGIN_EXAMPLE
$ git add hello.rb 
$ git status -s
M  hello.rb
$ git commit -m 'my hola mundo changes'
[master 68aa034] my hola mundo changes
 1 files changed, 2 insertions(+), 1 deletions(-)
  #+END_EXAMPLE
If you leave off the -m option, Git will try to open a text editor for
you to write your commit message.
  #+BEGIN_EXAMPLE
  #+END_EXAMPLE

git commit -a automatically stage all tracked, modified files before
the commit.

If you think the git add stage of the workflow is too cumbersome, Git
allows you to skip that part with the -a option. This basically tells
Git to run git add on any file that is "tracked" - that is, any file
that was in your last commit and has been modified.
  #+BEGIN_EXAMPLE

$ vim hello.rb
$ git status -s
 M  hello.rb
$ git commit -m 'changes to hello file'
# On branch master
# Changed but not updated:
#   (use "git add ..." to update what will be committed)
#   (use "git checkout -- ..." to discard changes in working directory)
#
# modified:   hello.rb
#
no changes added to commit (use "git add" and/or "git commit -a")
$ git commit -am 'changes to hello file'
[master 78b2670] changes to hello file
 1 files changed, 2 insertions(+), 1 deletions(-)
  #+END_EXAMPLE

* git reset HEAD : unstage changes that you have staged
Let's say that you have modified two files and want to record them
into two different commits. You should stage and commit one, then
stage and commit the other. If you accidentally stage both of them,
how do you un-stage one? You do it with git reset HEAD --
file.Technically here you don't have to add the -- - it is used to
tell Git when you have stopped listing options and are now listing
file paths, but it's probably good to get into the habit of using it
to separate options from paths even if you don't need to.
#+BEGIN_EXAMPLE
$ git status -s
 M README
 M hello.rb
$ git add .
$ git status -s
M  README
M  hello.rb
$ git reset HEAD -- hello.rb 
Unstaged changes after reset:
M hello.rb
$ git status -s
M  README
 M hello.rb
#+END_EXAMPLE

If you want to be able to just run git unstage, you can easily setup
an alias in Git. Just run git config --global alias.unstage "reset
HEAD".Once you have run that, you can then just run git unstage [file]
instead.

* git rm : remove files from the staging area
git rm will remove entries from the staging area.

By default, a git rm file will remove the file from the staging area
entirely and also off your disk (the working directory). To leave the
file in the working directory, you can use git rm --cached .

* git mv : git rm --cached orig; mv orig new; git add new
Unlike most other version control systems, Git does not track file
renames. Instead, it just tracks the snapshots and then figures out
what files were likely renamed by comparing snapshots. If a file was
removed from one snapshot and another file was added to the next one
and the contents are similar, Git figures it was most likely a rename.


all it does is a git rm --cached, moves the file on disk, then runs a
git add on the new file. You don't really need to use it, but if it's
easier, feel free.
* git branch list your available branches
- Without arguments, git branch will list out the local branches that you have. 
- When you run git init it will automatically create a 'master' branch for you by default.
* git branch (branchname) create a new branch
  #+BEGIN_EXAMPLE
$ git branch testing
$ git branch
#* master
  testing
#+END_EXAMPLE
- we can see that we have a new branch. When you create a branch this
  way it creates the branch at your last commit so if you record some
  commits at this point and then switch to 'testing', it will revert
  your working directory context back to when you created the branch
  in the first place

  #+BEGIN_EXAMPLE
$ ls
README   hello.rb
$ echo 'test content' > test.txt
$ echo 'more content' > more.txt
$ git add *.txt
$ git commit -m 'added two files'
[master 8bd6d8b] added two files
 2 files changed, 2 insertions(+), 0 deletions(-)
 create mode 100644 more.txt
 create mode 100644 test.txt
$ ls
README   hello.rb more.txt test.txt
$ git checkout testing
Switched to branch 'testing'
$ ls
README   hello.rb
  
$ ls
README   hello.rb
$ git checkout master
Switched to branch 'master'
$ ls
README   hello.rb more.txt test.txt
#+END_EXAMPLE

* git checkout -b (branchname) create and immediately switch to a branch
- You can do this pretty easily with git branch newbranch; git
  checkout newbranch, but Git gives you a shortcut for this: git
  checkout -b newbranch.

  #+BEGIN_EXAMPLE
$ git branch
* master
$ ls
README   hello.rb more.txt test.txt
$ git checkout -b removals
Switched to a new branch 'removals'
$ git rm more.txt 
rm 'more.txt'
$ git rm test.txt 
rm 'test.txt'
$ ls
README   hello.rb
$ git commit -am 'removed useless files'
[removals 8f7c949] removed useless files
 2 files changed, 0 insertions(+), 2 deletions(-)
 delete mode 100644 more.txt
 delete mode 100644 test.txt
$ git checkout master
Switched to branch 'master'
$ ls
README   hello.rb more.txt test.txt
  #+END_EXAMPLE

* git branch -d (branchname) delete a branch
  #+BEGIN_EXAMPLE
$ git branch
* master
  testing
$ git branch -d testing
Deleted branch testing (was 78b2670).
$ git branch
* master
  #+END_EXAMPLE

* git merge merge a branch context into your current one
- Once you have work isolated in a branch, you will eventually want to
  incorporate it into your main branch. You can merge any branch into
  your current branch with the git merge command.
  #+BEGIN_EXAMPLE
$ git branch
* master
  removals
$ ls
README   hello.rb more.txt test.txt
$ git merge removals
Updating 8bd6d8b..8f7c949
Fast-forward
 more.txt |    1 -
 test.txt |    1 -
 2 files changed, 0 insertions(+), 2 deletions(-)
 delete mode 100644 more.txt
 delete mode 100644 test.txt
$ ls
README   hello.rb
  #+END_EXAMPLE
- let's see what happens when we edit a file in one branch and in
  another branch we rename it and then edit it and then merge these
  branches together.
  #+BEGIN_EXAMPLE
$ git branch
* master
$ cat hello.rb 
class HelloWorld
  def self.hello
    puts "Hello World"
  end
end

HelloWorld.hello

$ git checkout -b change_class
M hello.rb
Switched to a new branch 'change_class'
$ vim hello.rb 
$ head -1 hello.rb 
class HiWorld
$ git commit -am 'changed the class name'
[change_class 3467b0a] changed the class name
 1 files changed, 2 insertions(+), 4 deletions(-)
$ git checkout master
Switched to branch 'master'
$ git mv hello.rb ruby.rb
$ vim ruby.rb 
$ git diff
diff --git a/ruby.rb b/ruby.rb
index 2aabb6e..bf64b17 100644
--- a/ruby.rb
+++ b/ruby.rb
@@ -1,7 +1,7 @@
 class HelloWorld

   def self.hello
-    puts "Hello World"
+    puts "Hello World from Ruby"
   end

 end
$ git commit -am 'added from ruby'
[master b7ae93b] added from ruby
 1 files changed, 1 insertions(+), 1 deletions(-)
 rename hello.rb => ruby.rb (65%)
$ git branch
  change_class
* master
$ git merge change_class
Renaming hello.rb => ruby.rb
Auto-merging ruby.rb
Merge made by recursive.
 ruby.rb |    6 ++----
 1 files changed, 2 insertions(+), 4 deletions(-)
$ cat ruby.rb
class HiWorld
  def self.hello
    puts "Hello World from Ruby"
  end
end

HiWorld.hello
  #+END_EXAMPLE

- In situations where the same block of code is edited in different
  branches there is no way for a computer to figure it out, so it's up
  to us.
  #+BEGIN_EXAMPLE
$ git branch
* master
$ git checkout -b fix_readme
Switched to a new branch 'fix_readme'
$ vim README 
$ git commit -am 'fixed readme title'
[fix_readme 3ac015d] fixed readme title
 1 files changed, 1 insertions(+), 1 deletions(-)
#+END_EXAMPLE

- let's change the same line in a different way back on our 'master'
  branch
  #+BEGIN_EXAMPLE
$ git checkout master
Switched to branch 'master'
$ vim README 
$ git commit -am 'fixed readme title differently'
[master 3cbb6aa] fixed readme title differently
 1 files changed, 1 insertions(+), 1 deletions(-)
#+END_EXAMPLE

  #+BEGIN_EXAMPLE
$ git merge fix_readme
Auto-merging README
CONFLICT (content): Merge conflict in README
Automatic merge failed; fix conflicts and then commit the result.
$ cat README 
<<<<<<< HEAD
Many Hello World Examples
=======
Hello World Lang Examples
>>>>>>> fix_readme

This project has examples of hello world in
nearly every programming language.
#+END_EXAMPLE

  #+BEGIN_EXAMPLE
$ vim README   # here I'm fixing the conflict
$ git diff
diff --cc README
index 9103e27,69cad1a..0000000
--- a/README
+++ b/README
@@@ -1,4 -1,4 +1,4 @@@
- Many Hello World Examples
 -Hello World Lang Examples
++Many Hello World Lang Examples

  This project has examples of hello world in
#+END_EXAMPLE
- We will do it manually here, but check out git mergetool if you want
  Git to fire up a graphical mergetool (like kdiff3, emerge, p4merge,
  etc) instead.

- A cool tip in doing merge conflict resolution in Git is that if you
  run git diff, it will show you both sides of the conflict and how
  you've resolved it as I've shown here.
- Now it's time to mark the file as resolved. In Git we do that with
  git add - to tell Git the file has been resolved, you have to stage
  it.
  #+BEGIN_EXAMPLE
$ git status -s
UU README
$ git add README 
$ git status -s
M  README
$ git commit 
[master 8d585ea] Merge branch 'fix_readme'
  #+END_EXAMPLE

* git log show commit history of a branch
- To see a chronological list of the parents of any branch, you can
  run git log when you are in that branch.
- To see a more compact version of the same history, we can use the
  --oneline option.
- We can also use it to see when the history was branched and merged
  with the very helpful --graph option.
- another example
  #+BEGIN_EXAMPLE
$ git checkout -b erlang
Switched to a new branch 'erlang'
$ vim erlang_hw.erl
$ git add erlang_hw.erl 
$ git commit -m 'added erlang'
[erlang ab5ab4c] added erlang
 1 files changed, 5 insertions(+), 0 deletions(-)
 create mode 100644 erlang_hw.erl

$ vim haskell.hs
$ git add haskell.hs 
$ git commit -m 'added haskell'
[erlang 1834130] added haskell
 1 files changed, 4 insertions(+), 0 deletions(-)
 create mode 100644 haskell.hs

$ git checkout master
Switched to branch 'master'
$ ls
README  ruby.rb
$ vim ruby.rb 
$ git commit -am 'reverted to old class name'
[master 594f90b] reverted to old class name
 1 files changed, 2 insertions(+), 2 deletions(-)

$ git log --oneline erlang
1834130 added haskell
ab5ab4c added erlang
8d585ea Merge branch 'fix_readme'
3cbb6aa fixed readme title differently
3ac015d fixed readme title
558151a Merge branch 'change_class'
b7ae93b added from ruby
3467b0a changed the class name
17f4acf first commit
  #+END_EXAMPLE
- if we are interested in merging in the 'erlang' branch we want to
  see what commits are going to effect our snapshot when we do that
  merge. The way we tell Git that is by putting a ^ in front of the
  branch that we don't want to see. For instance, if we want to see
  the commits that are in the 'erlang' branch that are not in the
  'master' branch, we can do erlang ^master, or vice versa.
  #+BEGIN_EXAMPLE
$ git log --oneline erlang ^master
1834130 added haskell
ab5ab4c added erlang
$ git log --oneline master ^erlang
594f90b reverted to old class name
  #+END_EXAMPLE

* git tag tag a point in history as important
- We can tag the last commit (HEAD) as "v1.0" by running git tag -a
  v1.0. The -a means "make an annotated tag", which allows you to add
  a tag message to it, which is what you almost always want to do.
- when we run git log --decorate, we can see our tag there.
  #+BEGIN_EXAMPLE
  $ git log --oneline --decorate --graph
* 594f90b (HEAD, tag: v1.0, master) reverted to old class name
*   8d585ea Merge branch 'fix_readme'
|\
| * 3ac015d (fix_readme) fixed readme title
* | 3cbb6aa fixed readme title differently
|/
*   558151a Merge branch 'change_class'
|\
| * 3467b0a changed the class name
* | b7ae93b added from ruby
|/
* 17f4acf first commit
#+END_EXAMPLE

- If we forgot to tag a commit that we released, we can retroactively
  tag it by running the same command, but with the commit SHA at the
  end.
  #+BEGIN_EXAMPLE
$ git tag -a v0.9 558151a
$ git log --oneline --decorate --graph
* 594f90b (HEAD, tag: v1.0, master) reverted to old class name
*   8d585ea Merge branch 'fix_readme'
|\
| * 3ac015d (fix_readme) fixed readme title
* | 3cbb6aa fixed readme title differently
|/
*   558151a (tag: v0.9) Merge branch 'change_class'
|\
| * 3467b0a changed the class name
* | b7ae93b added from ruby
|/
* 17f4acf first commit
  #+END_EXAMPLE

* git remote list, add and delete remote repository aliases
- Git repositories are all basically equal and you simply synchronize
  between them. This makes it easy to have more than one remote
  repository - you can have some that you have read-only access to and
  others that you can write to as well.
* git remote list your remote aliases
- you don't have to use the full URL of a remote repository
  every time you want to synchronize with it, Git stores an alias or
  nickname for each remote repository URL you are interested in.
- Without any arguments, Git will simply show you the remote
  repository aliases that it has stored. By default, if you cloned the
  project (as opposed to creating a new one locally), Git will
  automatically add the URL of the repository that you cloned from
  under the name 'origin'. If you run the command with the -v option,
  you can see the actual URL for each alias.
  #+BEGIN_EXAMPLE
$ git remote
origin
$ git remote -v
origin	git@github.com:schacon/git-reference.git (fetch)
origin	git@github.com:schacon/git-reference.git (push)
  #+END_EXAMPLE
* git remote add : add a new remote repository of your project
- if you want to interact in any way with a new repository, it's
  generally easiest to add it as a remote. You do that by running git
  remote add [alias] [url]. That adds [url] under a local remote named
  [alias].
  #+BEGIN_EXAMPLE
$ git remote
$ git remote add github git@github.com:schacon/hw.git
$ git remote -v
github	git@github.com:schacon/hw.git (fetch)
github	git@github.com:schacon/hw.git (push)
  #+END_EXAMPLE
* git remote rm removing an existing remote alias

  #+BEGIN_EXAMPLE
$ git remote -v
github	git@github.com:schacon/hw.git (fetch)
github	git@github.com:schacon/hw.git (push)
$ git remote add origin git://github.com/pjhyett/hw.git
$ git remote -v
github	git@github.com:schacon/hw.git (fetch)
github	git@github.com:schacon/hw.git (push)
origin	git://github.com/pjhyett/hw.git (fetch)
origin	git://github.com/pjhyett/hw.git (push)
$ git remote rm origin
$ git remote -v
github	git@github.com:schacon/hw.git (fetch)
github	git@github.com:schacon/hw.git (push)
  #+END_EXAMPLE

* git fetch download new branches and data from a remote repository
* git pull fetch from a remote repo and try to merge into the current branch
- git fetch will synchronize you with another repo, pulling down any
  data that you do not have locally and giving you bookmarks to where
  each branch on that remote was when you synchronized. These are
  called "remote branches" and are identical to local branches except
  that Git will not allow you to check them out - however, you can
  merge from them, diff them to other branches, run history logs on
  them, etc.
- git pull. This command will basically run a git fetch immediately
  followed by a git merge of the branch on that remote that is tracked
  by whatever branch you are currently in.
- you would first run git fetch [alias] to tell Git to fetch down all
  the data it has that you do not, then you would run git merge
  [alias]/[branch] to merge into your current branch anything new you
  see on the server
 #+BEGIN_EXAMPLE
$ git fetch github
remote: Counting objects: 4006, done.
remote: Compressing objects: 100% (1322/1322), done.
remote: Total 2783 (delta 1526), reused 2587 (delta 1387)
Receiving objects: 100% (2783/2783), 1.23 MiB | 10 KiB/s, done.
Resolving deltas: 100% (1526/1526), completed with 387 local objects.
From github.com:schacon/hw
   8e29b09..c7c5a10  master     -> github/master
   0709fdc..d4ccf73  c-langs    -> github/c-langs
   6684f82..ae06d2b  java       -> github/java
 * [new branch]      ada        -> github/ada
 * [new branch]      lisp       -> github/lisp
 #+END_EXAMPLE
- The 'master' branch on the remote repository becomes a branch named
  'github/master' locally. That way now I can merge the 'master'
  branch on that remote into my local 'master' branch by running git
  merge github/master. Or, I can see what new commits are on that
  branch by running git log github/master ^master. If your remote is
  named 'origin' it would be origin/master instead. Almost any command
  you would run using local branches you can use remote branches with
  too.
- If you have more than one remote repository, you can either fetch
  from specific ones by running git fetch [alias] or you can tell Git
  to synchronize with all of your remotes by running git fetch --all.

* git push push your new branches and data to a remote repository
- you run git push [alias] [branch] which will attempt to make your
  [branch] the new [branch] on the [alias] remote.
  #+BEGIN_EXAMPLE
  $ git push github master
Counting objects: 25, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (25/25), done.
Writing objects: 100% (25/25), 2.43 KiB, done.
Total 25 (delta 4), reused 0 (delta 0)
To git@github.com:schacon/hw.git
 * [new branch]      master -> master
#+END_EXAMPLE

  #+BEGIN_EXAMPLE
$ git push github erlang
Counting objects: 7, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (6/6), done.
Writing objects: 100% (6/6), 652 bytes, done.
Total 6 (delta 1), reused 0 (delta 0)
To git@github.com:schacon/hw.git
 * [new branch]      erlang -> erlang
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
$ git push github master
To git@github.com:schacon/hw.git
 ! [rejected]        master -> master (non-fast-forward)
error: failed to push some refs to 'git@github.com:schacon/hw.git'
To prevent you from losing history, non-fast-forward updates were rejected
Merge the remote changes before pushing again.  See the 'Note about
fast-forwards' section of 'git push --help' for details.
  #+END_EXAMPLE
- You can fix this by running git fetch github; git merge
  github/master and then pushing again.

* git log --author look for only commits from a specific author
  #+BEGIN_EXAMPLE
$ git log --author=Linus --oneline -5
81b50f3 Move 'builtin-*' into a 'builtin/' subdirectory
3bb7256 make "index-pack" a built-in
377d027 make "git pack-redundant" a built-in
b532581 make "git unpack-file" a built-in
112dd51 make "mktag" a built-in
  #+END_EXAMPLE

* git log --since --before filter commits by date authored
- If you want to specify a date range that you're interested in
  filtering your commits down to, you can use a number of options - I
  use --since and --before, but you can also use --until and --after.
- --no-merges to remove merge commits
  #+BEGIN_EXAMPLE
$ git log --oneline --before={3.weeks.ago} --after={2010-04-18} --no-merges
5469e2d Git 1.7.1-rc2
d43427d Documentation/remote-helpers: Fix typos and improve language
272a36b Fixup: Second argument may be any arbitrary string
b6c8d2d Documentation/remote-helpers: Add invocation section
5ce4f4e Documentation/urls: Rewrite to accomodate transport::address
00b84e9 Documentation/remote-helpers: Rewrite description
03aa87e Documentation: Describe other situations where -z affects git diff
77bc694 rebase-interactive: silence warning when no commits rewritten
636db2c t3301: add tests to use --format="%N"
  #+END_EXAMPLE

* git log --grep filter commits by commit message
- You may also want to look for commits with a certain phrase in the
  commit message. You can use --grep for that.
- Git will logically OR all --grep and --author arguments. If you want
  to use --grep and --author to see commits that were authored by
  someone AND have a specific message content, you have to add the
  --all-match option.
  #+BEGIN_EXAMPLE
$ git log --grep=P4EDITOR --no-merges
commit 82cea9ffb1c4677155e3e2996d76542502611370
Author: Shawn Bohrer
Date:   Wed Mar 12 19:03:24 2008 -0500

    git-p4: Use P4EDITOR environment variable when set

    Perforce allows you to set the P4EDITOR environment variable to your
    preferred editor for use in perforce.  Since we are displaying a
    perforce changelog to the user we should use it when it is defined.

    Signed-off-by: Shawn Bohrer 
    Signed-off-by: Simon Hausmann
#+END_EXAMPLE

- In these examples, I'm going to use the --format option, so we can
  see who the author of each commit was.
  #+BEGIN_EXAMPLE
$ git log --grep="p4 depo" --format="%h %an %s"
ee4fd1a Junio C Hamano Merge branch 'master' of git://repo.or.cz/git/fastimport
da4a660 Benjamin Sergeant git-p4 fails when cloning a p4 depo.
1cd5738 Simon Hausmann Make incremental imports easier to use by storing the p4 d
#+END_EXAMPLE

  #+BEGIN_EXAMPLE
$ git log --grep="p4 depo" --format="%h %an %s" --author="Hausmann"
cdc7e38 Simon Hausmann Make it possible to abort the submission of a change to Pe
f5f7e4a Simon Hausmann Clean up the git-p4 documentation
30b5940 Simon Hausmann git-p4: Fix import of changesets with file deletions
4c750c0 Simon Hausmann git-p4: git-p4 submit cleanups.
0e36f2d Simon Hausmann git-p4: Removed git-p4 submit --direct.
edae1e2 Simon Hausmann git-p4: Clean up git-p4 submit's log message handling.
4b61b5c Simon Hausmann git-p4: Remove --log-substitutions feature.
36ee4ee Simon Hausmann git-p4: Ensure the working directory and the index are cle
e96e400 Simon Hausmann git-p4: Fix submit user-interface.
38f9f5e Simon Hausmann git-p4: Fix direct import from perforce after fetching cha
2094714 Simon Hausmann git-p4: When skipping a patch as part of "git-p4 submit" m
1ca3d71 Simon Hausmann git-p4: Added support for automatically importing newly ap
...
#+END_EXAMPLE

* git log -S filter by introduced diff
- What if you write really horrible commit messages? Or, what if you
  are looking for when a function was introduced, or where variables
  started to be used? You can also tell Git to look through the diff
  of each commit for a string. For example, if we wanted to find which
  commits modified anything that looked like the function name
  'userformat_find_requirements', we would run this:
  #+BEGIN_EXAMPLE
$ git log -Suserformat_find_requirements
commit 5b16360330822527eac1fa84131d185ff784c9fb
Author: Johannes Gilger
Date:   Tue Apr 13 22:31:12 2010 +0200

    pretty: Initialize notes if %N is used

    When using git log --pretty='%N' without an explicit --show-notes, git
    would segfault. This patches fixes this behaviour by loading the needed
    notes datastructures if --pretty is used and the format contains %N.
    When --pretty='%N' is used together with --no-notes, %N won't be
    expanded.

    This is an extension to a proposed patch by Jeff King.

    Signed-off-by: Johannes Gilger
    Signed-off-by: Junio C Hamano
#+END_EXAMPLE

* git log -p show patch introduced at each commit

- You can either do this by running git show [SHA] with a specific
  commit SHA, or you can run git log -p, which tells Git to put the
  patch after each commit. It is a great way to summarize what has
  happened on a branch or between commits.
  #+BEGIN_EXAMPLE
$ git log -p --no-merges -2
commit 594f90bdee4faf063ad07a4a6f503fdead3ef606
Author: Scott Chacon schacon@gmail.com
Date:   Fri Jun 4 15:46:55 2010 +0200

    reverted to old class name

diff --git a/ruby.rb b/ruby.rb
index bb86f00..192151c 100644
--- a/ruby.rb
+++ b/ruby.rb
@@ -1,7 +1,7 @@
-class HiWorld
+class HelloWorld
   def self.hello
     puts "Hello World from Ruby"
   end
 end

-HiWorld.hello
+HelloWorld.hello

commit 3cbb6aae5c0cbd711c098e113ae436801371c95e
Author: Scott Chacon schacon@gmail.com
Date:   Fri Jun 4 12:58:53 2010 +0200

    fixed readme title differently

diff --git a/README b/README
index d053cc8..9103e27 100644
--- a/README
+++ b/README
@@ -1,4 +1,4 @@
-Hello World Examples
+Many Hello World Examples
 ======================

 This project has examples of hello world in
#+END_EXAMPLE

* git log --stat show diffstat of changes introduced at each commit
- If the -p option is too verbose for you, you can summarize the
  changes with --stat instead. Here is the same log output with --stat
  instead of -p
  #+BEGIN_EXAMPLE
$ git log --stat --no-merges -2
commit 594f90bdee4faf063ad07a4a6f503fdead3ef606
Author: Scott Chacon schacon@gmail.com
Date:   Fri Jun 4 15:46:55 2010 +0200

    reverted to old class name

 ruby.rb |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

commit 3cbb6aae5c0cbd711c098e113ae436801371c95e
Author: Scott Chacon schacon@gmail.com
Date:   Fri Jun 4 12:58:53 2010 +0200

    fixed readme title differently

 README |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)
#+END_EXAMPLE

* git diff
- To see what has changed since the last release, you can simply run
  git diff [version] (or whatever you tagged the release).
  #+BEGIN_EXAMPLE
$ git diff v0.9
diff --git a/README b/README
index d053cc8..d4173d5 100644
--- a/README
+++ b/README
@@ -1,4 +1,4 @@
-Hello World Examples
+Many Hello World Lang Examples
 ======================

 This project has examples of hello world in
diff --git a/ruby.rb b/ruby.rb
index bb86f00..192151c 100644
--- a/ruby.rb
+++ b/ruby.rb
@@ -1,7 +1,7 @@
-class HiWorld
+class HelloWorld
   def self.hello
     puts "Hello World from Ruby"
   end
 end

-HiWorld.hello
+HelloWorld.hello
#+END_EXAMPLE
- Just like git log, you can use the --stat option with it.
  #+BEGIN_EXAMPLE
$ git diff v0.9 --stat
 README  |    2 +-
 ruby.rb |    4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)
#+END_EXAMPLE

- To compare two divergent branches, however, you can run something
  like git diff branchA branchB but the problem is that it will do
  exactly what you are asking - it will basically give you a patch
  file that would turn the snapshot at the tip of branchA into the
  snapshot at the tip of branchB. This means if the two branches
  have diverged - gone in different directions - it will remove all
  the work that was introduced into branchA and then add everything
  that was introduced into branchB. This is probably not what you
  want - you want the changes added to branchB that are not in
  branchA, so you really want the difference between where the two
  branches diverged and the tip of branchB. So, if our history
  looks like this:

  #+BEGIN_EXAMPLE

$ git log --graph --oneline --decorate --all
* 594f90b (HEAD, tag: v1.0, master) reverted to old class name
| * 1834130 (erlang) added haskell
| * ab5ab4c added erlang
|/
*   8d585ea Merge branch 'fix_readme'
...
#+END_EXAMPLE

- And we want to see what is on the "erlang" branch compared to
  the "master" branch, running git diff master erlang will give us
  the wrong thing.
  #+BEGIN_EXAMPLE

$ git diff --stat master erlang
 erlang_hw.erl |    5 +++++
 haskell.hs    |    4 ++++
 ruby.rb       |    4 ++--
 3 files changed, 11 insertions(+), 2 deletions(-)
#+END_EXAMPLE

- You see that it adds the erlang and haskell files, which is what
  we did in that branch, but then the output also reverts the
  changes to the ruby file that we did in the master branch. What
  we really want to see is just the changes that happened in
  the "erlang" branch (adding the two files). We can get the
  desired result by doing the diff from the common commit they
  diverged from:

  #+BEGIN_EXAMPLE

$ git diff --stat 8d585ea erlang
 erlang_hw.erl |    5 +++++
 haskell.hs    |    4 ++++
 2 files changed, 9 insertions(+), 0 deletions(-)

#+END_EXAMPLE

- That's what we're looking for, but we don't want to have to
  figure out what commit the two branches diverged from every
  time. Luckily, Git has a shortcut for this. If you run git diff
  master...erlang (with three dots in between the branch names),
  Git will automatically figure out what the common
  commit (otherwise known as the "merge base") of the two commit is
  and do the diff off of that.
  
  #+BEGIN_EXAMPLE

$ git diff --stat master erlang
 erlang_hw.erl |    5 +++++
 haskell.hs    |    4 ++++
 ruby.rb       |    4 ++--
 3 files changed, 11 insertions(+), 2 deletions(-)
$ git diff --stat master...erlang
 erlang_hw.erl |    5 +++++
 haskell.hs    |    4 ++++
 2 files changed, 9 insertions(+), 0 deletions(-)
#+END_EXAMPLE

- As a bit of an aside, you can also have git manually calculate
  the merge-base (first common ancestor commit) of any two commits
  would be with the git merge-base command:

#+BEGIN_EXAMPLE
$ git merge-base master erlang
8d585ea6faf99facd39b55d6f6a3b3f481ad0d3d


$ git diff --stat $(git merge-base master erlang) erlang
 erlang_hw.erl |    5 +++++
 haskell.hs    |    4 ++++
 2 files changed, 9 insertions(+), 0 deletions(-)

#+END_EXAMPLE
