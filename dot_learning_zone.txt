==============================12/05/26==============================

学习dot (DOT语言_GUIDE.pdf) ：digraph是有向图；graph是无向图；有向图
用->表示，无向图用--表示；不能同时用digraph和->，若想同时用digraph和无
向连接，可以用dir属性。

设置边的属性,在每条边后面的双括号里设置边的属性。也可以在用edge设置边的
默认值.

给点设置属性就必须给每个点单独的设置一个属性,node表示点的默认值。点的默
认参数是shape=ellipse, width=.75, height=.5 and labeled by the node
name.一些点的形状在 appendix.h 中,一些常用的形状有
bos,circle,record,plaintext

label字符串中可以用转义符'\n'.
设置edge的属性之后，会在下一次设置之前以下的所有边使用这次设置的属性。

execute -> { make_string; printf} 这句表示execute连两个点
make_string [label="make a\nstring"]; 这句改变make_string的名称。

结点若不设置label属性则默认是结点的名称，边不设置label属性

http://www.graphviz.org/doc/info/shapes.html 这里有结点的名称
在这个网站下也有

可以设置每条边箭头的方向,用 dir,有 forward(default),back,both,none 四种。
B -> C[dir = none];
B -> C[dir = none];
这样就可以画两条线。

结点可以先说明链接关系，然后再在后面修改属性，那么之前的结点的属性也会
被修改，被修改的单个结点属性对该结点来说是全局的a -> b -> c; c
[shape=polygon,sides=4,skew=.4,label="hello world"]

点的 shape 除了 record 和 Mrecord 这两种之外,其他的形状都是多边形,而我
们可以对多边形进行一下属性上的设置,shape = polygon。Sides 用于设置它的
边数,peripheries 用于设置多边形的外框的层数,regular = true 可以让你的多
边形是一个规则的多边形,orientation = *,可以让你的多边形旋转一个角度,如
orientation = 15 就是转了 15 度。skew 后面跟一个(-1.0~1.0)的小数,能让你
的图形斜切一个角度,distortion 是让你的图形产生透视效果。

record 和 Mrecord 的区别就是 Mrecord 的角是圆的。Record 就是由横的和竖的矩形组成的
图形。

dot的大小写是敏感的，把Skew不会报错，但是不会有任何效果。
dot语言也可以像C语言一样将一个语句分多行写的。

设置图的尺寸用size属性，size ="4,4"设为4英寸，4英寸，显示的图象根据需要
自适应，但最少有一边是4寸。

当你的线和线 label 比较多时,可以给线的属性 decorate = true,使得每条线的
label 与所属线之间连线。你还可以给每条线加上 headlabel 和 taillabel,给
每条线的起始点和终点加上label,他们的颜色由 labelfontcolor 来决定,而
label 的颜色由 fontcolor 来决定。

最外层的label可以给该图设置名字，要加双引号；labelloc是该label的垂直位置，t表示顶端，b表示底端；labeljust表示该label的水平位置，l表示左，r表示右。

C -- D[label= "s1"];像这种在一个连接语句后有一个属性的设置就对线的设置的。

在 dot 中我们可以用 html 语言写一个 table。在 label 后用< >而不是” ”
就能引入 html 语言。这样就可以创造了一个 5 行 5 列的表格,我们可以在表格
中打字。

默认时图中的线都是从上到下的,我们可以将其改为从左到右,在文件的最上层打入
rankdir=LR 就是从左到右,默认是 TB(top -> bottom),也可以是 RL,BT。

当图中时间表之类的东西时,我们会需要点能排在一行(列),这时要用到 rank,用花括
号把 rank=same,然后把需要并排的点一次输入。


设立一条边时,我们可以制定这条边从起点的那个位置射出和从哪个位置结束。控制符
有"n", "ne","e", "se", "s", "sw", "w" 和 "nw",n表示north，e表示east，
s表示south，w表示west.用法是        c:n -> d:e[label = n];

我们也可以在 record 中给点定义一些 port,因为 record 类型中都是一个个格子。
A[label = "<f0> | <f1> A |<f2> "];
B[label = "<f0> | <f1> B |<f2> "];
A:f0:sw -> B:f1;

画一个子图就是 subgraph cluster#,必须有 cluster 前缀。主图可以使用子图
的结点，子图与子图之间的结点也可以相互引用，结点没有作用域一说。但是结
点第一出现的子图，结点就属于该子图。所以要想将子图与子图之间的结点相连，
就必须在这些子图之外进行连接。如a结点在子图A中第一次出现，那它就是属于
子图clusterA的结的，b属于子图clusterB的结点，若要将a与b连接，那么直接在
两个子图外用a->b语句。

当你想把一条边连到一个子图的边界上,先输入 compound = true,然后就能用
lhead 和 ltail来设置连接的子图了。设a是clusterA子图的结点，b是clusterB
子图的结点，那么a->b[lhead=clusterB];这句就会使得有一条连接线从a指向子
图clusterB，而不是子图clusterB是的b；a->b[lhead=clusterB,
ltail=clusterA];这包就会使得有一条连接线从子图clusterA到子图clusterB。


重新载入文件快速输入rr,重新载入文件用revert-buffer命令。

==============================12/05/27==============================

官网《dot_lag.pdf》:对于语法分析中的ID这个标识是"abc_2"和abc_2语义上没
有区别。但是ID要用关键字时就要加引号。"、&、<、>这些要加上转义符才可以
使用作为纯文本使用。

可以用C++的注释方式进行注释。

Semicolons aid readability 。分号有助于阅读。

分号不是必要的，但是在一个没有内容的子图并在该子图中紧跟着一个匿名的子图。

可以用C语言规则中以反斜杠加回车来进行换行。双引号的字符可以用'+'来进行连接。

子图还有一个用途就是用来设置属性，如一个子图可以设置所有在它里面的结点
为蓝色。也可以
subgraph {
    rank = same; A; B; C;
}
这个匿名的子图设置了A，B，C这些结点必须在同一个等级上。

子图 还有一种用途是指明使用哪种布局。若子图名有cluster前缀。graphviz就
认为它是一个特定x的cluster子图。

对node,edge,graph这些statment的属性进行修改，将会对接下来的相应类型进行
影响。直到设置新的属性。子图会接收父图的属性设置。

graph和subgraph共享同一个命名空间。

DOT默认使用UTF-8编码，可以使用charset属性来指定Latin1(ISO-8859-1) 字符
集。若要用其它的编码，可以用iconv工具来转。

72个point为一英寸(inch)

atrrs.pdf文档笔记：

K属性可以修改所有结点之间的距离，但只用于sfdp,fdp图。

arrowhead设置箭头头端的形状，arrowhead设置箭头头端的形状，arrowsize设置
它的大小。注意：arrowtail在设置dir为back或为both才生效。

bgcolor可设置G和S的背景颜色。

canvas 帆布，画布

center设置将图画放置在画布中间。

charset设置字符编码，用于G。

若subgraph没有cluster的，则该子图没有边框和label。

clusterrank是G的属性，值为local时子图有边框和label，若为global和none则
没有边框和label。

同级子图中的结点互相引用时，结点第一次出现所在的子图就是该结点所在范围，
若设子图a是子图b的父图，结点A在子图a中第一次出现，但在子图b对A引用，则
结点是属于子图b的，由些可以看出，语言的解释器是从最内的图开始解析的。

有逗号或冒号分开多个属性值的属性加上双引号如size="4,4";线的
color="red:blue";

a -> b[dir=both];这句的线只有一条；但a -> b[dir=both,
color="red:blue"];这句的线有两条且颜色不一样。

color属性可以用于ENC，用于node边框的颜色，用于cluster表示其边框的颜色,
若父cluster设置了则其及所有的子cluster都被修改了颜色。

colorscheme属性不知道怎么用

comment属性不知道怎么用

若有a -> c; b -> c;则concentrate属性为true时可能使这两条平行部分线合在
一起。

若有a -> b; a -> c; b -> c[constraint=true];则constraint为true时这结点
会分等级，若为false则不会分等级。不分等级就是b和c在同一水平是，否则就垂
直分布。这个是E的属性。

decorate可以E的label加上下划线并引向相应的edge
