#+STARTUP: showall
* data structure
** struct pid
  #+BEGIN_EXAMPLE
  struct pid
  {
  	/* Try to keep pid_chain in the same cacheline as nr for find_pid */
  	int nr;
  	struct hlist_node pid_chain;
  	/* list of pids with the same nr, only one of them is in the hash */
  	struct list_head pid_list;
  };
  #+END_EXAMPLE

- 关于pid->pid\_list:PGID 值相同的进程链在这里，如上3个进程组，分别各自通过这个域链接起来，
  这里可以认为是第2个维度链.

  所以pid->pid_list是给PGID用的.
- pid->pid_chain链起来pid->nr不一样的.
- pid->pid_list链起来的pid->nr是一样的.
** enum pid_type
   #+BEGIN_EXAMPLE
enum pid_type
{
	PIDTYPE_PID,
	PIDTYPE_TGID,
	PIDTYPE_PGID,
	PIDTYPE_SID,
	PIDTYPE_MAX
};
   #+END_EXAMPLE

   PIDTYPE_MAX是大小.
- 对于PIDTYPE_PID的类型,pid->nr就是进程的pid
  对于PIDTYPE_TGID类型,pid->nr就是进程的线程组ID
** pidmap_t
   #+BEGIN_EXAMPLE
/*
 * PID-map pages start out as NULL, they get allocated upon
 * first use and are never deallocated. This way a low pid_max
 * value does not cause lots of bitmaps to be allocated, but
 * the scheme scales to up to 4 million PIDs, runtime.
 */
typedef struct pidmap {
	atomic_t nr_free;
	void *page;
} pidmap_t;
   #+END_EXAMPLE
   #+BEGIN_EXAMPLE
#define PIDMAP_ENTRIES		((PID_MAX_LIMIT + 8*PAGE_SIZE - 1)/PAGE_SIZE/8)
static pidmap_t pidmap_array[PIDMAP_ENTRIES] =
	 { [ 0 ... PIDMAP_ENTRIES-1 ] = { ATOMIC_INIT(BITS_PER_PAGE), NULL } };
   #+END_EXAMPLE
** fastcall void free_pidmap(int pid)
[[]]
** int alloc_pidmap(void)
- pid:当前要判断该值的pid是否被使用.
- offset:pid变量所表示的pid在那一个位图页中.
- map:pid变量所表示的pid在那一个页中(pidmap_t).
- 用一个全局变量记录上一次搜索到哪里了(last_pid).
- alloc_pidmap里的求max_scan的方法为什么要减!offset呢?因为若不在一页的起始位置就要减去0而不
  是1是因为想多循环一次当前页，所以max_scan指的是将要经过多少次页头（页尾）.

  作一个比喻:假如有两个页,且现在的last_pid在第1个页的中间,且只有last_pid-1才有空pid可用,因
  为代码里的大循环是扫描次数,每到一个位图页的结尾就会循环一次,但是因为是从last_pid开始扫描
  的,所以要循环3次,因为第一个页要在第三次循环再被扫描一次到last_pid-1.
- 用于位图的页可能不只一个,这要看pid_max这个全局变量.
- 若发现pidmap_t->page的位图页还没有分配,那么就分配一页.
  #+BEGIN_EXAMPLE
  		if (unlikely(!map->page)) {
			unsigned long page = get_zeroed_page(GFP_KERNEL);
			/*
			 * Free the page if someone raced with us
			 * installing it:
			 */
			spin_lock(&pidmap_lock);
			if (map->page)
				free_page(page);
			else
				map->page = (void *)page;
			spin_unlock(&pidmap_lock);
			if (unlikely(!map->page))
				break;
		}
  #+END_EXAMPLE 
- 若一个页被扫描完了,就要切到下一个页,切到下一个页时要区分是不是第一个页,
  #+BEGIN_EXAMPLE
		if (map < &pidmap_array[(pid_max-1)/BITS_PER_PAGE]) {
			++map;
			offset = 0;
		} else {
			map = &pidmap_array[0];
			offset = RESERVED_PIDS;
			if (unlikely(last == offset))
				break;
		}
  #+END_EXAMPLE
** struct pid * fastcall find_pid(enum pid_type type, int nr)
- 这个函数找类型为参数type的,pid->nr为参数nr的struct pid.
- 若是找到,那么返回的是被用pid->pid_chain链起的pid,返回这个pid就可以找到所有有和它相同
  pid->nr的pid,因为它们是用pid->pid_list链起来的.
** int fastcall attach_pid(task_t *task, enum pid_type type, int nr)
- 作用:把参数task->pids[type]这个pid加到type类型的hash表里去,且nr是参数nr.最终都会把
  task->pids[type]这个pid的所有成员给初始化:nr, pid_chain, pid_list.
** static fastcall int __detach_pid(task_t *task, enum pid_type type)
- 作用:和attach_pid()的作用相反,把task->pids[type]这个pid从类型为type的hash表中删除
- 删除前要判断这个pid是不是已经hash到hash表.用hlist_unhashed()判断.
- 先把task->pids[type]这个结点从hash表里删除,再把task->pids[type]->pid_list这个链表的第一
  个pid结构体重新插入到hash表.最后再删除把task->pids[type].pid_list从链表里删除.最后还清
  task->pids[type]->nr为零.

  总之就是把task->pids[type]的所有成员都作处理了.
- 若把task->pids[type]->pid_chain从hash表里删除,且task->pids[type]->pid_list链表为空(就是
  说没有与task->pids[type]->nr相同的pid),那么就返回task->pids[type]->nr.否则返回0.

  也就是如果确定了类型为type这个hash表已经没有pid->nr为task->pids[type]->nr的结点时就返回
  task->pids[type]->nr.
** void fastcall detach_pid(task_t *task, enum pid_type type)
- 这个函数两个任务:
  1. 调用__detach_pid()把task->pids[type]这个pid从类型为type的hash表里删除
  2. 若__detach_pid()返回的不是0,表明type类型的hash表里已经没有pid->nr为nr的pid了,那么就要
     判断其它类型的hash表是否还有pid->nr为nr的pid,若都没有,那么就可以调用free_pidmap()把位
     图的第nr位给释放.

     这个函数会先扫描所有类型的hash之后发现没有使用这个nr的pid再删除,所以就算type不是
     PIDTYPE_PID,那么也可以把这个nr的位从位图里删除.
** task_t *find_task_by_pid_type(int type, int nr)
- ulk:To comply with this standard, Linux makes use of thread groups. The identifier
  shared by the threads is the PID of the thread group leader , that is, the PID of the
  first lightweight process in the group;

  发现一个问题:就是像线程组ID是用线程组的领头进程来标识的,所以线程组ID和PID位图没有冲突的关系.
- 那么是不是pid->pid_list链表里的第一个pid就是领头进程的pid呢?
** void switch_exec_pids(task_t *leader, task_t *thread)
- 这个方法只有de_thread()这个函数调用
- 作用:

  把leader->pid, leader->tgid改成thread->pid

  把thread->pid改成thread->tgid

  就是leader->pid, leader->tgid, thread->pid被修改了.

  thread成了自己所在的线程组的领头线程,leader自已也成了自已线程组的领头进程,leader->pid改
  成了thread->pid.

  
