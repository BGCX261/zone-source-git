#+STARTUP: showall
* 说明
- 之前对《Understanding Linux Kernel》作过大量纸质的笔记和摘录，但还是感觉内容太
  多了，大概有近200页的A4纸，想再把它读得更薄点，所以用了Emacs的org-mode来对它作
  一下极简摘录。

* 进程调度
** - 7.1 调度策略
- I/O /CPU受限
- 交互式/批处理/实时
- nice(),
- getpriority(), setpriority()
- sched\_getschrdule(), sched\_setscheduler()
- sched\_getpara(), sched\_setpara()
- sched\_yield()
- sched\_set\_priority\_max()
- sched\_rr\_get\_interval()
- sched\_setaffinity()
- sched\_getaffinity()

*** -7.1.1 进程抢占
- 大于
- TIF\_NEED\_RESCHED
- 仍是TASK\_RUNNINT

*** -7.1.2 一个时间片必须持续多久
- 尽可能长

** 7.2 调度算法
- SCHED\_FIFO，SCHED\_RR定时
- SCHED\_NORMAL

*** -7.2.1 普通进程的调度
- 100-139
- 继承

**** -7.2.1.1 基本时间片
- (140 - 静态优先级) * 20(<120)
- (140 - 静态优先级) * 5 (>=120)

**** -7.2.1.2 动态优先级和平均睡眠时间
- 100-139
- 选择运行
- max(100, min(静态优先级-bouns+5, 130))
- 平均睡眠时间，bouns与时间粒度关系
  - TASK_INTERRUPTE and TASK_UNINTERRUPT add in difference way, TASK_RUNNING
	minus.
- 交互公式

**** -7.2.1.3 活动和过期进程
- 时间片
- 移交互

**** -7.2.1.4 实时进程调度
- 1-99, 总是
- 第一个
- 优先级，阻塞停止，放弃，SCHED\_RR

** -7.3调度程序所使用的数据结构

*** -7.3.1 数据结构runqueue
- runqueues
- this\_rq(), cpu\_rq(n)
- 所属CPU
- arrays域
- 周期交换

*** -7.3.2 进程描述符
- 相关域
- sched\_fork()
- sched\_clock()

** -7.4 调度器所使用的函数

*** -7.4.1 scheduler\_tick()函数
  :PROPERTIES:
  sched_clock():Scheduler clock - returns current time in nanosec units.
  :END:
- timestamp\_last\_tick
  :PROPERTIES:
  timestamp\_last\_tick just like a static value, it will be changed
  every time when the function is called, and it is just modified here.
  the runqueue has an idle process.
  :END:
- swap process
  * TIF\_NEED\_RESCHED
  :PROPERTIES:
  TIF\_NEED\_RESCHED of swap process can also be set. can it be set
  many times?  where it will be switched at last?

  CONFIG_SCHED_SMT
  SMT scheduler support improves the CPU scheduler's decision making
  when dealing with Intel Pentium 4 chips with HyperThreading at a
  cost of slightly increased overhead in some places. If unsure say N
  here.
  :END:
  * hyper_threading
- haven't replace? set TIF\_NEED\_RESCHED, go out
  :PROPERTIES:
	   there is a code block in try_to_wake_up():
	   if (p->array)
	   goto out_running;
	   p->array==NULL can't happen here, why?

	   
  Is it necessary to set TIF\_NEED\_RESCHED? if the process is expired, is it
  possible that it is running?

  it need to get rq lock if write it ,not read it.
  :END:
- update time, RT or normal
- lock rq
- unlock rq
- reblance\_tick()

**** -7.4.1.1 更新实时进程时间片
- FIFO
  - nothing to do
	
	:PROPERTIES:
	lower or equal prio, but how are higher ones?
	:END:
- RR
  - decrease timeslice
  - moving to the active list tail if timeout

	:PROPERTIES:
	so if realtime process is in running statuse, none of the normal
	process can run even it is in running statuse. never set
	TIF_NEED_RESCHED, but it can yield himself.

	when time_slice is 0 , reset first_time_slice

	:END:

**** -7.4.1.2 更新普通进程的时间片
- decrease timeslice
- if timeout
  - however, dequeue\_task() from active list 
  - set TIF\_NEED\_RESCHED
  - effective\_prio() for getting dynamic prio with avg sleeptime
  - reset timeslice(base on the last step)
  - clean first\_time\_slice
  - set expired\_timestamp if 0
    :PROPERTIES:
	this is the only place where it 's set non-zero.
	:END:
  - insert active or expired
	:PROPERTIES:
	why does't it modify the timestamp field?
	:END:
	- insert expried
	  - not TASK\_INTERACTIVE
		:PROPERTIES:
		#define MAX_USER_RT_PRIO	100
		#define MAX_RT_PRIO		MAX_USER_RT_PRIO = 100
		#define PRIO_TO_NICE(prio)	((prio) - MAX_RT_PRIO - 20) = prio - 120
		#define TASK_NICE(p)		PRIO_TO_NICE((p)->static_prio) = stat - 120
		#define MAX_PRIO		(MAX_RT_PRIO + 40)                = 140
		#define USER_PRIO(p)		((p)-MAX_RT_PRIO)             = p - 100
		#define MAX_USER_PRIO		(USER_PRIO(MAX_PRIO))
		#define PRIO_BONUS_RATIO 25
		#define MAX_BONUS		(MAX_USER_PRIO * PRIO_BONUS_RATIO / 100) = 10
		#define INTERACTIVE_DELTA	  2
		#define SCALE(v1,v1_max,v2_max) (v1) * (v2_max) / (v1_max)

		#define DELTA(p) (SCALE(TASK_NICE(p), 40, MAX_BONUS) + INTERACTIVE_DELTA)
								 = stat/4 - 28

		#define TASK_INTERACTIVE(p) ((p)->prio <= (p)->static_prio - DELTA(p))
		finally, TASK_INTERACTIVE is :dynamic prio <= 3*stat_prio/4 + 28
		:END:

	  - EXPIRED\_STARVING
		:PROPERTIES:
		expired processes wait too long (relate to the nr_running and expired_timestamp)
		or an expired process has higher static priority.

		update rq->best_expired_prio, set p->static_prio
		:END:
	- insert active
- not out
  - TIMESILE\_GRANULARITY
		  :PROPERTIES:
		  /*
		   * Prevent a too long timeslice allowing a task to monopolize
		   * the CPU. We do this by splitting up the timeslice into
		   * smaller pieces.
		   *
		   * Note: this does not mean the task's timeslices expire or
		   * get lost in any way, they just might be preempted by
		   * another task of equal priority. (one with higher
		   * priority would have preempted this task already.) We
		   * requeue this task to the end of the list on this priority
		   * level, which is in essence a round-robin of tasks with
		   * equal priority.
		   *
		   * This only applies to tasks in the interactive
		   * delta range with at least TIMESLICE_GRANULARITY to requeue.
		   */
		  :END:

*** -7.4.2 try\_to\_wake\_up() 函数
	:PROPERTIES:
	just exec the out_activate code block can return 1(success), even
	it can't schedule right now, in the out_activate code block it will
	set actived field timestamp field, sleep_avg, prio(recalc_task_prio)
	:END:
	
1) task\_rq\_lock()

	:PROPERTIES:
	disable irq and acquire lock of rq
	:END:
2) stat_mask

   :PROPERTIES:
   so it can wake up any process in defference statuse, even
   TASK_UNINTERRUPTIBLE.
   :END:
3) p->array null
   1. move to CPU

      :PROPERTIES:
         it can wake up the process that it's not belong to current cpu.
         the process assigns to the cpu from the function not when it created.
      :END:
   2. nr_uninterruptible, p->actived = -1
   3. active\_task()

      :PROPERTIES:
      why doesn't set first_time_slice?
      :END:
      1) sched\_clock()
      2) recalc\_task\_prio()
      3) p->actived evaluate 2 or 1
		 :PROPERTIES:
          why actived field is set again, it had been set in step 2, because
		  it's set -1 here.
		  Actived field can be evaluate 2 so it can schedule in interrupt.
		  Uninterruptible task can't be set actived field, because it is set
		  in try_to_wake_up().
		 :END:
      4) p->stimestamp.
		 :PROPERTIES:
		 when it is waked up, also set timestamp
		 :END:
	  5) insert active list
		 :PROPERTIES:
		 it always insert into the active list
		 :END:
4) local CPU或sync and TASK_PREEMPTS_CURR()(task can preempt curr),
   resched\_task(), uni/multiprocessor

   :PROPERTIES:
   why call resched_task() in the func, but not in scheduler_tick()? because
   scheduler_tick() also set TIF_NEED_RESCHED in uniprocessor.
   where the lower prio process will be replaced ?
   :END:
5) TASK\_RUNNIGN
6) unlock rq

   :PROPERTIES:
   task_running() is "task is running",
   p->array is null, but p->thread_info->cpu can't be null.
   :END:

*** -7.4.3 recalc\_task\_prio() 函数
- it's a static function
:PROPERTIES:
the struction of the func should change to that categorised as process's type
like
:END:
- step:
  1. calc avg sleeptime and dynamic prio
  2. min(now - p->timestamp, 109)
  3. not greater than 0
  4. p->sleep_avg = 900(empirical, max sleep time subtract timeslice), if not
	 thread not TASK_UNIT and great INTERACTIVE_SLEEP(); go [[__a]]
     :PROPERTIES:
     who can exec here? system load is very high?
     :END:
  5. CURRENT\_BONUS, sleep_time mult (MAX_BONUS - CURRENT_BONUS)
  6. is not thread, is TASK_UNINT
	 :PROPERTIES:
	 is possible greater than INTERACTIVE_SLEEP()?
	 Tasks waking from uninterruptible sleep are
	 limited in their sleep_avg rise as they
	 are likely to be waiting on I/O
	 :END:
  7. sleep_time add to p->sleep_avg
  8. must smaller than 1000
  9. __a effective_prio
- rewrite
#+BEGINE_EXAMPLE
static void recalc_task_prio(task_t *p, unsigned long long now)
{
	/* Caller must always ensure 'now >= p->timestamp' */
	unsigned long long __sleep_time = now - p->timestamp;
	unsigned long sleep_time;

	if (__sleep_time > NS_MAX_SLEEP_AVG)
		sleep_time = NS_MAX_SLEEP_AVG;
	else
		sleep_time = (unsigned long)__sleep_time;

	if (likely(sleep_time > 0)) {
		/* normal, TASK_UNINTERRUPT */
		if (p->mm && p->activated == -1){
			sleep_time *= (MAX_BONUS - CURRENT_BONUS(p)) ? : 1;
			
			if (p->sleep_avg >= INTERACTIVE_SLEEP(p)){
				sleep_time = 0;
			}
			else if (p->sleep_avg + sleep_time >=
					 INTERACTIVE_SLEEP(p)) {
				p->sleep_avg = INTERACTIVE_SLEEP(p);
				sleep_time = 0;
			}
			
			p->sleep_avg += sleep_time;
			if (p->sleep_avg > NS_MAX_SLEEP_AVG)
				p->sleep_avg = NS_MAX_SLEEP_AVG;

		}
		/* normal, not TASK_UNINTERRUPT */
		else if (p->mm && p->activated != -1)
		{
			if (sleep_time > INTERACTIVE_SLEEP(p)){
				p->sleep_avg = JIFFIES_TO_NS(MAX_SLEEP_AVG -
						DEF_TIMESLICE);
			}
			else{
				sleep_time *= (MAX_BONUS - CURRENT_BONUS(p)) ? : 1;
				
				p->sleep_avg += sleep_time;
				if (p->sleep_avg > NS_MAX_SLEEP_AVG)
					p->sleep_avg = NS_MAX_SLEEP_AVG;
				
			}
		}else{		/* thread (!p->mm) and other */
			sleep_time *= (MAX_BONUS - CURRENT_BONUS(p)) ? : 1;
			
			p->sleep_avg += sleep_time;
			if (p->sleep_avg > NS_MAX_SLEEP_AVG)
				p->sleep_avg = NS_MAX_SLEEP_AVG;
		}

		p->prio = effective_prio(p);
	}
}

#+END_EXAMPLE

*** -7.4.4 schedule()

**** -7.4.4.1 direct invocation
- for resource
- 5 steps
  1. insert wait list
  2. TASK_(UN)INTERRUPTIBLE
  3. schedule()
  4. check resource
  5. remove from list

**** -7.4.4.2 lazy invocation
- TIF\_NEED\_RESCHED

  :PROPERTIES:

  is it just only check it when switch to user mode ?

  :END:
- example
  1. scheduler_tick()
  2. try_to_wake_up()
  3. sched_setschedule()

	 :PROPERTIES:
     all of them are functions. just in these case set TIF\_NEED\_RESCHED ?
     :END:

**** -7.4.4.3 actions performed by schedule() before a process switch
1. in exiting and in atomic then dump
	 :PROPERTIES:
	 task's stat is represented by bit.
     :END:
2. prifile_hit()
3. preempt_disable(), release_kernel_lock(), this_rq()
4. it's idle thread and not in running then dump_stack();
5. check kernel lock
6. get run_time, sched_clock()-prev->timestamp
7. limit in 1s

   :PROPERTIES:
   why is 1s?
   :END:
8. lock rq
9. PF\_DEAD

   :PROPERTIES:
   A PF\_DEAD's process will also call schedule()?
   what is the relation between PF_DEAD(p->flags) and EXIT_DEAD(p->state)
   :END:
10. not in running stat and not be preempt in kernel mode then remove from rq

	:PROPERTIES:
   why remove from rq not active list, and where is also remove it from rq
   :END:
11. TASK_INTERRUPTIBLE(no TASK_STOPPED) and not pending by signal then
	set RUNNING, and it will also be the next.

	:PROPERTIES:
	TASK_RUNNING may be set again in schedule().
	:END:
12. idle\_balance()
13. active <-> expired
14. bitmask

	:PROPERTIES:
	bitmask is used in schedule(), it is firstly idle\_balance() then active <-> expired
	:END:
15. add sleeptime then reinster to rq->active
	- TASK_INTERRUPTIBLE or TASK_STOPPED
      1. by system call
      2. by interrupt or deferred function

**** -7.4.4.4 完成进程切换时所执行的操作
1. prefetch
2. clear next's  TIF\_NEED\_RESCHED
3. rcq_qsctr_inc
4. minus next't sleeptime, timestamps

   :PROPERTIES:
   add in 7.4.4.3 and subtract here
   :END:
5. prev == next
6. active_mm(using) and mm(own) field.
7. prev is kernel thread or a exit process
   - set prev\_mm field

**** -7.4.4.5 进程切换后schedule()执行的操作
1. barrier()
2. finish\_task\_switch()
   1. unlock rq, enable irq
   2. put\_task\_struct() if prev is zombie

      :PROPERTIES:
      zombie process free his left resource here.
      :END:
3. kernel lock, enabel preempt, check TIF\_NEED\_RESCHED

   :PROPERTIES:
   why check TIF\_NEED\_RESCHED again, if it's set, it will rerun schedule()
   :END:

** -7.4 多处理器系统中进行队列的平衡
- flavous
- 典型超线程NUMA
- 调度域

*** -7.5.1 调度域
- CPU集合， 分层
- 组间
- sched\_domain, sched\_group, groups, parent
- phys\_domains, sd

*** -7.5.2 rebalance\_tick()
- scheduler\_tick
- 3参数
- cpu\_load域
- 迭代load\_balance(), 频率

*** -7.5.3 load\_balance() 函数
- 移到本地
- find\_busest\_group()
- 调整
- find\_busiest\_queue(), 最忙
- move\_tasks()
- 锁
- active\_balance, migrtion\_thread
- 放锁

*** -7.5.4 move\_tasks()
- NEWLY\_IDLE
- expired, 高优先级
- active， can\_migrate\_task()
- 远程CPU，cpus,allowed,idle,反复,"cache hot"
- pull\_task(), dequeue/enqueue\_task(), resched\_task

** -7.6 与调度相关的系统调用

*** -7.6.1 nice() 系统调用
- sys\_nice()
- 40
- capable()
- security\_task\_setnice()
- static\_prio
- setuser\_nice()
- resched\_task()

*** -7.6.2 getpriority() 和setpriority()调用
- 20减
- PRIO\_PROCESS/PGRP/USER

*** -7.6.3 sched\_get(SET)AFFINITY()
- cpus\_allows, 位图
- 移进程

*** -7.6.4 与实时进程相关的系统调用

**** -7.6.4.1 sched\_get(set)scheduler()
- sys\_sched\_getschedule()
- policy域
- do\_sched\_setscheduler()
- 删，更新，插

**** -7.6.4.2 sched\_get(set)param()
- rt\_priority域
- expired或runqueue

**** -7.6.4.3 sched\_yield()
- expired或runqueue

**** -7.6.4.4 

**** -7.6.4.5 sched\_rr\_get\_interval()
- 实时进程
- 纳秒
- FIFO


* other
** effective_prio()
- the dynamic prio of process(rt or normal) get from this function.
- if it's rt process , just return the dynamic prio without bonuse and penalty
   :PROPERTIES:
   where is rt's prio set?
   :END:
- formula for get current bonus : current bonus / MAX_BONUS = current sleep_avg /
  MAX_SLEEP_AVG
- formala for get MAX_BONUS: MAX_BONUS / MAX_USER_PRIO = PRIO_BONUS_RATIO / 100
- the dynamic prio always get with static prio subtract current bonus.
- USER_PRIO macro does not include the rt, so it is MAX_PRIO subtract
  MAX_RT_PRIO,
- there is an express in ulk:
   :PROPERTIES:
   The bonus is a value ranging from 0 to 10; a value less than 5
  represents a penalty that lowers the dynamic priority, while a value
  greater than 5 is a premium that raises the dynamic priority. The
  value of the bonus, in turn, depends on the past history of the
  process; more precisely, it is related to the average sleep time of
  the process.
   :END:
  and effective_prio has a code block:

   :PROPERTIES:
   	bonus = CURRENT_BONUS(p) - MAX_BONUS / 2;
	prio = p->static_prio - bonus;
   :END:
   so MAX_BONUS is 10, CURRENT_BONUS(p) is between 0 and 10.
** NICE AND PRIO
#+BEGIN_EXAMPLE
 /*
  * Convert user-nice values [ -20 ... 0 ... 19 ]
  * to static priority [ MAX_RT_PRIO..MAX_PRIO-1 ],
  * and back.
  */
 #define NICE_TO_PRIO(nice)	(MAX_RT_PRIO + (nice) + 20)
 #define PRIO_TO_NICE(prio)	((prio) - MAX_RT_PRIO - 20)
 #define TASK_NICE(p)		PRIO_TO_NICE((p)->static_prio)
#+END_EXAMPLE
- we can learn that when prio increase by 1 , nice increase by 1.
- start form MAX_RT_PRIO.
- relate to the static prio, not dynamic prio
- the rt task's nice is smaller than -20.


#+BEGIN_EXAMPLE
/*
 * 'User priority' is the nice value converted to something we
 * can work with better when scaling various scheduler parameters,
 * it's a [ 0 ... 39 ] range.
 */
#define USER_PRIO(p)		((p)-MAX_RT_PRIO)
#define TASK_USER_PRIO(p)	USER_PRIO((p)->static_prio)
#define MAX_USER_PRIO		(USER_PRIO(MAX_PRIO))
#+END_EXAMPLE
