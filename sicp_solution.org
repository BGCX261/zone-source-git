#+STARTUP: showall
* charpter 1
** ex 1.1
** ex 1.2
- (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
- (* 3 (- 6 2) (- 2 7))
** ex 1.3
- code
#+BEGIN_EXAMPLE

(define (largest_3 a b c)
  (if (> a b)
      (if (> a c)
          (a)
        (c))
    (if (> b c)
        (b)
      (c))))

(define (larger a b)
  (if (> a b)
      (a)
    (b)))

(define (larger_3 a b c)
  (cond (and (larger a b) (larger c a)) a
        (and (larger b a) (larger c b)) b
        (and (larger c b) (larger a c)) c))

(define (square x) (* x x))

(difine (ex_1_3 a b c)
        (+ 
         (square 
          (largest_3 a b c)) 
         (square 
          (larger_3 a b c))))
#+END_EXAMPLE

** ex 1.4
- if the interpreter is the normal-order one ,then the code will be die-cycle.

