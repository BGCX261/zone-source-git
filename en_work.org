#+STARTUP: showall
结合语境可以记得更牢固
* SICP 
** Preface to the Second Edition
- entry_level
- material
  - The material in this book has been the basis of MIT's entry-level
    computer science subject since 1980.
- elapse
  - twelve more years have elapsed
- incorporate, text
  - We are pleased that our work has been widely adopted and
    incorporated into other texts.
- capable, accomplished
  - We are lucky to have such capable students and such accomplished
    builders.
- clarifications
  - We have incorporated hundreds of clarifications suggested by our
    own teaching experience and the comments of colleagues at MIT and
    elsewhere.
** Preface to the First Edition
- aesthetics
  - Our goal is that students who complete this subject should have a
    good feel for the elements of style and the aesthetics of
    programming.
- exemplary
  - They should be capable of reading a 50-page-long program, if it is
    written in an exemplary style.
-
  - They should know what not to read, and what they need not
understand at any moment.
- retaining
  - They should feel secure about modifying a program, retaining the
    spirit and style of the original author.
- appropriate
  - We control complexity by building abstractions that hide details
    when appropriate.
- combining
  - We control complexity by establishing conventional interfaces that
    enable us to construct systems by combining standard,
    well-understood pieces in a "mix and match" way.
- conviction
  - Underlying our approach to this subject is our conviction that
    "computer science" is not a science and that its significance has
    little to do with computers.
- essence, epistemology, imperative
  - The essence of this change is the emergence of what might best be
    called "procedural epistemology"--the study of the structure of
    knowledge from an imperative point of view, as opposed to the more
    declarative point of view taken by classical mathematical
    subjects.
  - Mathematics provides a framework for dealing precisely with
    notions of "what is."  Computation provides a framework for
    dealing precisely with notions of "how to.
- formally
  - We never formally teach the language,
- compound
  - They have very few ways of forming compound expressions
- decompose
  - how we will decompose problems into manageable parts
- mutation
  - we can model local state using assignment and data mutation,
- scouted, territory
  - We also recognize our debt to the mathematicians who scouted out
    this territory decades before computers appeared on the scene.
- inhabit
  - Computational processes are abstract beings that inhabit
    computers.
- evolve, manipulate
  - As they evolve, processes manipulate other abstract things called
    "data".
-
  - The evolution of a process is directed by a pattern of rules
    called a "program".
- spirits, spell
  - In effect, we conjure the spirits of the computer with our spells.
- sorcerer
  - A computational process is indeed much like a sorcerer's idea of a
    spirit.
- matter
  - It is not composed of matter at all.
- disbursing
  - It can affect the world by disbursing money at a bank or by
    controlling a robot arm in a factory.
- arcane, esoteric
  - They are carefully composed from symbolic expressions in arcane
    and esoteric "programmin languages" that prescribe the tasks we
    want our processes to perform.
- apprentice, novice, anticipate
  - Thus, like the sorcerer's apprentice, novice programmers must
    learn to understand and to anticipate the consequences of their
    conjuring.
- catastrophic, collapse
  - A small bug in a computer-aided design program, for example, can
    lead to the catastrophic collapse of an airplane or a dam or the
    self-destruction of an industrial robot.
- master, reasonably, intended
  - Master software engineers have the ability to organize programs so
    that they can be reasonably sure that the resulting processes will
    perform the tasks intended.
- visualize
  - They can visualize the behavior of their systems in advance.
- invent, formalism
  - Lisp was invented in the late 1950s as a formalism for reasoning
    about the use of certain kinds of logical expressions, called
    "recursion equations", as a model for computation.
- inception
  - Despite its inception as a mathematical formalism, Lisp is a
    practical programming language.
- informall, experimental, pragmatic, implementation
  - Instead, it evolved informally in an experimental manner in
    response to users' needs and to pragmatic implementation
    considerations.
- promulgate
  - Lisp's informal evolution has continued through the years, and the
    community of Lisp users has traditionally resisted attempts to
    promulgate any "official" definition of the language.
- reputation
  - Although Lisp has not yet overcome its old reputation as
    hopelessly inefficient,
- mean
  - A powerful programming language is more than just a means for
    instructing a computer to perform tasks.
*** 1.1.1 Expressions
- delimiting
  - Expressions such as these, formed by delimiting a list of
    expressions within parentheses in order to denote procedure
    application, are called "combinations".
- leftmost
  - The leftmost element in the list is called the "operator",
- ambiguity
  - No ambiguity can arise, because the operator is always the
    leftmost element and the entire combination is delimited by the
    parentheses.
- indentation
  - The resulting indentations display clearly the structure of the
expression.
*** 1.1.2 Naming and the Environment
- successive
  - The interpreter makes this step-by-step program
construction particularly convenient because name-object associations
can be created incrementally in successive interactions.
- retrieving
  - It should be clear that the possibility of associating values with
symbols and later retrieving them means that the interpreter must
maintain some sort of memory that keeps track of the name-object pairs.
*** 1.1.3 Evaluating Combinations
- As a case in point 作为一个很好的例子
  - As a case in point, let us consider that, in evaluating
combinations, the interpreter is itself following a procedure.
- dictates
  - First, observe that the first step dictates that
in order to accomplish the evaluation process for a combination we must
first perform the evaluation process on each element of the
combination.
- in the case of
  - in the case of a deeply nested combination, would otherwise be
viewed as a rather complicated process.
- in terms of, percolate, 
  - Viewing evaluation in terms of
the tree, we can imagine that the values of the operands percolate
upward, starting from the terminal nodes and then combining at higher
and higher levels.
- hierarchical
  - In general, we shall see that recursion is a very
powerful technique for dealing with hierarchical, treelike objects.
- constitute
  - The various kinds of expressions
(each with its associated evaluation rule) constitute the syntax of the
programming language.
** 1.1.4 Compound Procedures
- examin
  - We begin by examining how to express the idea of "squaring."
** 1.1.5 The Substitution Model for Procedure Application
- apply
  -  Now `(+ 5 1)' produces 6 and `(* 5 2)' produces 10, so we
must apply the `sum-of-squares' procedure to 6 and 10.
- insofar
  - It can be taken as a model that determines
the "meaning" of procedure application, insofar as the procedures in
this chapter are concerned.
- stressed
  - However, there are two points that should
be stressed:
- substitution
  - The purpose of the substitution is to help us think about procedure
     application,
- elaborate, culminating
  - we will present a sequence of
     increasingly elaborate models of how interpreters work,
     culminating with a complete implementation of an interpreter and
     compiler in *Note Chapter 5::.
- formally
  - a way to get started thinking formally
     about the evaluation process.
- exception
  - The substitution model is no exception.
- mutable
  - In particular,
     when we address in *Note Chapter 3:: the use of procedures with
     "mutable data," we will see that the substitution model breaks
     down and must be replaced by a more complicated model of procedure
     application.
- versus
  - Applicative order versus normal order
- operand, resulting
  - the interpreter first evaluates the operator and operands and
then applies the resulting procedure to the resulting arguments.
- paramter, argument
  - To apply a compound procedure to arguments, evaluate the body of
     the procedure with each formal parameter replaced by the
     corresponding argument.
- partly, realm
  - Lisp uses applicative-order evaluation, partly because of the
additional efficiency obtained from avoiding multiple evaluations of
expressions such as those illustrated with `(+ 5 1)' and `(* 5 2)'
above and, more significantly, because normal-order evaluation becomes
much more complicated to deal with when we leave the realm of
procedures that can be modeled by substitution.
- investigate 
-   On the other hand,
normal-order evaluation can be an extremely valuable tool, and we will
investigate some of its implications in *Note Chapter 3:: and *Note
Chapter 4::.

** 1.1.6 Conditional Expressions and Predicates
- expressive, class
  - The expressive power of the class of procedures that we can define
    at this point is very limited, because we have no way to make
    tests and to perform different operations depending on the result
    of a test.
- in which case
  - This process continues until a predicate is found whose value is
    true, in which case the interpreter returns the value of the
    corresponding expression "consequent expression" <E> of the clause
    as the value of the conditional expression.

** 1.1.7 Example: Square Roots by Newton's Method
- rephrase, pseudo
   - It will not help matters to rephrase this definition in
     pseudo-Lisp:
- imperative
  - the distinction between declarative knowledge and imperative knowledge.
- radicand
  - We start with a value for the radicand (the number whose square root we are
trying to compute) and a value for the guess.

** 1.1.8 Procedures as Black-Box Abstractions
- cluster, decomposition
  - The entire `sqrt' program can be viewed as a cluster of procedures
    (shown in *Note Figure 1-2::) that mirrors the decomposition of
    the problem into subproblems.
- 
  - One detail of a procedure's implementation that should not matter
    to the user of the procedure is the implementer's choice of names
    for the procedure's formal parameters.
- profound
  - This principle--that the meaning of a procedure should be
    independent of the parameter names used by its author--seems on
    the surface to be self-evident, but its consequences are profound.
- formal/
  - In a procedure definition, the bound variables declared as the
    formal parameters of the procedure have the body of the procedure
    as their scope.
- auxiliary
  - many numerical functions are computed as successive approximations
    and thus might have procedures named `good-enough?' and `improve'
    as auxiliary procedures.
- lurking
  - But there is a better idea lurking here.
- tractable
  - We will use block structure extensively to help us break up large
    programs into tractable pieces.
- discipline
  - This discipline is called "lexical
scoping".

** 1.2 Procedures and the Processes They Generate
- analogous, tactics
  - Our situation is analogous to that of someone who has learned the
    rules for how the pieces move in chess but knows nothing of
    typical openings, tactics, or strategy.
- novice, domain
  - Like the novice chess player, we don't yet know the common
    patterns of usage in the domain.
- synthetic
  - just as it is in any synthetic, creative activity.
- So it is with 
  - So it is with programming,
- investigate
  - We will also investigate the rates at which these processes
    consume the important computational resources of time and space.
** 1.2.1 Linear Recursion and Iteration
- stipulation
  - If we add the stipulation that 1! is equal to 1,
- recast
  - Once again, we can recast our description as a procedure for
    computing factorials:
- evolve
  - On the other hand, when we consider the "shapes" of the two
    processes, we find that they evolve quite differently.
- occurs
  - The contraction occurs as the operations are actually performed.
- simultaneously
  - We can describe the computation by saying that the counter and the
    product simultaneously change from one step to the next according
    to the rule
** 1.2.2 Tree Recursion
- instructive, prototypical, redundant
  - This procedure is instructive as a prototypical tree recursion, but
it is a terrible way to compute Fibonacci numbers because it does so
much redundant computation.
- redundancies
  - `Count-change' generates a tree-recursive process with
    redundancies similar to those in our first implementation of
    `fib'.
- gross
  - One convenient way to describe this difference is to use the
    notion of "order of growth" to obtain a gross measure of the
    resources required by a process as the inputs become larger.
- elementary
  - Similarly, R(n) might measure the number of internal
storage registers used, the number of elementary machine operations
performed, and so on.
- proportional
  -   In computers that do only a fixed number of
operations at a time, the time required will be proportional to the
number of elementary machine operations performed.
- crude
  -  Orders of growth provide only a crude description of the behavior of
a process.
- utilization
  - For an exponential process, each increment
in problem size will multiply the resource utilization by a constant
factor.
- remainder
  - In the remainder of section *Note 1-2:: we will examine two
algorithms whose order of growth is logarithmic, so that doubling the
problem size increases the resource requirement by a constant amount.
** 1.2.3 Orders of Growth
- Order
** 1.2.4 Exponentiation
- evolved
  - The process evolved by `fast-expt' grows logarithmically with n in
both space and number of steps.
- successive
  - We can compute exponentials in fewer steps by using successive
squaring.

** 1.2.5 Greatest Common Divisors
- investigate, rational
  - when we
investigate how to implement rational-number arithmetic, we will need
to be able to compute GCDs in order to reduce rational numbers to
lowest terms.
- numerator
  - To reduce a rational number to lowest terms, we must
divide both the numerator and the denominator by their GCD.
- estimate
  - We can use this theorem to get an order-of-growth estimate for
Euclid's Algorithm.

** 1.2.6 Example: Testing for Primality
- fascinated
  - Since ancient times, mathematicians have been fascinated by problems
concerning prime numbers,

** 2.1.1 Example: Arithmetic Operations for Rational Numbers
- rational
  - Suppose we want to do arithmetic with rational numbers.
- numerator
  - Let us begin by assuming that we already have a way of constructing
a rational number from a numerator and a denominator.
- synthesis
  - We are using here a powerful strategy of synthesis.
- glue
  - What we need is some
way to glue together a numerator and a denominator to form a rational
number.
- remedy  
  - We can remedy this by
changing `make-rat'.

** 2.1.2 Abstraction Barriers
- envision
  - We can envision the structure of the rational-number system as shown
in figure *Note 
- solely
  - Programs that use rational numbers manipulate them solely
in terms of the procedures supplied "for public use" by the
rational-number package: `add-rat', `sub-rat', `mul-rat', `div-rat',
and `equal-rat?'.
- irrelevant
  - The details of how pairs
are implemented are irrelevant to the rest of the rational-number
package so long as pairs can be manipulated by the use of `cons',
`car', and `cdr'.
- confined
  - This task could
be time-consuming and expensive in the case of large programs unless
the dependence on the representation were to be confined by design to a
very few program modules.
- Constraining
  - Constraining the dependence on the representation to a few interface
procedures helps us design programs as well as modify them, because it
allows us to maintain the flexibility to consider alternate
implementations.

** 2.1.3 What Is Meant by Data?
- intuitive
  - This use of procedures corresponds to nothing like our intuitive
notion of what data should be.
- Nevertheless
  - Nevertheless, all we need to do to show
that this is a valid way to represent pairs is to verify that these
procedures satisfy the condition given above.
- subtle
  - The subtle point to notice is that the value returned by `(cons x
y)' is a procedure--namely the internally defined procedure `dispatch',
which takes one argument and returns either `x' or `y' depending on
whether the argument is 0 or 1.
- obscure adequate
  - The procedural representation, although obscure,
is a perfectly adequate way to represent pairs, since it fulfills the
only conditions that pairs need to fulfill.
- repertoire
  - This
may seem a curiosity now, but procedural representations of data will
play a central role in our programming repertoire.

** 2.1.4 Extended Exercise: Interval Arithmetic

- inexact
  - One feature she wants to provide in her system is the
ability to manipulate inexact quantities (such as measured parameters
of physical devices) with known precision,
- resistance
  - It is sometimes necessary for them to compute
the value of a parallel equivalent resistance R_p of two resistors R_1
and R_2 using the formula
- postulates
  - Alyssa postulates the existence of an abstract object called an
"interval" that has two endpoints:

** 2.2.1 Representing Sequences
- accompanied
  - The use of pairs to represent sequences of elements as lists is
accompanied by conventional programming techniques for manipulating
lists by successively "`cdr'ing down" the lists.
- customary
  - It is customary to number the
elements of the list beginning with 0.
- capture
  - We can abstract this general idea and capture it as a common pattern
expressed as a higher-order procedure,
- conceptual
  - this
abstraction gives us the flexibility to change the low-level details of
how sequences are implemented, while preserving the conceptual
framework of operations that transform sequences to sequences.

** 2.2.3
- enmeshed
  - In working with compound data, we've stressed how data abstraction
    permits us to design programs without becoming enmeshed in the
    details of data representations, and how abstraction preserves for
    us the flexibility to experiment with alternative representations.
- crucially
  - Our ability to formulate analogous operations for working with
    compound data depends crucially on the style in which we
    manipulate our data structures.
- enumerates
  - enumerates the leaves of a tree;
- cascade
  - A signal-processing engineer would find it natural to
    conceptualize these processes in terms of signals flowing through
    a cascade of stages, each of which implements part of the program
    plan, as shown in *Note Figure 2-7.
- accumulation
  - Similarly, the accumulation is found partly in the tests and partly
    in the addition used in the recursion.
- decompose, mingling
  - Our two procedures decompose the computations in a different way,
    spreading the enumeration over the program and mingling it with
    the map, the filter, and the accumulation.
- manifest, conceptual, clarity
  - If we could organize our programs to make the signal-flow
    structure manifest in the procedures we write, this would increase
    the conceptual clarity of the resulting code.
- regularly, cascading
  - In real signal-processing applications, for example, designers
    regularly build systems by cascading elements selected from
    standardized families of filters and transducers.
- intact
  - By changing these, we can experiment with alternative
    representations of sequences, while leaving the overall design of
    our programs intact.
- paradigm
  - We will exploit this capability in section *Note 3-5::, when we
    generalize the sequence-processing paradigm to admit infinite
    sequences.
** 2.2.4 Example: A Picture Language
- closure
  - This section presents a simple language for drawing pictures that
    illustrates the power of data abstraction and closure, and also
    exploits higher-order procedures in an essential way.
- elegance
  - Part of the elegance of this picture language is that there is
    only one kind of element, called a "painter".
- designated
  - A painter draws an image that is shifted and scaled to fit within
    a designated parallelogram-shaped frame.
- elaborate
  - Painters can be more elaborate than this:
- balanced
  - We can produce balanced patterns by branching upwards as well as
    towards the right
- orient
  - `flipped-pairs' and `square-limit' each arrange four copies of a
    painter's image in a square pattern; they differ only in how they
    orient the copies.
- origin, plane
  - The origin vector specifies the offset of the frame's origin from
    some absolute origin in the plane, and the edge vectors specify
    the offsets of the frame's corners from its origin.
- perpendicular
  - If the edges are perpendicular, the frame will be rectangular.
- vertex
  - For example, (0,0) is mapped to the origin of the frame, (1,1) to
    the vertex diagonally opposite the origin, and (0.5,0.5) to the
    center of the frame.
- segments
  - from lists of line segments as follows:
- erects
  - Representing painters as procedures erects a powerful abstraction
    barrier in the picture language.
- intermix
  - We can create and intermix all sorts of primitive painters, based
    on a variety of graphics capabilities.
- upper-right
  - For example, we can define a painter that shrinks its image to the
    upper-right quarter of the frame it is given:
- rotate
  - Other transformations rotate images counterclockwise by 90 degrees
- squash
  - squash images towards the center of the frame
- robust
  - Levels of language for robust design
- glimpse
  - We have also obtained a glimpse of another crucial idea about
    languages and program design.
- stratified
  - This is the approach of "stratified design", the notion that a
    complex system should be structured as a sequence of levels that
    are described using a sequence of languages.
- pervades
  - Stratified design pervades the engineering of complex systems.
- resistors, transistors
  - For example, in computer engineering, resistors and transistors
    are combined (and described using a language of analog circuits)
    to produce parts such as and-gates and or-gates, which form the
    primitives of a language for digital-circuit design.
- using languages appropriate to computer, (what does appropriate
  describ for)
  - which are in turn combined to form computers, using languages
    appropriate to computer architecture.
- tiny
  - As a tiny example of stratification, our picture language uses
    primitive elements (primitive painters) that are created using a
    language that specifies points and lines to provide the lists of
    line segments for `segments->painter', or the shading details for
    a painter like `rogers'.
- vocabulary
  - In general, each level of a stratified design provides a different
    vocabulary for expressing the characteristics of the system, and a
    different kind of ability to change it.

** 2.3.1 Quotation
- Quotation
- type in
  - Quotation also allows us to type in compound objects,
- dispense
  - In keeping with this, we can obtain the empty list by evaluating
    `'()', and thus dispense with the variable `nil'.
** 2.3.2 Example: Symbolic Differentiation
- differentiation
- algebraic
  - As an illustration of symbol manipulation and a further
    illustration of data abstraction, consider the design of a
    procedure that performs symbolic differentiation of algebraic
    expressions.
- derivative, with respect to
  - We would like the procedure to take as arguments an algebraic
    expression and a variable and to return the derivative of the
    expression with respect to the variable.
- afterward
  - Only afterward will we address the representation problem.
- embody, indulge
  - To embody these rules in a procedure we indulge in a little
    wishful thinking, as we did in designing the rational-number
    implementation.
- addend
  - For a sum, for example we want to be able to extract the addend
    (first term) and the augend (second term).
- incorporates
  - This `deriv' procedure incorporates the complete differentiation
    algorithm.
- representation
** 2.3.3 Example: Representing Sets
- transactions
  - Consider a data base containing a large number of individual
    records, such as the personnel files for a company or the
    transactions in an accounting system.
- sophisticated
  - Later on, the data representation can be modified to be more
    sophisticated.
- methodology
  - In designing such a system the methodology of data abstraction can
    be a great help.
** 2.3.4 Example: Huffman Encoding Trees
- attain
  - In general, we can attain significant savings if we use
    variable-length prefix codes that take advantage of the relative
    frequencies of the symbols in the messages to be encoded.

** 2.4.1 Representations for Complex Numbers
- plausible, complex number, polar, magnitude
  - We begin by discussing two plausible representations for complex
    numbers as ordered pairs: rectangular form (real part and
    imaginary part) and polar form (magnitude and angle).
- coexist
  - will show how both representations can be made to coexist in a
    single system through the use of type tags and generic operations.
- dimensional, orthogonal
  - The set of complex numbers can be thought of as a two-dimensional
    space with two orthogonal axes, the "real" axis and the
    "imaginary" axis.
- Addition
  - Addition of complex numbers reduces in this representation to
    addition of coordinates:
- stretching, rotating
  - The product of two complex numbers is the vector obtained by
    stretching one complex number by the length of the other and then
    rotating it through the angle of the other:
- regardless of
  - Yet, from the viewpoint of someone writing a program that uses
    complex numbers, the principle of data abstraction suggests that
    all the operations for manipulating complex numbers should be
    available regardless of which representation is used by the
    computer.
- concrete
  - In order to make the different choices concrete, imagine that
    there are two programmers, Ben Bitdiddle and Alyssa P.Hacker, who
    are independently designing representations for the complex-number
    system.
- trigonometric
  - To find the magnitude and the angle, or to construct a complex
    number with a given magnitude and angle, he uses the trigonometric
    relations
- discipline
  - The discipline of data abstraction ensures that the same
    implementation of `add-complex', `sub-complex', `mul-complex', and
    `div-complex' will work with either Ben's representation or
    Alyssa's representation.

** 2.4.2 Tagged data
- retain
  - The abstraction
barrier formed by the selectors and constructors permits us to defer to
the last possible moment the choice of a concrete representation for
our data objects and thus retain maximum flexibility in our system
design.
- extremes
  - The principle of least commitment can be carried to even further
extremes.
- ambiguity
  - If we desire, we can maintain the ambiguity of
representation even _after_ we have designed the selectors and
constructors, and elect to use both Ben's representation _and_ Alyssa's
representation.
- postulate
  - We will also postulate a procedure
`attach-tag' that takes a tag and contents and produces a tagged data
object.
- suffix
  - One way to do this is for Ben to append
the suffix `rectangular' to the name of each of his representation
procedures and for Alyssa to append `polar' to the names of hers.

** 2.4.3 Data-Directed Programming and Additivity
- Data-Directed, Additivity
- dispatching
  - The general strategy of checking the type of a datum and calling
    an appropriate procedure is called "dispatching on type".
- modularity
  - This is a powerful strategy for obtaining modularity in system
    design.
- clause
  - We would need to identify this new representation with a type, and
    then add a clause to each of the generic interface procedures to
    check for the new type and apply the appropriate selector for that
    representation.
- incorporate
  - For instance, suppose we wanted to incorporate a new
    representation for complex numbers into our complex-number system.
- underlying
  - The issue underlying both of these weaknesses is that the
    technique for implementing generic interfaces is not "additive".
- straightforward, nonetheless, inconvenience
  - In each of these cases, the changes that must be made to the code
    are straightforward, but they must be made nonetheless, and this
    is a source of inconvenience and error.
- large-scale
  - The problem is real and must be addressed in such programs as
    large-scale data-base-management systems.
- explicit
  - Previously, we implemented the mechanism that interfaces the
    complex-arithmetic code with the two representation packages as a
    set of procedures that each perform an explicit dispatch on type.
- look up
  - Here we will implement the interface as a single procedure that
    looks up the combination of the operation name and argument type
    in the table to find the correct procedure to apply, and then
    applies it to the contents of the argument.

** 2.5 Systems with Generic Operations
- For now
  - For now, we can assume that `put' and `get' are included in our
    language.

- perspective, supplied
  - From the perspective of someone using "numbers," there is a single
    procedure `add' that operates on whatever numbers are supplied.

** 2.5.1 Generic Arithmetic Operations
- 

** 2.5.2 Combining Data of Different Types
- unified, encompasses
  - We have seen how to define a unified arithmetic system that
    encompasses ordinary numbers, complex numbers, rational numbers,
    and any other type of number we might decide to invent, but we
    have ignored an important issue.
- cross
  - What we have not yet considered is the fact that it is meaningful
    to define operations that cross the type boundaries, such as the
    addition of a complex number to an ordinary number.
- violating
  - We would like to introduce the cross-type operations in some
    carefully controlled way, so that we can support them without
    seriously violating our module boundaries.
- cumbersome
  - This technique works, but it is cumbersome.
- undermines
  - The method also undermines our ability to combine separate
    packages additively, or least to limit the extent to which the
    implementors of the individual packages need to take account of
    other packages.
- take account of
  - The method also undermines our ability to combine separate
    packages additively, or least to limit the extent to which the
    implementors of the individual packages need to take account of
    other packages.
- extent
  - The method also undermines our ability to combine separate
    packages additively, or least to limit the extent to which the
    implementors of the individual packages need to take account of
    other packages.
- Formulating, coherent, overwhelming
  - Formulating coherent policies on the division of responsibility
    among packages can be an overwhelming task in designing systems
    with many packages and many cross-type operations.
- Coercion
- hope for the best
  - In the general situation of completely unrelated operations acting
    on completely unrelated types, implementing explicit cross-type
    operations, cumbersome though it may be, is the best that one can
    hope for.
- latent
  - Fortunately, we can usually do better by taking advantage of
    additional structure that may be latent in our type system.
- count on
  - What we are counting on here is the fact that the appropriate
    transformation between types depends only on the types themselves,
    not on the operation to be applied.
- still
  - In order to deal with such complexity and still preserve
    modularity in our programs, it is usually necessary to build
    systems that take advantage of still further structure in the
    relations among types, as we discuss next.
- in turn
  - In such a system, it is quite natural to regard an integer as a
    special kind of rational number, which is in turn a special kind
    of real number, which is in turn a special kind of complex number.
- nevertheless, virtue
  - For instance, if we do not supply a special procedure for finding
    the real part of an integer, we should nevertheless expect that
    `real-part' will be defined for integers by virtue of the fact
    that integers are a subtype of complex numbers.
- crawl
  - We thus crawl up the tower, transforming our argument as we go,
    until we either find a level at which the desired operation can be
    performed or hit the top (in which case we give up).
- arranged
  - If the data types in our system can be naturally arranged in a
    tower, this greatly simplifies the problems of dealing with
    generic operations on different types, as we have seen.
- thorny
  - This multiple-supertypes issue is particularly thorny, since it
    means that there is no unique way to "raise" a type in the
    hierarchy.
- interrelated
  - Dealing with large numbers of interrelated types while still
    preserving modularity in the design of large systems is very
    difficult, and is an area of much current research.
** 2.5.3 Example: Symbolic Algebra
- terms
  - As in other languages, we form abstractions that enable us to
    refer to compound objects in simple terms.
- terms, indeterminate
  - We will define a polynomial to be a sum of terms, each of which is
    either a coefficient, a power of the indeterminate, or a product
    of a coefficient and a power of the indeterminate.
- finesse
  - We can finesse these questions by deciding that in our
    algebraic-manipulation system a "polynomial" will be a particular
    syntactic form, not its underlying mathematical meaning.
- insist
  - Moreover, we will insist that two polynomials to be combined must
    have the same indeterminate.
- confront
  - Finally, we must confront the job of implementing a good
    representation for term lists.
- density
  - One consideration is the "density" of the polynomials we intend to
    manipulate.
- sparse
  - If it has many zero terms it is said to be "sparse".
- efficiently
  - The term lists of dense polynomials are most efficiently
    represented as lists of the coefficients.
- impose
  - One can impose a towerlike structure on this by ordering the
    variables and thus always converting any polynomial to a
    "canonical form" with the highest-priority variable dominant and
    the lower-priority variables buried in the coefficients.
- diverse
  - Much of the complexity of such systems is concerned with
    relationships among diverse types.

** 3.1 Assignment and Local State
- populated
  - We ordinarily view the world as populated by independent objects,
    each of which has a state that changes over time.
- influenced
  - An object is said to "have state" if its behavior is influenced by
    its history.
- deposit, transactions
  - depends upon the history of deposit and withdrawal transactions.
- characterize
  - We can characterize an object's state by one or more "state
    variables", which among them maintain enough information about
    history to determine the object's current behavior.
- compose
  - In a system composed of many objects, the objects are rarely
    completely independent.
- elapsed
  - If we choose to model the flow of time in the system by the
    elapsed time in the computer, then we must have a way to construct
    computational objects whose behaviors change as our programs run.
- specifications
  - Until now, all our procedures could be viewed as specifications
    for computing mathematical functions.
- cause
  - `Withdraw' also uses the `begin' special form to cause two
    expressions to be evaluated in the case where the `if' test is
    true:
- somehow
  - It would be much better if we could somehow make `balance'
    internal to `withdraw', so that `withdraw' would be the only
    procedure that could access `balance' directly and any other
    procedure could access `balance' only indirectly (through calls to
    `withdraw').
- conjunction
  - This is precisely the "message-passing" style of programming that
    we saw in section *Note 2-4-3::, although here we are using it in
    conjunction with the ability to modify local variables.
