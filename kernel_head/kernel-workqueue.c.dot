digraph workqueue_c{
        subgraph cluster___create_workqueue{
                lable="struct workqueue_struct *__create_workqueue(const char *name,int singlethread)";
                kmalloc_wq[label="kmalloc_wq"];
                set_wq_name_name[label="set_wq_name_name"];
                lock_cpu_hotplug[label="lock_cpu_hotplug()"];
                singlethread_not_null[label="singlethread_not_null"];
                INIT_LIST_HEAD_wq_list[label="INIT_LIST_HEAD_wq_list"];
                set_p_create_workqueue_thread_wq_0[label="create_workqueue_thread(wq, 0);"];
                p_null[label="p_null"];
                set_destroy[label="set_destroy"];
                wake_up_process_p[label="wake_up_process_p"];
                get_workqueue_lock[label="get_workqueue_lock"];
                add_workqueues_wq_list[label="add_workqueues_wq_list"];
                unlock_workqueue_lock[label="unlock_workqueue_lock"];
                for_each_online_cpu[label="for_each_online_cpu"];
                set_p_create_workqueue_thread_wq_cpu[label="create_workqueue_thread(wq, cpu);"];
                p_not_null[label="p_not_null"];
                kthread_bind_p_cpu[label="kthread_bind_p_cpu"];
                wake_up_process_p_1[label="wake_up_process_p"];
                set_destroy_1[label="set_destroy"];
                unlock_cpu_hotplug[label="unlock_cpu_hotplug"];
                destroy_not_null[label="destroy_not_null"];
                destroy_workqueue_wq[label="destroy_workqueue(wq)"];
                clear_wq[label="clear_wq"];
        }

        subgraph cluster_destroy__workqueue{
                label="void destroy_workqueue(struct workqueue_struct *wq)";

                flush_workqueue_wq[label="flush_workqueue_wq"];
                lock_cpu_hotplug[label="lock_cpu_hotplug()"];
                is_single_threaded_wq[label="is_single_threaded_wq"];
                cleanup_workqueue_thread_wq_0[label="cleanup_workqueue_thread_wq_0"];
                for_each_online_cpu[label="for_each_online_cpu"];
                cleanup_workqueue_thread_wq_cpu[label="cleanup_workqueue_thread_wq_cpu"];
                get_workqueue_lock[label="get_workqueue_lock"];
                del_wq_list[label="del_wq_list"];
                unlock_workqueue_lock[label="unlock_workqueue_lock"];
                unlock_cpu_hotplug[label="unlock_cpu_hotplug"];
                kfree_wq[label="kfree_wq"];
        }

        subgraph cluster_queue_work{
                label="int queue_work(struct workqueue_struct *wq, struct work_struct *work)";
                test_and_set_bit_0_work_pending_not_null[label="test_and_set_bit_0_work_pending_not_null"];
                is_single_threaded_wq[label="is_single_threaded_wq"];
                set_cpu_0[label="set_cpu_0"];
                __queue_work_wq_cpu_wq_work[label="__queue_work(wq->cpu_wq+cpu, work)"];
                call_put_cpu[label="call_put_cpu"];
        }

        subgraph cluster__queue_work{
                label="static void __queue_work(struct cpu_workqueue_struct *cwq,struct work_struct *work)";
                spin_lock_irqsave_cwq_lock[label="spin_lock_irqsave_cwq_lock"];
                set_work_wq_data_cwq[label="set_work_wq_data_cwq"];
                list_add_tail_work_entry_cwq_worklist[label="list_add_tail_work_entry_cwq_worklist"];
                inc_cwq_insert_sequeuece[label="inc_cwq_insert_sequeuece"];
                wake_up_cwq_more_work[label="wake_up_cwq_more_work"];
                spin_unlick_irqrestore_cwq_lock[label="spin_unlick_irqrestore_cwq_lock"];
        }

        subgraph cluster_queue_delayed_work{
                label="int fastcall queue_delayed_work(struct workqueue_struct *wq,struct work_struct *work, unsigned long delay)";

                test_and_set_bit_work_pending[label="test_and_set_bit_work_pending"];
                set_work_wq_data_wq[label="set_work_wq_data_wq"];
                set_timer_expires_jiffies+delay[label="set_timer_expires_jiffies+delay"];
                set_timer_data_work[label="set_timer_data_work"];
                set_timer_funcion_delayed_work_timer_fn[label="set_timer_funcion_delayed_work_timer_fn"];
                add_timer[label="add_timer()"];
        }

        subgraph cluster_worker_thread{
                label="int worker_thread(void *__cwq)";

                DECLARE_WAITQUEUE_wait_current[label="DECLARE_WAITQUEUE_wait_current"];
                clear_current_flags_PF_NOFREEZE[label="clear_current_flags_PF_NOFREEZE"];
                set_user_nice_current_neg_5[label="set_user_nice_current_neg_5"];
                sigfillset_blocked[label="sigfillset_blocked"];
                sigprocmask_SIG_BLOCK_blocked[label="	sigprocmask(SIG_BLOCK, &blocked, NULL);"];
                flush_signals_current[label="flush_signals_current"];
                set_sa_sa_sa_handler_SIG_IGN[label="set_sa_sa_sa_handler_SIG_IGN"];
                clear_sa_sa_sa_flags[label="clear_sa_sa_sa_flags"];
                siginiteset_sa_sa_sa_mask_sigmask_SIGCHLD[label="siginiteset_sa_sa_sa_mask_sigmask_SIGCHLD"];
                do_sigaction_SIGCHLD_sa_0[label="do_sigaction_SIGCHLD_sa_0"];
                set_current_state_TASK_INTERRUPTIBLE[label="set_current_state_TASK_INTERRUPTIBLE"];
                kthread_should_stop[label="kthread_should_stop"];
                add_wait_queue_cwq_more_work_wait[label="add_wait_queue_cwq_more_work_wait"];
                list_empty_cwq_worklist[label="list_empty_cwq_worklist"];
                schedule[label="schedule()"];
                __set_current_state_TASK_RUNNING[label="__set_current_state_TASK_RUNNING"];
                remove_wait_queue_cwq_more_work_wait[label="remove_wait_queue_cwq_more_work_wait"];
                list_empty_cwq_worklist[label="list_empty_cwq_worklist"];
                run_workqueue_cwq[label="run_workqueue(cwq)"];
                set_current_state_TASK_INTERRUPTIBLE[label="set_current_state_TASK_INTERRUPTIBLE"];
                __set_current_state_TASK_RUNNING_1[label="__set_current_state_TASK_RUNNING"];
                
                }
}
