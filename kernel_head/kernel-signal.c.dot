digraph signal_c{
        subgraph cluster_sys_kill{
                label="asmlinkage long sys_kill(int pid, int sig)";
                set_info_si_signo_sig[label="set_info_si_signo_sig"];
                set_info_si_errno_0[label="set_info_si_errno_0"];
                set_info_si_code_SI_USER[label="set_info_si_code_SI_USER"];
                set_info_si_pid_current_tgid[label="set_info_si_pid_current_tgid"];
                set_info_si_uid_current_uid[label="set_info_si_uid_current_uid"];
                return_kill_something_info_sig_info_pid[label="return_kill_something_info_sig_info_pid"];

		set_info_si_signo_sig -> set_info_si_errno_0;
		set_info_si_errno_0 -> set_info_si_code_SI_USER;
		set_info_si_code_SI_USER -> set_info_si_pid_current_tgid;
		set_info_si_pid_current_tgid -> set_info_si_uid_current_uid;
		set_info_si_uid_current_uid -> return_kill_something_info_sig_info_pid;
        }

        subgraph cluster_kill_something_info{
                label="static int kill_something_info(int sig, struct siginfo *info, int pid)";
                pid_null[label="pid_null"];
                return_kill_pg_info_sig_info_process_group_current[label="return_kill_pg_info_sig_info_process_group_current"];
                pid_eq_neg_1[label="pid_eq_neg_1"];
                read_lock_tasklist_lock[label="read_lock_tasklist_lock"];
                for_each_process_p[label="for_each_process_p"];
                p_pid_great_1_and_p_tgid_not_eq_current_tgid[label="p_pid_great_1_and_p_tgid_not_eq_current_tgid"];
                set_err_group_send_sig_info_sig_info_p[label="set_err_group_send_sig_info_sig_info_p"];
                inc_count[label="inc_count"];
                err_not_eq_EPERM[label="err_not_eq_EPERM"];
                set_retval_err[label="set_retval_err"];
                read_unlock_tasklist_lock[label="read_unlock_tasklist_lock"];
                return_retval_or_ESPCH_decided_count[label="return_retval_or_ESPCH_decided_count"];
                pid_small_0[label="pid_small_0"];
                return_kill_pg_info_sig_info_neg_pid[label="return_kill_pg_info_sig_info_neg_pid"];
                return_kill_proc_info_sig_info_pid[label="return_kill_proc_info_sig_info_pid"];

		pid_null -> return_kill_pg_info_sig_info_process_group_current;
		pid_null -> pid_eq_neg_1;
		pid_eq_neg_1 -> read_lock_tasklist_lock;
		read_lock_tasklist_lock -> for_each_process_p;
		for_each_process_p -> p_pid_great_1_and_p_tgid_not_eq_current_tgid;
		for_each_process_p -> read_unlock_tasklist_lock;
		p_pid_great_1_and_p_tgid_not_eq_current_tgid -> set_err_group_send_sig_info_sig_info_p;
		p_pid_great_1_and_p_tgid_not_eq_current_tgid -> for_each_process_p;
		set_err_group_send_sig_info_sig_info_p -> inc_count;
		inc_count -> err_not_eq_EPERM;
		err_not_eq_EPERM -> set_retval_err;
		err_not_eq_EPERM -> for_each_process_p;
		set_retval_err -> read_unlock_tasklist_lock;
		return_retval_or_ESPCH_decided_count;
		pid_eq_neg_1 -> pid_small_0;
		pid_small_0 -> return_kill_pg_info_sig_info_neg_pid;
		pid_small_0 -> return_kill_proc_info_sig_info_pid;
        }

        subgraph cluster_kill_pg_info{
                label="int kill_pg_info(int sig, struct siginfo *info, pid_t pgrp)";
                read_lock_tasklist_lock[label="read_lock_tasklist_lock"];
                set_retval___kill_pg_info_sig_info_pgrp[label="set_retval-__kill_pg_info_sig_info_pgrp"];
                read_unlock_tasklist_lock[label="read_unlock_tasklist_lock"];
                return_retval[label="return_retval"];

		read_lock_tasklist_lock -> set_retval___kill_pg_info_sig_info_pgrp;
		set_retval___kill_pg_info_sig_info_pgrp -> read_unlock_tasklist_lock;
		read_unlock_tasklist_lock -> return_retval;
        }

        subgraph cluster___kill_pg_info{
                label="int __kill_pg_info(int sig, struct siginfo *info, pid_t pgrp)";
                pgrp_not_great_0[label="pgrp_not_great_0"];
                return_EINVAL[label="return_EINVAL"];
                set_success_0[label="set_success_0"];
                set_retval_ESPCH[label="set_retval_ESPCH"];
                do_each_task_pid_pgrp_PIDTYPE_PGID_p[label="do_each_task_pid_pgrp_PIDTYPE_PGID_p"];
                set_err_group_send_sig_info_sig_info_p[label="set_err_group_send_sig_info_sig_info_p"];
                success_self_set_rever_err[label="success_self_set_rever_err"];
                set_retval_err[label="set_retval_err"];
                while_each_task_pid_pgrp_PIDTYPE_PGID_p[label="while_each_task_pid_pgrp_PIDTYPE_PGID_p"];
                return_0_or_retval_decided_success[label="return_0_or_retval_decided_success"];

		pgrp_not_great_0 -> return_EINVAL;
		pgrp_not_great_0 -> set_success_0;
		set_success_0 -> set_retval_ESPCH;
		do_each_task_pid_pgrp_PIDTYPE_PGID_p -> set_err_group_send_sig_info_sig_info_p;
		set_err_group_send_sig_info_sig_info_p -> success_self_set_rever_err;
		success_self_set_rever_err -> set_retval_err;
		set_retval_err -> while_each_task_pid_pgrp_PIDTYPE_PGID_p;
		while_each_task_pid_pgrp_PIDTYPE_PGID_p -> return_0_or_retval_decided_success;
        }

        subgraph cluster_kill_proc_info{
                label="int kill_proc_info(int sig, struct siginfo *info, pid_t pid)";
                read_lock_tasklist_lock[label="read_lock_tasklist_lock"];
                set_p_find_task_by_pid_pid[label="set_p_find_task_by_pid_pid"];
                set_error_ESPCH[label="set_error_ESPCH"];
                p_not_null[label="p_not_null"];
                set_error_group_send_sig_info_sig_info_p[label="set_error_group_send_sig_info_sig_info_p"];
                read_unlock_tasklist_lock[label="read_unlock_tasklist_lock"];
                return_error[label="return_error"];

		read_lock_tasklist_lock -> set_p_find_task_by_pid_pid;
		set_p_find_task_by_pid_pid -> set_error_ESRCH;
		set_error_ESRCH -> p_not_null;
		p_not_null -> set_error_group_send_sig_info_sig_info_p;
		set_error_group_send_sig_info_sig_info_p -> read_unlock_tasklist_lock;
		p_not_null -> read_unlock_tasklist_lock;
        }

        subgraph cluster_group_send_sig_info{
                label="int group_send_sig_info(int sig, struct siginfo *info, struct task_struct *p)";
                set_ret_check_kill_permission_sig_info_p[label="set_ret_check_kill_permission_sig_info_p"];
                ret_null_and_sig_not_null_and_p_sighand_not_null[label="ret_null_and_sig_not_null_and_p_sighand_not_null"];
                lock_p_sighand_siglock[label="lock_p_sighand_siglock"];
                set_ret___group_send_sig_info_sig_info_p[label="set_ret___group_send_sig_info_sig_info_p"];
                unlock_p_sighand_siglock[label="unlock_p_sighand_siglock"];
                return_ret[label="return_ret"];

		set_ret_check_kill_permission_sig_info_p -> ret_null_and_sig_not_null_and_p_sighand_not_null;
		ret_null_and_sig_not_null_and_p_sighand_not_null -> lock_p_sighand_siglock;
		lock_p_sighand_siglock -> set_ret___group_send_sig_info_sig_info_p;
		set_ret___group_send_sig_info_sig_info_p -> unlock_p_sighand_siglock;
		unlock_p_sighand_siglock -> return_ret;
		ret_null_and_sig_not_null_and_p_sighand_not_null -> return_ret;
        }

	subgraph cluster_sig_ignored{
		label="static int sig_ignored(struct task_struct *t, int sig)";
		t_ptrace_PT_PTRACE_set[label="t_ptrace_PT_PTRACE_set"];
		return_0[label="return_0"];
		sigismember_t_blocked_sig[label="sigismember_t_blocked_sig"];
		return_0[label="return_0"];
		set_handler_t_sighand_action_sig_sub_1_sa_sa_handler[label="set_handler_t_sighand_action_sig_sub_1_sa_sa_handler"];
		return_handler_eq_SIG_IGN_or_handler_eq_SIG_DEF_and_sig_kernel_ignore_sig[label="return_handler_eq_SIG_IGN_or_handler_eq_SIG_DEF_and_sig_kernel_ignore_sig"];
		
		t_ptrace_PT_PTRACE_set -> return_0;
		t_ptrace_PT_PTRACE_set -> sigismember_t_blocked_sig;
		sigismember_t_blocked_sig -> return_0;
		sigismember_t_blocked_sig -> set_handler_t_sighand_action_sig_sub_1_sa_sa_handler;
		set_handler_t_sighand_action_sig_sub_1_sa_sa_handler -> return_handler_eq_SIG_IGN_or_handler_eq_SIG_DEF_and_sig_kernel_ignore_sig;
	}
	
        subgraph cluster___group_send_sig_info{
                label="int __group_send_sig_info(int sig, struct siginfo *info, struct task_struct *p)";
                assert_spin_locked_p_sighand_siglock[label="assert_spin_locked_p_sighand_siglock"];
                handle_stop_signal_sig_p[label="handle_stop_signal_sig_p"];
                info_great_2_and_info_si_code_eq_SI_TIMER[label="info_great_2_and_info_si_code_eq_SI_TIMER"];
                set_ret_info_si_sys_private[label="set_ret_info_si_sys_private"];
                sig_ignored_p_sig[label="sig_ignored_p_sig"];
                return_ret[label="return_ret"];
                LEGACY_QUEUE_p_signal_shared_pending_sig[label="LEGACY_QUEUE_p_signal_shared_pending_sig"];
                return_ret[label="return_ret"];
                set_ret_send_signal_sig_info_p_p_signal_shared_pending[label="set_ret_send_signal_sig_info_p_p_signal_shared_pending"];
                ret_not_null[label="ret_not_null"];
                return_ret[label="return_ret"];
                __group_complete_signal_sig_p[label="__group_complete_signal_sig_p"];

		assert_spin_locked_p_sighand_siglock -> handle_stop_signal_sig_p;
		handle_stop_signal_sig_p -> info_great_2_and_info_si_code_eq_SI_TIMER;
		info_great_2_and_info_si_code_eq_SI_TIMER -> set_ret_info_si_sys_private;
		set_ret_info_si_sys_private -> sig_ignored_p_sig;
		info_great_2_and_info_si_code_eq_SI_TIMER -> sig_ignored_p_sig;
		sig_ignored_p_sig -> return_ret;
		sig_ignored_p_sig -> LEGACY_QUEUE_p_signal_shared_pending_sig;
		LEGACY_QUEUE_p_signal_shared_pending_sig -> return_ret;
		LEGACY_QUEUE_p_signal_shared_pending_sig -> set_ret_send_signal_sig_info_p_p_signal_shared_pending;
		set_ret_send_signal_sig_info_p_p_signal_shared_pending -> ret_not_null;
		ret_not_null -> return_ret;
		ret_not_null -> __group_complete_signal_sig_p;
		__group_complete_signal_sig_p -> return_0;
        }

        subgraph cluster_send_signal{
                label="static int send_signal(int sig, struct siginfo *info, struct task_struct *t,struct sigpending *signals)";
                set_q_null[label="set_q_null"];
                info_eq_2[label="info_eq_2"];
                set_q___sigqueue_alloc_t_GFP_ATOMIC_sig_small_SIGRTMIN_and_info_small_2_or_info_si_code_not_small_0[label="set_q___sigqueue_alloc_t_GFP_ATOMIC_sig_small_SIGRTMIN_and_info_small_2_or_info_si_code_not_small_0"];
                q_not_null[label="q_not_null"];
                list_add_tail_q_list_signals_list[label="list_add_tail_q_list_signals_list"];
                switch_info[label="switch_info"];
                case_0[label="case_0"];
                set_q_info_si_signo_sig[label="set_q_info_si_signo_sig"];
                set_q_info_si_errno_0[label="set_q_info_si_errno_0"];
                set_q_info_si_code_SI_USER[label="set_q_info_si_code_SI_USER"];
                set_q_info_si_pid_current_pid[label="set_q_info_si_pid_current_pid"];
                set_q_info_si_uid_current_uid[label="set_q_info_si_uid_current_uid"];
                case_1[label="case_1"];
                set_q_info_si_signo_sig[label="set_q_info_si_signo_sig"];
                set_q_info_si_errno_0[label="set_q_info_si_errno_0"];
                set_q_info_si_code_SI_KERNEL[label="set_q_info_si_code_SI_KERNEL"];
                set_q_info_si_pid_0[label="set_q_info_si_pid_0"];
                set_q_info_si_uid_0[label="set_q_info_si_uid_0"];
                default_[label="default_"];
                copy_siginfo_q_info_info[label="copy_siginfo_q_info_info"];
                sig_not_small_SIGRTMIN_and_info_not_null_and_info_not_eq_1_and_info_si_code_not_eq_SI_USER[label="sig_not_small_SIGRTMIN_and_info_not_null_and_info_not_eq_1_and_info_si_code_not_eq_SI_USER"];
                return_EAGAIN[label="return_EAGAIN"];
                info_great_1_and_info_si_code_SI_TIMER[label="info_great_1_and_info_si_code_SI_TIMER"];
                set_ret_info_si_sys_private[label="set_ret_info_si_sys_private"];
                sigaddset_signals_signal_sig[label="sigaddset_signals_signal_sig"];
		return_ret[label="return_ret"];
		
		info_eq_2 -> sigaddset_signals_signal_sig;
		info_eq_2 -> set_q___sigqueue_alloc_t_GFP_ATOMIC_sig_small_SIGRTMIN_and_info_small_2_or_info_si_code_not_small_0;
		set_q___sigqueue_alloc_t_GFP_ATOMIC_sig_small_SIGRTMIN_and_info_small_2_or_info_si_code_not_small_0 -> q_not_null;
		q_not_null -> list_add_tail_q_list_signals_list;
		list_add_tail_q_list_signals_list -> switch_info;
		switch_info -> case_0;
		case_0 -> set_q_info_si_signo_sig;
		set_q_info_si_signo_sig -> set_q_info_si_errno_0;
		set_q_info_si_errno_0 -> set_q_info_si_code_SI_USER;
		set_q_info_si_code_SI_USER -> set_q_info_si_pid_current_pid;
		set_q_info_si_pid_current_pid -> set_q_info_si_uid_current_uid;
		switch_info -> case_1;
		case_1 -> set_q_info_si_signo_sig;
		set_q_info_si_signo_sig -> set_q_info_si_code_SI_KERNEL;
		set_q_info_si_code_SI_KERNEL -> set_q_info_si_pid_0;
		set_q_info_si_pid_0 -> set_q_info_si_uid_0;
		switch_info -> default_;
		default_ -> copy_siginfo_q_info_info;
		set_q_info_si_uid_current_uid -> sigaddset_signals_signal_sig;
		set_q_info_si_uid_0 -> sigaddset_signals_signal_sig;
		q_not_null -> sig_not_small_SIGRTMIN_and_info_not_null_and_info_not_eq_1_and_info_si_code_not_eq_SI_USER;
		sig_not_small_SIGRTMIN_and_info_not_null_and_info_not_eq_1_and_info_si_code_not_eq_SI_USER -> return_EAGAIN;
		sig_not_small_SIGRTMIN_and_info_not_null_and_info_not_eq_1_and_info_si_code_not_eq_SI_USER -> info_great_1_and_info_si_code_SI_TIMER;
		info_great_1_and_info_si_code_SI_TIMER -> set_ret_info_si_sys_private;
		info_great_1_and_info_si_code_SI_TIMER -> sigaddset_signals_signal_sig;
		sigaddset_signals_signal_sig -> return_ret;
        }

        subgraph cluster___group_complete_signal{
                label="static void __group_complete_signal(int sig, struct task_struct *p)";
                set_mask_TASK_STOPPED_and_TASK_TRACED[label="set_mask_TASK_STOPPED_and_TASK_TRACED"];
                sig_eq_SIGKILL[label="sig_eq_SIGKILL"];
                set_mask_0[label="set_mask_0"];
                wants_signal_sig_p_mask[label="wants_signal_sig_p_mask"];
                set_t_p[label="set_t_p"];
                thread_group_empty_p[label="thread_group_empty_p"];
                return[label="return"];
                set_t_p_signal_curr_target[label="set_t_p_signal_curr_target"];
                t_null[label="t_null"];
                set_t_p_signal_current_target_p[label="set_t_p_signal_current_target_p"];
                wants_signal_sig_t_mask[label="wants_signal_sig_t_mask"];
                set_t_next_thread_t[label="set_t_next_thread_t"];
                t_eq_p_signal_curr_target[label="t_eq_p_signal_curr_target"];
                return[label="return"];
                set_p_signal_curr_target_t[label="set_p_signal_curr_target_t"];
                sig_fatal_p_sig_and_p_signal_flags_not_set_SIGNAL_GROUP_EXIT_and_sigismember_t_real_blocked_sig_not_true_and_sig_eq_SIGKILL_or_t_ptrace_not_ste_PT_PTRACED[label="sig_fatal_p_sig_and_p_signal_flags_not_set_SIGNAL_GROUP_EXIT_and_sigismember_t_real_blocked_sig_not_true_and_sig_eq_SIGKILL_or_t_ptrace_not_ste_PT_PTRACED"];
                sig_kernel_coredump_sig_false[label="sig_kernel_coredump_sig_false"];
                set_p_signal_flags_SIGNAL_GROUP_EXIT[label="set_p_signal_flags_SIGNAL_GROUP_EXIT"];
                set_p_signal_group_exit_code_sig[label="set_p_signal_group_exit_code_sig"];
                set_p_signal_group_stop_count_0[label="set_p_signal_group_stop_count_0"];
                set_t_p[label="set_t_p"];
                sigaddset_t_pending_signal_SIGKILL[label="sigaddset_t_pending_signal_SIGKILL"];
                signal_wake_up_t_1[label="signal_wake_up_t_1"];
                set_t_next_thread_t[label="set_t_next_thread_t"];
                t_not_eq_p[label="t_not_eq_p"];
                return[label="return"];
                rm_from_queue_SIG_KERNEL_STOP_MASK_t_pending[label="rm_from_queue_SIG_KERNEL_STOP_MASK_t_pending"];
                rm_from_queue_SIG_KERNEL_STOP_MASK_p_signal_shared_pending[label="rm_from_queue_SIG_KERNEL_STOP_MASK_p_signal_shared_pending"];
                set_p_signal_group_stop_count_0[label="set_p_signal_group_stop_count_0"];
                set_p_signal_group_exit_task_t[label="set_p_signal_group_exit_task_t"];
                set_t_p[label="set_t_p"];
                inc_p_signal_group_stop_count[label="inc_p_signal_group_stop_count"];
                signal_wake_up_t_0[label="signal_wake_up_t_0"];
                set_t_next_thread_t[label="set_t_next_thread_t"];
                t_not_eq_p[label="t_not_eq_p"];
                wake_up_process_p_signal_group_exit_task[label="wake_up_process_p_signal_group_exit_task"];
                return[label="return"];
                signal_wake_up_t_sig_eq_SIGKILL[label="signal_wake_up_t_sig_eq_SIGKILL"];

                set_mask_TASK_STOPPED_and_TASK_TRACED -> sig_eq_SIGKILL;
		sig_eq_SIGKILL -> set_mask_0;
		set_mask_0 -> wants_signal_sig_p_mask;
		sig_eq_SIGKILL -> wants_signal_sig_p_mask;
		wants_signal_sig_p_mask -> set_t_p;
		wants_signal_sig_p_mask -> thread_group_empty_p;
		thread_group_empty_p -> return;
		thread_group_empty_p -> set_t_p_signal_curr_target;
		set_t_p_signal_curr_target -> t_null;
		t_null -> set_t_p_signal_current_target_p;
		set_t_p_signal_current_target_p -> wants_signal_sig_t_mask;
		wants_signal_sig_t_mask -> set_t_next_thread_t;
		set_t_next_thread_t -> t_eq_p_signal_curr_target;
		t_eq_p_signal_curr_target -> return;
		t_eq_p_signal_curr_target -> wants_signal_sig_t_mask;
		wants_signal_sig_t_mask -> set_p_signal_curr_target_t;
		t_null -> wants_signal_sig_t_mask;
		set_p_signal_curr_target_t -> sig_fatal_p_sig_and_p_signal_flags_not_set_SIGNAL_GROUP_EXIT_and_sigismember_t_real_blocked_sig_not_true_and_sig_eq_SIGKILL_or_t_ptrace_not_ste_PT_PTRACED;
		set_t_p -> sig_fatal_p_sig_and_p_signal_flags_not_set_SIGNAL_GROUP_EXIT_and_sigismember_t_real_blocked_sig_not_true_and_sig_eq_SIGKILL_or_t_ptrace_not_ste_PT_PTRACED;
		sig_fatal_p_sig_and_p_signal_flags_not_set_SIGNAL_GROUP_EXIT_and_sigismember_t_real_blocked_sig_not_true_and_sig_eq_SIGKILL_or_t_ptrace_not_ste_PT_PTRACED -> sig_kernel_coredump_sig_false;
		sig_kernel_coredump_sig_false -> set_p_signal_flags_SIGNAL_GROUP_EXIT;
		set_p_signal_flags_SIGNAL_GROUP_EXIT -> set_p_signal_group_exit_code_sig;
		set_p_signal_group_exit_code_sig -> set_p_signal_group_stop_count_0;
		set_p_signal_group_stop_count_0 -> set_t_p;
		set_t_p -> sigaddset_t_pending_signal_SIGKILL;
		sigaddset_t_pending_signal_SIGKILL -> signal_wake_up_t_1;
		signal_wake_up_t_1 -> set_t_next_thread_t;
		set_t_next_thread_t -> t_not_eq_p;
		t_not_eq_p -> return;
		return -> rm_from_queue_SIG_KERNEL_STOP_MASK_t_pending;
		sig_fatal_p_sig_and_p_signal_flags_not_set_SIGNAL_GROUP_EXIT_and_sigismember_t_real_blocked_sig_not_true_and_sig_eq_SIGKILL_or_t_ptrace_not_ste_PT_PTRACED -> rm_from_queue_SIG_KERNEL_STOP_MASK_t_pending;
		sig_kernel_coredump_sig_false -> rm_from_queue_SIG_KERNEL_STOP_MASK_t_pending;
		rm_from_queue_SIG_KERNEL_STOP_MASK_t_pending -> rm_from_queue_SIG_KERNEL_STOP_MASK_p_signal_shared_pending;
		rm_from_queue_SIG_KERNEL_STOP_MASK_p_signal_shared_pending -> set_p_signal_group_stop_count_0;
		set_p_signal_group_stop_count_0 -> set_p_signal_group_exit_task_t;
		set_p_signal_group_exit_task_t -> set_t_p;
		set_t_p -> inc_p_signal_group_stop_count;
		inc_p_signal_group_stop_count -> signal_wake_up_t_0;
		signal_wake_up_t_0 -> set_t_next_thread_t;
		set_t_next_thread_t -> t_not_eq_p;
		t_not_eq_p -> wake_up_process_p_signal_group_exit_task;
		t_not_eq_p -> inc_p_signal_group_stop_count;
		wake_up_process_p_signal_group_exit_task -> return;
		sig_fatal_p_sig_and_p_signal_flags_not_set_SIGNAL_GROUP_EXIT_and_sigismember_t_real_blocked_sig_not_true_and_sig_eq_SIGKILL_or_t_ptrace_not_ste_PT_PTRACED -> signal_wake_up_t_sig_eq_SIGKILL;
		signal_wake_up_t_sig_eq_SIGKILL -> return;
        }

        subgraph cluster_wants_signal{
                label="#define wants_signal(sig, p, mask)";

                sigismember_p_blocked_sig_null_and_p_state_and_mask_not_null_and_p_flags_PF_EXITING_not_null_and_task_curr_p_or_signal_pending_p_not_null[label="sigismember_p_blocked_sig_null_and_p_state_and_mask_not_null_and_p_flags_PF_EXITING_not_null_and_task_curr_p_or_signal_pending_p_not_null"];
        }

        subgraph cluster_signal_wake_up{
                label="void signal_wake_up(struct task_struct *t, int resume)";
                set_tsk_thread_flags_t_TIF_SIGPENDING[label="set_tsk_thread_flags_t_TIF_SIGPENDING"];
                set_mask_TASK_INTERRUPTIBLE[label="set_mask_TASK_INTERRUPTIBLE"];
                resume_not_null[label="resume_not_null"];
                mask_self_set_TASK_STOPPED_TASK_TRACED[label="mask_self_set_TASK_STOPPED_TASK_TRACED"];
                wake_up_state_t_mask_null[label="wake_up_state_t_mask_null"];
                kick_process_t[label="kick_process_t"];

				set_tsk_thread_flag_t_TIF_SIGPENDING -> set_mask_TASK_INTERRUPTIBLE;
				set_mask_TASK_INTERRUPTIBLE -> resume_not_null;
				resume_not_null -> mask_self_set_TASK_STOPPED_TASK_TRACED;
				resume_not_null -> wake_up_state_t_mask;
				mask_self_set_TASK_STOPPED_TASK_TRACED -> wake_up_state_t_mask;
				wake_up_state_t_mask -> kick_process_t;
        }

        subgraph cluster_sys_tgkill{
                label="asmlinkage long sys_tgkill(int tgid, int pid, int sig)";
                pid_not_great_0_or_tgid_not_great_0[label="pid_not_great_0_or_tgid_not_great_0"];
                return_EINVAL[label="return_EINVAL"];
                set_info_si_signo_sig[label="set_info_si_signo_sig"];
                set_info_si_errno_0[label="set_info_si_errno_0"];
                info_si_code_SI_TKILL[label="info_si_code_SI_TKILL"];
                set_si_pid_current_tgid[label="sest_si_pid_current_tgid"];
                info_si_uid_current_uid[label="info_si_uid_current_uid"];
                read_lock_tasklist_lock[label="read_lock_tasklist_lock"];
                set_p_find_task_by_pid_pid[label="set_p_find_task_by_pid_pid"];
                set_erro_ESRCH[label="set_erro_ESRCH"];
                p_not_null_and_p_tgid_eq_tgid[label="p_not_null_and_p_tgid_eq_tgid"];
                set_error_check_kill_permission_sig_info_p[label="set_error_check_kill_permission_sig_info_p"];
                error_null_and_sig_not_null_and_p_sighand[label="error_null_and_sig_not_null_and_p_sighand"];
                lock_p_sighand_siglock[label="lock_p_sighand_siglock"];
                handle_stop_signal_sig_p[label="handle_stop_signal_sig_p"];
                set_error_specific_send_sig_info_sig_info_p[label="set_error_specific_send_sig_info_sig_info_p"];
                unlock_p_sighand_siglock[label="unlock_p_sighand_siglock"];
                read_unlock_tasklist_lock[label="read_unlock_tasklist_lock"];
                return_error[label="return_error"];

				pid_not_great_0_or_tgid_not_great_0 -> return_EINVAL;
				return_EINVAL -> set_info_si_signo_sig;
				pid_not_great_0_or_tgid_not_great_0 -> set_info_si_signo_sig;
				set_info_si_signo_sig -> set_info_si_errno_0;
				set_info_si_errno_0 -> set_info_si_code_SI_TKILL;
				set_info_si_code_SI_TKILL -> set_info_si_pid_current_tgid;
				set_info_si_pid_current_tgid -> set_info_si_uid_current_uid;
				set_info_si_uid_current_uid -> read_lock_tasklist_lock;
				read_lock_tasklist_lock -> set_p_find_task_by_pid_pid;
				set_p_find_task_by_pid_pid -> set_error_ESPCH;
				set_error_ESPCH -> p_not_null_and_p_tgid_eq_tgid;
				p_not_null_and_p_tgid_eq_tgid -> set_error_check_kill_permission_sig_info_p;
				set_error_check_kill_permission_sig_info_p -> error_null_and_sig_not_null_and_p_sighand_not_null;
				error_null_and_sig_not_null_and_p_sighand_not_null -> lock_p_sighand_siglock;
				lock_p_sighand_siglock -> handle_stop_signal_sig_p;
				handle_stop_signal_sig_p -> set_error_specific_send_sig_info_sig_info_p;
				set_error_specific_send_sig_info_sig_info_p -> unlock_p_sighand_siglock;
				p_not_null_and_p_tgid_eq_tgid -> unlock_tasklist_lock;
				error_null_and_sig_not_null_and_p_sighand_not_null -> unlock_tasklist_lock;
				unlock_tasklist_lock -> return_error;
        }

        subgraph cluster_handle_stop_signal{
                label="static void handle_stop_signal(int sig, struct task_struct *p)";
                p_flags_SIGNAL_GROUP_EXIT_set[label="p_flags_SIGNAL_GROUP_EXIT_set"];
                return[label="return"];
                sig_kernel_stop_sig_true[label="sig_kernel_stop_sig_true"];
                rm_from_queue_sigmask_SIGCONT_p_signal_shared_pending[label="rm_from_queue_sigmask_SIGCONT_p_signal_shared_pending"];
                set_t_p[label="set_t_p"];
                rm_from_queue_sigmask_SIGCONT_t_pending[label="rm_from_queue_sigmask_SIGCONT_t_pending"];
                set_t_next_thread_t[label="set_t_next_thread_t"];
                t_not_eq_p[label="t_not_eq_p"];
                sig_eq_SIGCONT[label="sig_eq_SIGCONT"];
                p_signal_group_stop_count_great_0[label="p_signal_group_stop_count_great_0"];
                set_p_signal_group_stop_count_0[label="set_p_signal_group_stop_count_0"];
                set_p_signal_flags_SIGNAL_STOP_CONTINUED[label="set_p_signal_flags_SIGNAL_STOP_CONTINUED"];
                unlock_p_sighand_siglock[label="unlock_p_sighand_siglock"];
                do_notify_parent_cldstop_p_p_parent_CLD_STOPPED[label="do_notify_parent_cldstop_p_p_parent_CLD_STOPPED"];
                do_notify_parent_cldstop_p_group_leader_p_group_leader_real_parent_CLD_STOPPED[label="do_notify_parent_cldstop_p_group_leader_p_group_leader_real_parent_CLD_STOPPED"];
                lock_p_sighand_siglock[label="lock_p_sighand_siglock"];
                rm_from_queue_SIG_KERNEL_STOP_MASK_p_signal_shared_pending[label="rm_from_queue_SIG_KERNEL_STOP_MASK_p_signal_shared_pending"];
                set_t_p[label="set_t_p"];
                rm_from_queue_SIG_KERNEL_STOP_MASK_t_pending[label="rm_from_queue_SIG_KERNEL_STOP_MASK_t_pending"];
                set_state_TASK_STOPPED[label="set_state_TASK_STOPPED"];
                sig_user_defined_t_SIGCONT_and_sigismember_t_blocked_SIGCONT_false[label="sig_user_defined_t_SIGCONT_and_sigismember_t_blocked_SIGCONT_false"];
                set_tsk_tread_flag_t_TIF_SIGPENDING[label="set_tsk_tread_flag_t_TIF_SIGPENDING"];
                state_self_set_TASK_INTERRUPTIBLE[label="state_self_set_TASK_INTERRUPTIBLE"];
                wake_up_state_t_state[label="wake_up_state_t_state"];
                set_t_next_thread_t[label="set_t_next_thread_t"];
                t_not_eq_p[label="t_not_eq_p"];
                p_signal_flags_SIGNAL_STOP_STOPPED_set[label="p_signal_flags_SIGNAL_STOP_STOPPED_set"];
                set_p_signal_flgas_SIGNAL_STOP_CONTINUED[label="set_p_signal_flgas_SIGNAL_STOP_CONTINUED"];
                set_p_signal_group_exit_code_0[label="set_p_signal_group_exit_code_0"];
                unlock_p_sighand_siglock[label="unlock_p_sighand_siglock"];
                p_ptrace_PT_PTRACED_set[label="p_ptrace_PT_PTRACED_set"];
                do_notify_parent_cldstop_p_p_parent_CLD_CONTINUED[label="do_notify_parent_cldstop_p_p_parent_CLD_CONTINUED"];
                do_notify_parent_cldstop_p_group_leader_p_group_leader_real_parent_CLLD_CONTINUED[label="do_notify_parent_cldstop_p_group_leader_p_group_leader_real_parent_CLLD_CONTINUED"];
                lock_p_sighand_siglock[label="lock_p_sighand_siglock"];
                set_p_signal_flags_0[label="set_p_signal_flags_0"];
                sig_eq_SIGKILL[label="sig_eq_SIGKILL"];
                set_p_signal_flags_0[label="set_p_signal_flags_0"];

				p_flags_SIGNAL_GROUP_EXIT_set -> return;
				p_flags_SIGNAL_GROUP_EXIT_set -> sig_kernel_stop_sig_true;
				sig_kernel_stop_sig_true -> rm_from_queue_sigmask_SIGCONT_p_signal_shared_pending
				rm_from_queue_sigmask_SIGCONT_p_signal_shared_pending -> set_t_p;
				set_t_p -> rm_from_queue_sigmask_SIGCONT_t_pending;
				rm_from_queue_sigmask_SIGCONT_t_pending -> set_t_next_thread_t;
				set_t_next_thread_t -> t_not_eq_p;
				sig_kernel_stop_sig_true -> sig_eq_SIGCONT;
				sig_eq_SIGCONT -> p_signal_group_stop_count_great_0;
				p_signal_group_stop_count_great_0 -> set_p_signal_group_stop_count_0;
				set_p_signal_group_stop_count_0 -> set_p_signal_flags_SIGNAL_STOP_CONTINUED;
				set_p_signal_flags_SIGNAL_STOP_CONTINUED -> unlock_p_sighand_siglock;
				unlock_p_sighand_siglock -> p_ptrace_PT_PTRACED_set;
				p_ptrace_PT_PTRACED_set -> do_notify_parent_cldstop_p_p_parent_CLD_STOPPED;
				p_ptrace_PT_PTRACED_set -> do_notify_parent_cldstop_p_group_leader_p_group_leader_real_parent_CLD_STOPPED;
				do_notify_parent_cldstop_p_p_parent_CLD_STOPPED -> lock_p_sighand_siglock;
				do_notify_parent_cldstop_p_group_leader_p_group_leader_real_parent_CLD_STOPPED -> lock_p_sighand_siglock;
				p_signal_group_stop_count_great_0 -> rm_from_queue_SIG_KERNEL_STOP_MASK_p_signal_shared_pending;
				lock_p_sighand_siglock -> rm_from_queue_SIG_KERNEL_STOP_MASK_p_signal_shared_pending;
				rm_from_queue_SIG_KERNEL_STOP_MASK_p_signal_shared_pending -> set_t_p;
				set_t_p -> rm_from_queue_SIG_KERNEL_STOP_MASK_t_pending;
				rm_from_queue_SIG_KERNEL_STOP_MASK_t_pending -> set_state_TASK_STOPPED;
				set_state_TASK_STOPPED -> sig_user_defined_t_SIGCONT_and_sigismember_t_blocked_SIGCONT_false;
				sig_user_defined_t_SIGCONT_and_sigismember_t_blocked_SIGCONT_false -> set_tsk_thread_flag_t_TIF_SIGPENDING;
				set_tsk_thread_flag_t_TIF_SIGPENDING -> state_self_set_TASK_INTERRUPTIBLE;
				state_self_set_TASK_INTERRUPTIBLE -> wake_up_state_t_state;
				sig_user_defined_t_SIGCONT_and_sigismember_t_blocked_SIGCONT_false -> wake_up_state_t_state;
				wake_up_state_t_state -> set_t_next_thread_t;
				set_t_next_thread_t -> t_not_eq_p;
				t_not_eq_p -> rm_from_queue_SIG_KERNEL_STOP_MASK_t_pending;
				t_not_eq_p -> p_signal_flags_SIGNAL_STOP_STOPPED_set;
				p_signal_flags_SIGNAL_STOP_STOPPED_set -> set_p_signal_flags_SIGNAL_STOP_CONTINUED;
				set_p_signal_flags_SIGNAL_STOP_CONTINUED -> set_p_signal_group_exit_code_0;
				set_p_signal_group_exit_code_0 -> unlock_p_sighand_siglock;
				unlock_p_sighand_siglock -> p_ptrace_PT_PTRACED_set;
				p_ptrace_PT_PTRACED_set -> do_notify_parent_cldstop_p_p_parent_CLD_CONTINUED;
				p_ptrace_PT_PTRACED_set -> do_notify_parent_cldstop_p_group_leader_p_group_leader_real_parent_CLLD_CONTINUED;
				do_notify_parent_cldstop_p_p_parent_CLD_CONTINUED -> lock_p_sighand_siglock;
				do_notify_parent_cldstop_p_group_leader_p_group_leader_real_parent_CLLD_CONTINUED -> lock_p_sighand_siglock;
				p_signal_flags_SIGNAL_STOP_STOPPED_set -> set_p_signal_flags_0;
				sig_eq_SIGCONT -> sig_eq_SIGKILL;
				sig_eq_SIGKILL -> set_p_signal_flags_0;
        }

        subgraph cluster_specific_send_sig_info{
                label="static int specific_send_sig_info(int sig, struct siginfo *info, struct task_struct *t)";
                irqs_disabled_null[label="irqs_disabled_null"];
                BUG[label="BUG"];
                assert_spin_locked_t_sighand_siglock[label="assert_spin_locked_t_sighand_siglock"];
                info_great_2_and_info_si_code_eq_SI_TIMER[label="info_great_2_and_info_si_code_eq_SI_TIMER"];
                set_ret_info_si_sys_private[label="set_ret_info_si_sys_private"];
                sig_ignored_t_sig[label="sig_ignored_t_sig"];
                LEGACY_QUEUE_t_pending_sig[label="LEGACY_QUEUE_t_pending_sig"];
                set_ret_send_signal_sig_info_t_t_pending[label="set_ret_send_signal_sig_info_t_t_pending"];
                ret_null_and_sigismember_t_blocked_sig_false[label="ret_null_and_sigismember_t_blocked_sig_false"];
                signal_wake_up_t_sig_eq_SIGKILL[label="signal_wake_up_t_sig_eq_SIGKILL"];
                return_ret[label="return_ret"];
				
				irqs_disabled_null -> assert_spin_locked_t_sighand_siglock;
				irqs_disabled_null -> BUG
				assert_spin_locked_t_sighand_siglock -> info_great_2_and_info_si_code_eq_SI_TIMER;
				info_great_2_and_info_si_code_eq_SI_TIMER -> set_ret_info_si_sys_private;
				info_great_2_and_info_si_code_eq_SI_TIMER -> sig_ignored_t_sig;
				set_ret_info_si_sys_private -> sig_ignored_t_sig;
				sig_ignored_t_sig -> return_ret;
				sig_ignored_t_sig -> LEGACY_QUEUE_p_signal_shared_pending_sig;
				LEGACY_QUEUE_p_signal_shared_pending_sig -> return_ret;
				LEGACY_QUEUE_p_signal_shared_pending_sig -> set_ret_send_signal_sig_info_t_t_pending;
				set_ret_send_signal_sig_info_t_t_pending -> ret_null_and_sigismember_t_blocked_sig_false;
				ret_null_and_sigismember_t_blocked_sig_false -> signal_wake_up_t_sig_eq_SIGKILL;
				ret_null_and_sigismember_t_blocked_sig_false -> return_ret;
				signal_wake_up_t_sig_eq_SIGKILL -> return_ret;
        }

        subgraph cluster_sys_tkill{
                label="asmlinkage long sys_tkill(int pid, int sig)";
                pid_not_great_0[label="pid_not_great_0"];
                return_EINVAL[label="return_EINVAL"];
                set_info_si_signo_sig[label="set_info_si_signo_sig"];
                set_info_si_errno_0[label="set_info_si_errno_0"];
                set_info_si_code_SI_TKILL[label="set_info_si_code_SI_TKILL"];
                set_info_si_pid_current_tgid[label="set_info_si_pid_current_tgid"];
                set_info_si_uid_current_uid[label="set_info_si_uid_current_uid"];
                read_lock_tasklist_lock[label="read_lock_tasklist_lock"];
                set_p_find_task_by_pid_pid[label="set_p_find_task_by_pid_pid"];
                set_error_ESRCH[label="set_error_ESRCH"];
                p_not_null[label="p_not_null"];
                set_error_check_kill_permission_sig_info_p[label="set_error_check_kill_permission_sig_info_p"];
                error_null_and_sig_not_null_and_p_sighand_not_null[label="error_null_and_sig_not_null_and_p_sighand_not_null"];
                lock_p_sighand_siglock[label="lock_p_sighand_siglock"];
                handle_stop_signal_sig_p[label="handle_stop_signal_sig_p"];
                set_error_specific_send_sig_info_sig_info_p[label="set_error_specific_send_sig_info_sig_info_p"];
                unlock_p_sighand_siglock[label="unlock_p_sighand_siglock"];
                unlock_tasklist_lock[label="unlock_tasklist_lock"];
                return_error[label="return_error"];

				pid_not_great_0 -> return_EINVAL;
				pid_not_great_0 -> set_info_si_signo_sig;
				set_info_si_signo_sig -> set_info_si_errno_0;
				set_info_si_errno_0 -> set_info_si_code_SI_TKILL;
				set_info_si_code_SI_TKILL -> set_info_si_pid_current_tgid;
				set_info_si_pid_current_tgid -> set_info_si_uid_current_uid;
				set_info_si_uid_current_uid -> lock_tasklist_lock;
				lock_tasklist_lock -> set_p_find_task_by_pid_pid;
				set_p_find_task_by_pid_pid -> set_error_ESRCH;
				set_error_ESRCH -> p_not_null;
				p_not_null -> set_error_check_kill_permission_sig_info_p;
				p_not_null -> unlock_tasklist_lock;
				set_error_check_kill_permission_sig_info_p -> error_null_and_sig_not_null_and_p_sighand_not_null;
				error_null_and_sig_not_null_and_p_sighand_not_null -> unlock_tasklist_lock;
				error_null_and_sig_not_null_and_p_sighand_not_null -> lock_p_sighand_siglock;
				lock_p_sighand_siglock -> handle_stop_signal_sig_p;
				handle_stop_signal_sig_p -> set_error_specific_send_sig_info_sig_info_p;
				set_error_specific_send_sig_info_sig_info_p -> unlock_p_sighand_siglock;
				unlock_p_sighand_siglock -> unlock_tasklist_lock;
				unlock_tasklist_lock -> return_error;
        }

        subgraph cluster_send_sig{
                label="int send_sig(int sig, struct task_struct *p, int priv)";
                return_send_sig_info_sig_priv_not_eq_0_p[label="return_send_sig_info_sig_priv_not_eq_0_p"];
        }

        subgraph cluster_send_sig_info{
                label="int send_sig_info(int sig, struct siginfo *info, struct task_struct *p)";
                valid_signal_sig_null[label="valid_signal_sig_null"];
                return_EINVAL[label="return_EINVAL"];
                lock_tasklist_lock[label="lock_tasklist_lock"];
                lock_p_sighand_siglock[label="lock_p_sighand_siglock"];
                set_ret_specific_send_sig_info_sig_info_p[label="set_ret_specific_send_sig_info_sig_info_p"];
                unlock_p_sighand_siglock[label="unlock_p_sighand_siglock"];
                unlock_tasklist_lock[label="unlock_tasklist_lock"];
                return_ret[label="return_ret"];

				valid_signal_sig_null -> return_EINVAL;
				valid_signal_sig_null -> lock_tasklist_lock;
				lock_tasklist_lock -> lock_p_sighand_siglock;
				lock_p_sighand_siglock -> set_ret_specific_send_sig_info_sig_info_p;
				set_ret_specific_send_sig_info_sig_info_p -> unlock_p_sighand_siglock;;
				unlock_p_sighand_siglock -> unlock_tasklist_lock;
				unlock_tasklist_lock -> return_ret;
        }

        subgraph cluster_force_sig{
                label="void force_sig(int sig, struct task_struct *p)";
                force_sig_info_sig_1_p[label="force_sig_info_sig_1_p"];
        }

        subgraph cluster_force_sig_info{
                label="int force_sig_info(int sig, struct siginfo *info, struct task_struct *t)";
                lock_t_sighand_siglock[label="lock_t_sighand_siglock"];
                sigismember_t_blocked_sig_true_or_t_sighand_action_eq_SIG_IGN[label="sigismember(&t->blocked, sig) || t->sighand->action[sig-1].sa.sa_handler == SIG_IGN"];
                set_t_sighand_action_sa_sa_handler_SIG_DFL[label="set_t_sighand_action_sa_sa_handler_SIG_DFL "];
                sigdelset_t_blocked_sig[label="sigdelset_t_blocked_sig"];
                recalc_sigpending_tsk_t[label="recalc_sigpending_tsk_t"];
                set_ret_specific_send_sig_info_sig_info_t[label="set_ret_specific_send_sig_info_sig_info_t"];
                unlock_t_sighand_siglock[label="unlock_t_sighand_siglock"];

				lock_t_sighand_siglock -> sigismember_t_blocked_sig_true_or_t_sighand_action_eq_SIG_IGN;
				sigismember_t_blocked_sig_true_or_t_sighand_action_eq_SIG_IGN -> set_t_sighand_action_sa_sa_handler_SIG_DFL;;
				set_t_sighand_action_sa_sa_handler_SIG_DFL -> sigdelset_t_blocked_sig;
				sigdelset_t_blocked_sig -> recalc_sigpending_tsk_t;
				recalc_sigpending_tsk_t -> set_ret_specific_send_sig_info_sig_info_t;
				sigismember_t_blocked_sig_true_or_t_sighand_action_eq_SIG_IGN -> set_ret_specific_send_sig_info_sig_info_t;
				set_ret_specific_send_sig_info_sig_info_t -> unlock_t_sighand_siglock;
				unlock_t_sighand_siglock -> return_ret;
        }

        subgraph cluster_force_sig_specific{
                label="void force_sig_specific(int sig, struct task_struct *t)";
                lock_t_sighand_siglock[label="lock_t_sighand_siglock"];
                t_sighand_action_sa_sa_handler_eq_SIG_IGN[label="t_sighand_action_sa_sa_handler_eq_SIG_IGN"];
                set_t_sighand_action_sa_sa_handler_SIG_DFL[label="set_t_sighand_action_sa_sa_handler_SIG_DFL"];
                sigdelset_t_blocked_sig[label="sigdelset_t_blocked_sig"];
                recalc_sigpending_tsk_t[label="recalc_sigpending_tsk_t"];
                specific_send_sig_info_sig_2_t[label="specific_send_sig_info_sig_2_t"];
                unlock_t_sighand_siglock[label="unlock_t_sighand_siglock"];

				lock_t_sighand_siglock -> t_sighand_action_sa_sa_handler_eq_SIG_IGN;
				t_sighand_action_sa_sa_handler_eq_SIG_IGN -> set_t_sighand_action_sa_sa_handler_SIG_DFL;;
				set_t_sighand_action_sa_sa_handler_SIG_DFL -> sigdelset_t_blocked_sig;
				t_sighand_action_sa_sa_handler_eq_SIG_IGN -> sigdelset_t_blocked_sig;
				sigdelset_t_blocked_sig -> recalc_sigpending_tsk_t;
				recalc_sigpending_tsk_t -> specific_send_sig_info_sig_2_t;
				specific_send_sig_info_sig_2_t -> unlock_t_sighand_siglock;
        }

        subgraph cluster_send_group_sig_info{
                label="int send_group_sig_info(int sig, struct siginfo *info, struct task_struct *p)";
                lock_tasklist_lock[label="lock_tasklist_lock"];
                set_ret_group_send_sig_info_sig_info_p[label="set_ret_group_send_sig_info_sig_info_p"];
                unlock_tasklist_lock[label="unlock_tasklist_lock"];
                return_ret[label="return_ret"];

				lock_tasklist_lock -> set_ret_group_send_sig_info_sig_info_p;
				set_ret_group_send_sig_info_sig_info_p -> unlock_tasklist_lock;
				unlock_tasklist_lock -> return_ret;
        }

        subgraph cluster_kill_pg{
                label="int kill_pg(pid_t pgrp, int sig, int priv)";
                return_kill_pg_info_sig_priv_not_eq_0_pgrp[label="return_kill_pg_info_sig_priv_not_eq_0_pgrp"];
        }

        subgraph cluster_kill_proc{
                label="int kill_proc(pid_t pid, int sig, int priv)";
                return_kill_proc_info_sig_priv_not_eq_0_pid[label="return_kill_proc_info_sig_priv_not_eq_0_pid"];
        }

        subgraph cluster_sys_rt_sigqueueinfo{
                label="asmlinkage long sys_rt_sigqueueinfo(int pid, int sig, siginfo_t __user *uinfo)";
                copy_from_user_info_uinof_sizeof_siginfo_t[label="copy_from_user_info_uinof_sizeof_siginfo_t"];
                return_EFAULT[label="return_EFAULT"];
                info_si_code_not_small_0[label="info_si_code_not_small_0"];
                return_EPERM[label="return_EPERM"];
                set_info_si_signo_sig[label="set_info_si_signo_sig"];
                return_kill_proc_info_sig_info_pid[label="return_kill_proc_info_sig_info_pid"];

				copy_from_user_info_uinof_sizeof_siginfo_t -> return_EFAULT;
				copy_from_user_info_uinof_sizeof_siginfo_t -> info_si_code_not_small_0;
				info_si_code_not_small_0 -> return_EPERM;
				info_si_code_not_small_0 -> set_info_si_signo_sig;
				set_info_si_signo_sig -> return_kill_proc_info_sig_info_pid;
        }

        subgraph cluster_get_signal_to_deliver{
                label="int get_signal_to_deliver(siginfo_t *info, struct k_sigaction *return_ka, struct pt_regs *regs, void *cookie)";
                set_mask_current_blocked[label="set_mask_current_blocked"];
                lock_current_sighand_siglock[label="lock_current_sighand_siglock"];
                dead_for[label="dead_for"];
                current_signal_group_stop_count_great_0_and_handle_group_stop_true[label="current_signal_group_stop_count_great_0_and_handle_group_stop_true"];
                set_signr_dequeue_signal_current_mask_info[label="set_signr_dequeue_signal_current_mask_info"];
                signr_null[label="signr_null"];
                current_ptrace_PT_PTRACED_set_and_signr_not_eq_SIGKILL[label="current_ptrace_PT_PTRACED_set_and_signr_not_eq_SIGKILL"];
                ptrace_signal_deliver_regs_cookie[label="ptrace_signal_deliver_regs_cookie"];
                ptrace_stop_signr_signr_info[label="ptrace_stop_signr_signr_info"];
                set_signr_current_exit_code[label="set_signr_current_exit_code"];
                signr_eq_0[label="signr_eq_0"];
                set_current_exit_code_0[label="set_current_exit_code_0"];
                signr_not_eq_info_si_signo[label="signr_not_eq_info_si_signo"];
                set_info_si_signo_signr[label="set_info_si_signo_signr"];
                set_info_si_errno_0[label="set_info_si_errno_0"];
                set_info_si_code_SI_USER[label="set_info_si_code_SI_USER"];
                set_info_si_pid_current_parent_pid[label="set_info_si_pid_current_parent_pid"];
                set_info_si_uid_current_parent_uid[label="set_info_si_uid_current_parent_uid"];
                sigismember_current_blocked_signr_true[label="sigismember_current_blocked_signr_true"];
                specific_send_sig_info_signr_info_current[label="specific_send_sig_info_signr_info_current"];
                set_ka_current_sighand_action_signr_sub_1[label="set_ka_current_sighand_action_signr_sub_1"];
                ka_sa_sa_handler_eq_SIG_IGN[label="ka_sa_sa_handler_eq_SIG_IGN"];
                ka_sa_sa_handler_not_eq_SIG_DFL[label="ka_sa_sa_handler_not_eq_SIG_DFL"];
                set_return_ka_ka[label="set_return_ka_ka"];
                ka_sa_sa_flags_SA_ONESHOT_set[label="ka_sa_sa_flags_SA_ONESHOT_set"];
                set_ka_sa_sa_handler_SIG_DFL[label="set_ka_sa_sa_handler_SIG_DFL"];
                sig_kernel_ignroe_signr_true[label="sig_kernel_ignroe_signr_true"];
                current_pid_eq_1[label="current_pid_eq_1"];
                sig_kernel_sotp_signr_true[label="sig_kernel_sotp_signr_true"];
                signr_not_SIGSTOP[label="signr_not_SIGSTOP"];
                unlock_current_sighand_siglock[label="unlock_current_sighand_siglock"];
                is_orphaned_pgrp_process_group_current[label="is_orphaned_pgrp_process_group_current"];
                lock_current_sighand_siglock[label="lock_current_sighand_siglock"];
                do_signal_stop_signr[label="do_signal_stop_signr"];
                unlock_current_sighand_siglock[label="unlock_current_sighand_siglock"];
                current_flags_self_set_PF_SIGNALED[label="current_flags_self_set_PF_SIGNALED"];
                sig_kernel_coredump_signr_true[label="sig_kernel_coredump_signr_true"];
                do_corddump_signr_signr_regs[label="do_corddump_signr_signr_regs"];
                do_group_exit_signr[label="do_group_exit_signr"];
                unlock_current_sighand_siglock[label="unlock_current_sighand_siglock"];

				set_mask_current_blocked -> lock_current_sighand_siglock;
				lock_current_sighand_siglock -> dead_for;
				dead_for -> current_signal_group_stop_count_great_0_and_handle_group_stop_true;;
				dead_for -> unlock_current_sighand_siglock;
				current_signal_group_stop_count_great_0_and_handle_group_stop_true -> lock_current_sighand_siglock;
				current_signal_group_stop_count_great_0_and_handle_group_stop_true -> set_signr_dequeue_signal_current_mask_info;
				set_signr_dequeue_signal_current_mask_info -> signr_null;
				signr_null -> unlock_current_sighand_siglock;
				signr_null -> current_ptrace_PT_PTRACED_set_and_signr_not_eq_SIGKILL;
				current_ptrace_PT_PTRACED_set_and_signr_not_eq_SIGKILL -> ptrace_signal_deliver_regs_cookie;
				current_ptrace_PT_PTRACED_set_and_signr_not_eq_SIGKILL -> set_ka_current_sighand_action_signr_sub_1;
				ptrace_signal_deliver_regs_cookie -> ptrace_stop_signr_signr_info;
				ptrace_stop_signr_signr_info -> set_signr_current_exit_code;
				set_signr_current_exit_code -> signr_eq_0;
				signr_eq_0 -> current_ptrace_PT_PTRACED_set_and_signr_not_eq_SIGKILL;
				signr_eq_0 -> set_current_exit_code_0;
				set_current_exit_code_0 -> signr_not_eq_info_si_signo;
				signr_not_eq_info_si_signo -> sigismember_current_blocked_signr_true;
				signr_not_eq_info_si_signo -> set_info_si_signo_signr;
				set_info_si_signo_signr -> set_info_si_errno_0;
				set_info_si_errno_0 -> set_info_si_code_SI_USER;
				set_info_si_code_SI_USER -> set_info_si_pid_current_parent_pid;
				set_info_si_pid_current_parent_pid -> set_info_si_uid_current_parent_uid;
				set_info_si_uid_current_parent_uid -> sigismember_current_blocked_signr_true;;
				sigismember_current_blocked_signr_true -> set_ka_current_sighand_action_signr_sub_1;
				sigismember_current_blocked_signr_true -> specific_send_sig_info_signr_info_current;
				specific_send_sig_info_signr_info_current -> current_signal_group_stop_count_great_0_and_handle_group_stop_true;
				set_ka_current_sighand_action_signr_sub_1 -> ka_sa_sa_handler_eq_SIG_IGN;
				ka_sa_sa_handler_eq_SIG_IGN -> current_signal_group_stop_count_great_0_and_handle_group_stop_true;
				ka_sa_sa_handler_eq_SIG_IGN -> ka_sa_sa_handler_not_eq_SIG_DFL;
				ka_sa_sa_handler_not_eq_SIG_DFL -> set_return_ka_ka;
				ka_sa_sa_handler_not_eq_SIG_DFL -> sig_kernel_ignroe_signr_true;
				set_return_ka_ka -> ka_sa_sa_flags_SA_ONESHOT_set;
				ka_sa_sa_flags_SA_ONESHOT_set -> set_ka_sa_sa_handler_SIG_DFL;
				set_ka_sa_sa_handler_SIG_DFL -> unlock_current_sighand_siglock;
				set_ka_sa_sa_handler_SIG_DFL -> unlock_current_sighand_siglock;
				sig_kernel_ignroe_signr_true -> current_signal_group_stop_count_great_0_and_handle_group_stop_true;
				sig_kernel_ignroe_signr_true -> current_pid_eq_1;
				current_pid_eq_1 -> current_signal_group_stop_count_great_0_and_handle_group_stop_true;
				current_pid_eq_1 -> sig_kernel_stop_sig_true;
				sig_kernel_stop_sig_true -> signr_not_SIGSTOP;
				sig_kernel_stop_sig_true -> unlock_current_sighand_siglock;
				signr_not_SIGSTOP -> unlock_current_sighand_siglock;
				unlock_current_sighand_siglock -> is_orphaned_pgrp_process_group_current;
				is_orphaned_pgrp_process_group_current -> lock_current_sighand_siglock;
				is_orphaned_pgrp_process_group_current -> lock_current_sighand_siglock;
				lock_current_sighand_siglock -> do_signal_stop_signr;
				do_signal_stop_signr -> lock_current_sighand_siglock;
				do_signal_stop_signr -> current_signal_group_stop_count_great_0_and_handle_group_stop_true;
				unlock_current_sighand_siglock -> current_flags_self_set_PF_SIGNALED;
				current_flags_self_set_PF_SIGNALED -> sig_kernel_coredump_signr_true;
				sig_kernel_coredump_signr_true -> do_corddump_signr_signr_regs;
				do_corddump_signr_signr_regs -> do_group_exit_signr;
				sig_kernel_coredump_signr_true -> do_group_exit_signr;
				do_group_exit_signr -> unlock_current_sighand_siglock;
        }

        subgraph cluster_handle_group_stop{
                label="static inline int handle_group_stop(void)";
                current_signal_group_exit_task_eq_current[label="current_signal_group_exit_task_eq_current"];
                clear_current_signal_group_exit_task[label="clear_current_signal_group_exit_task"];
                return_0[label="return_0"];
                current_signal_flags_SIGNAL_GROUP_EXIT_set[label="current_signal_flags_SIGNAL_GROUP_EXIT_set"];
                return_0[label="return_0"];
                set_stop_count_dec_current_signal_group_stop_count[label="set_stop_count_dec_current_signal_group_stop_count"];
                stop_count_eq_0[label="stop_count_eq_0"];
                set_current_signal_flags_SIGNAL_STOP_STOPPED[label="set_current_signal_flags_SIGNAL_STOP_STOPPED"];
                set_current_exit_code_current_signal_goupt_exit_code[label="set_current_exit_code_current_signal_goupt_exit_code"];
                set_current_state_TASK_STOPPED[label="set_current_state_TASK_STOPPED"];
                unlock_current_sighand_siglock[label="unlock_current_sighand_siglock"];
                finish_stop_stop_count[label="finish_stop_stop_count"];
                return_1[label="return_1"];
				current_signal_group_exit_task_eq_current -> clear_current_signal_group_exit_task;
				current_signal_group_exit_task_eq_current -> current_signal_flags_SIGNAL_GROUP_EXIT_set;
				clear_current_signal_group_exit_task -> return_0;
				current_signal_flags_SIGNAL_GROUP_EXIT_set -> return_0;
				current_signal_flags_SIGNAL_GROUP_EXIT_set -> set_stop_count_dec_current_signal_group_stop_count;
				set_stop_count_dec_current_signal_group_stop_count -> stop_count_eq_0;
				stop_count_eq_0 -> set_current_signal_flags_SIGNAL_STOP_STOPPED;
				stop_count_eq_0 -> set_current_exit_code_current_signal_goupt_exit_code;
				set_current_signal_flags_SIGNAL_STOP_STOPPED -> set_current_exit_code_current_signal_goupt_exit_code;
				set_current_exit_code_current_signal_goupt_exit_code -> set_current_state_TASK_STOPPED;
				set_current_state_TASK_STOPPED -> unlock_current_sighand_siglock;
				unlock_current_sighand_siglock -> finish_stop_stop_count;
				finish_stop_stop_count -> return_1;
        }

        subgraph cluster_dequeue_signal{
                label="int dequeue_signal(struct task_struct *tsk, sigset_t *mask, siginfo_t *info)";
                set_signr___dequeue_signal_tsk_pending_mask_info[label="set_signr___dequeue_signal_tsk_pending_mask_info"];
                signr_null[label="signr_null"];
                set_signr___dequeue_signal_tsk_signal_shared_pending_mask_info[label="set_signr___dequeue_signal_tsk_signal_shared_pending_mask_info"];
                signr_not_null_and_sig_kernel_stop_signr[label="signr_not_null_and_sig_kernel_stop_signr"];
                tsk_signal_flags_self_set_SIGNAL_STOP_DEQUEUED[label="tsk_signal_flags_self_set_SIGNAL_STOP_DEQUEUED"];
                signr_not_null_and_info_si_code___SI_TIME_set_and_info_si_sys_private[label="signr_not_null_and_info_si_code___SI_TIME_set_and_info_si_sys_private"];
                unlock_tsk_sighand_siglock[label="unlock_tsk_sighand_siglock"];
                do_schedule_next_timer_info[label="do_schedule_next_timer_info"];
                lock_tsk_sighand_siglock[label="lock_tsk_sighand_siglock"];
                return_signr[label="return_signr"];

				set_signr___dequeue_signal_tsk_pending_mask_info -> signr_null;
				signr_null -> set_signr___dequeue_signal_tsk_signal_shared_pending_mask_info;
				signr_null -> signr_not_null_and_sig_kernel_stop_signr;
				set_signr___dequeue_signal_tsk_signal_shared_pending_mask_info -> signr_not_null_and_sig_kernel_stop_signr;
				signr_not_null_and_sig_kernel_stop_signr -> tsk_signal_flags_self_set_SIGNAL_STOP_DEQUEUED;
				tsk_signal_flags_self_set_SIGNAL_STOP_DEQUEUED -> signr_not_null_and_info_si_code___SI_TIME_set_and_info_si_sys_private;
				signr_not_null_and_sig_kernel_stop_signr -> signr_not_null_and_info_si_code___SI_TIME_set_and_info_si_sys_private;
				signr_not_null_and_info_si_code___SI_TIME_set_and_info_si_sys_private -> unlock_tsk_sighand_siglock;
				signr_not_null_and_info_si_code___SI_TIME_set_and_info_si_sys_private -> return_signr;
				unlock_tsk_sighand_siglock -> do_schedule_next_timer_info;
				do_schedule_next_timer_info -> lock_tsk_sighand_siglock;
				lock_tsk_sighand_siglock -> return_signr;
        }

        subgraph cluster_do_signal_stop{
                label="static int do_signal_stop(int signr)";
                set_sig_current_signal[label="set_sig_current_signal"];
                set_sighand_current_sighand[label="set_sighand_current_sighand"];
                sig_flags_SIGNAL_STOP_DEQUEUED_set[label="sig_flags_SIGNAL_STOP_DEQUEUED_set"];
                return_0[label="return_0"];
                sig_group_stop_count_great_0[label="sig_group_stop_count_great_0"];
                set_signr_sig_group_exit_code[label="set_signr_sig_group_exit_code"];
                set_stop_count_dec_sig_group_stop_count[label="set_stop_count_dec_sig_group_stop_count"];
                set_current_exit_code_signr[label="set_current_exit_code_signr"];
                set_current_state_TASK_STOPPED[label="set_current_state_TASK_STOPPED"];
                stop_count_eq_0[label="stop_count_eq_0"];
                set_sig_flags_SIGNAL_STOP_STOPPED[label="set_sig_flags_SIGNAL_STOP_STOPPED"];
                unlock_sighand_siglock[label="unlock_sighand_siglock"];
                thread_group_empty_current[label="thread_group_empty_current"];
                set_current_exit_code_current_signal_group_exit_code_signr[label="set_current_exit_code_current_signal_group_exit_code_signr"];
                set_current_state_TASK_STOPPED[label="set_current_state_TASK_STOPPED"];
                set_sig_flags_SIGNAL_STOP_STOPPED[label="set_sig_flags_SIGNAL_STOP_STOPPED"];
                unlock_sighand_siglock[label="unlock_sighand_siglock"];
                unlock_sighand_siglock[label="unlock_sighand_siglock"];
                lock_tasklist_lock[label="lock_tasklist_lock"];
                lock_sighand_siglock[label="lock_sighand_siglock"];
                sig_flags_SIGNAL_STOP_DEQUEUED_set[label="sig_flags_SIGNAL_STOP_DEQUEUED_set"];
                unlock_tasklist_lock[label="unlock_tasklist_lock"];
                sig_group_stop_count_eq_0[label="sig_group_stop_count_eq_0"];
                sig_group_exit_code_signr[label="sig_group_exit_code_signr"];
                set_stop_count_0[label="set_stop_count_0"];
                for_t_next_thread[label="for_t_next_thread"];
                t_state_small_TASK_STOPPED[label="t_state_small_TASK_STOPPED"];
                stop_count_inc[label="stop_count_inc"];
                signal_wake_up_t_0[label="signal_wake_up_t_0"];
                set_sig_group_stop_count_stop_count[label="set_sig_group_stop_count_stop_count"];
                set_signr_sig_group_exit_code[label="set_signrsig_group_exit_code"];
                set_stop_count_dec_sig_group_stop_count[label="set_stop_count_dec_sig_group_stop_count"];
                set_current_exit_code_signr[label="set_current_exit_code_signr"];
                set_current_state_TASK_STOPPED[label="set_current_state_TASK_STOPPED"];
                stop_count_eq_0[label="stop_count_eq_0"];
                set_sig_flags_SIGNAL_STOP_STOPPED[label="set_sig_flags_SIGNAL_STOP_STOPPED"];
                unlock_sighand_siglock[label="unlock_sighand_siglock"];
                unlock_tasklist_lock[label="unlock_tasklist_lock"];
                finish_stop_stop_count[label="finish_stop_stop_count"];
                return_1[label="return_1"];

				set_sig_current_signal -> set_sighand_current_sighand;
				set_sighand_current_sighand -> sig_flags_SIGNAL_STOP_DEQUEUED_set;
				sig_flags_SIGNAL_STOP_DEQUEUED_set -> return_0;
				sig_flags_SIGNAL_STOP_DEQUEUED_set -> sig_group_stop_count_great_0;
				sig_group_stop_count_great_0 -> set_signr_sig_group_exit_code;
				sig_group_stop_count_great_0 -> thread_group_empty_current;
				set_signr_sig_group_exit_code -> set_stop_count_dec_sig_group_stop_count;
				set_stop_count_dec_sig_group_stop_count -> set_current_exit_code_signr;
				set_current_exit_code_signr -> set_current_state_TASK_STOPPED;
				set_current_state_TASK_STOPPED -> stop_count_eq_0;
				stop_count_eq_0 -> set_sig_flags_SIGNAL_STOP_STOPPED;
				stop_count_eq_0 -> unlock_p_sighand_siglock;
				unlock_p_sighand_siglock -> thread_group_empty_current;
				thread_group_empty_current -> set_current_exit_code_current_signal_group_exit_code_signr;
				thread_group_empty_current -> unlock_sighand_siglock;
				set_current_exit_code_current_signal_group_exit_code_signr -> set_current_state_TASK_STOPPED;
				set_current_state_TASK_STOPPED -> set_sig_flags_SIGNAL_STOP_STOPPED;
				set_sig_flags_SIGNAL_STOP_STOPPED -> unlock_sighand_siglock;
				unlock_sighand_siglock -> finish_stop_stop_count;
				unlock_sighand_siglock -> lock_tasklist_lock;
				lock_tasklist_lock -> lock_sighand_siglock;
				lock_sighand_siglock -> sig_flags_SIGNAL_STOP_DEQUEUED_set;
				sig_flags_SIGNAL_STOP_DEQUEUED_set -> unlock_tasklist_lock;
				sig_flags_SIGNAL_STOP_DEQUEUED_set -> sig_group_stop_count_eq_0;
				unlock_tasklist_lock -> return_0;
				sig_group_stop_count_eq_0 -> sig_group_exit_code_signr;
				sig_group_stop_count_eq_0 -> set_signr_sig_group_exit_code;
				sig_group_exit_code_signr -> set_stop_count_0;
				set_stop_count_0 -> for_t_next_thread;
				for_t_next_thread -> t_state_small_TASK_STOPPED;
				for_t_next_thread -> set_sig_group_stop_count_stop_count;
				t_state_small_TASK_STOPPED -> stop_count_inc;
				stop_count_inc -> signal_wake_up_t_0;
				signal_wake_up_t_0 -> set_sig_group_stop_count_stop_count;
				set_signr_sig_group_exit_code -> set_stop_count_dec_sig_group_stop_count;
				set_stop_count_dec_sig_group_stop_count -> set_current_exit_code_signr;
				set_sig_group_stop_count_stop_count -> set_current_exit_code_signr;
				set_current_exit_code_signr -> set_current_state_TASK_STOPPED;
				set_current_state_TASK_STOPPED -> stop_count_eq_0;
				stop_count_eq_0 -> set_sig_flags_SIGNAL_STOP_STOPPED;
				stop_count_eq_0 -> unlock_p_sighand_siglock;
				set_sig_flags_SIGNAL_STOP_STOPPED -> unlock_p_sighand_siglock;
				unlock_p_sighand_siglock -> unlock_tasklist_lock;
				unlock_tasklist_lock -> finish_stop_stop_count;
				finish_stop_stop_count -> return_1;
        }

        subgraph cluster_do_sigaction{
                label="int do_sigaction(int sig, const struct k_sigaction *act, struct k_sigaction *oact)";
                valid_signal_sig_null_or_sig_small_1_or_act_and_sig_kernel_only_sig[label="valid_signal_sig_null_or_sig_small_1_or_act_and_sig_kernel_only_sig"];
                return_EINVAL[label="return_EINVAL"];
                set_k_current_sighand_action_sig_sub_1[label="set_k_current_sighand_action_sig_sub_1"];
                lock_current_sighand_siglock[label="lock_current_sighand_siglock"];
                signal_pendig_current[label="signal_pendig_current"];
                unlock_current_sighand_siglock[label="unlock_current_sighand_siglock"];
                return_ERESTARTNOINTR[label="return_ERESTARTNOINTR"];
                oact_not_null[label="oact_not_null"];
                set_oact_k[label="set_oact_k"];
                act_not_null[label="act_not_null"];
                act_sa_sa_handler_eq_SIG_IGN_or_act_sa_sa_handler_eq_SIG_DFL_and_sig_kernel_ignore_sig[label="act_sa_sa_handler_eq_SIG_IGN_or_act_sa_sa_handler_eq_SIG_DFL_and_sig_kernel_ignore_sig"];
                unlock_t_sighand_siglock[label="unlock_t_sighand_siglock"];
                lock_tasklist_lock[label="lock_tasklist_lock"];
                lock_t_sighand_siglock[label="lock_t_sighand_siglock"];
                set_k_act[label="set_k_act"];
                sigdelsetmask_k_sa_sa_mask_sigmask_SIGKILL_or_sigmask_SIGSTOP[label="sigdelsetmask_k_sa_sa_mask_sigmask_SIGKILL_or_sigmask_SIGSTOP"];
                rm_from_queue_sigmask_sig_t_signal_shared_pending[label="rm_from_queue_sigmask_sig_t_signal_shared_pending"];
                rm_from_queue_sigmask_sig_t_pending[label="rm_from_queue_sigmask_sig_t_pending"];
                recalc_sigpending_tsk_t[label="recalc_sigpending_tsk_t"];
                set_t_next_thread_t[label="set_t_next_thread_t"];
                t_not_eq_current[label="t_not_eq_current"];
                unlock_current_sighand_siglock[label="unlock_current_sighand_siglock"];
                unlock_tasklist_lock[label="unlock_tasklist_lock"];
                return_0[label="return_0"];
                set_k_act[label="set_k_act"];
                sigdelsetmask_k_sa_sa_mask_sigmask_SIGKILL_or_sigmaks_SIGSTOP[label="sigdelsetmask_k_sa_sa_mask_sigmask_SIGKILL_or_sigmaks_SIGSTOP"];
                unlock_current_sighand_siglock[label="unlock_current_sighand_siglock"];
                return_0[label="return_0"];

				valid_signal_sig_null_or_sig_small_1_or_act_and_sig_kernel_only_sig -> return_EINVAl;
				valid_signal_sig_null_or_sig_small_1_or_act_and_sig_kernel_only_sig -> set_k_current_sighand_action_sig_sub_1;
				set_k_current_sighand_action_sig_sub_1 -> lock_current_sighand_siglock;
				lock_current_sighand_siglock -> signal_pendig_current;
				signal_pendig_current -> unlock_current_sighand_siglock;
				signal_pendig_current -> oact_not_null;
				unlock_current_sighand_siglock -> return_ERESTARTNOINTR;
				oact_not_null -> set_oact_k;
				set_oact_k -> act_not_null;
				oact_not_null -> act_not_null;
				act_not_null -> act_sa_sa_handler_eq_SIG_IGN_or_act_sa_sa_handler_eq_SIG_DFL_and_sig_kernel_ignore_sig;
				act_sa_sa_handler_eq_SIG_IGN_or_act_sa_sa_handler_eq_SIG_DFL_and_sig_kernel_ignore_sig -> unlock_t_sighand_siglock;
				act_sa_sa_handler_eq_SIG_IGN_or_act_sa_sa_handler_eq_SIG_DFL_and_sig_kernel_ignore_sig -> set_k_act;
				unlock_t_sighand_siglock -> lock_tasklist_lock;
				lock_tasklist_lock -> lock_t_sighand_siglock;
				lock_t_sighand_siglock -> set_k_act;
				set_k_act -> sigdelsetmask_k_sa_sa_mask_sigmask_SIGKILL_or_sigmaks_SIGSTOP;
				sigdelsetmask_k_sa_sa_mask_sigmask_SIGKILL_or_sigmaks_SIGSTOP -> rm_from_queue_sigmask_sig_t_signal_shared_pending;
				rm_from_queue_sigmask_sig_t_signal_shared_pending -> rm_from_queue_sigmask_sig_t_pending;
				rm_from_queue_sigmask_sig_t_pending -> recalc_sigpending_tsk_t;
				recalc_sigpending_tsk_t -> set_t_next_thread_t;
				set_t_next_thread_t -> t_not_eq_current;
				t_not_eq_current -> rm_from_queue_sigmask_sig_t_pending;
				t_not_eq_current -> unlock_current_sighand_siglock;
				unlock_current_sighand_siglock -> unlock_tasklist_lock;
				act_not_null -> unlock_current_sighand_siglock;
				unlock_current_sighand_siglock -> return_0;
        }

        subgraph cluster_sys_sigpending{
                label="sys_sigpending(old_sigset_t __user *set)";
                return_do_sigpending_set_sizeof_set[label="return_do_sigpending_set_sizeof_set"];
        }

        subgraph cluster_do_sigpending{
                label="long do_sigpending(void __user *set, unsigned long sigsetsize)";
                sigsetsize_great_sizeof_sigset_t[label="sigsetsize_great_sizeof_sigset_t"];
                lock_current_sighand_siglock[label="lock_current_sighand_siglock"];
                sigorsets_pending_current_pending_signal_current_signal_shared_pending_signal[label="sigorsets_pending_current_pending_signal_current_signal_shared_pending_signal"];
                unlock_current_sighand_siglock[label="unlock_current_sighand_siglock"];
                sigandsets_pending_current_blocked_pending[label="sigandsets_pending_current_blocked_pending"];
                set_error_EFAULT[label="set_error_EFAULT"];
                copy_to_user_set_pending_sigsetsize[label="copy_to_user_set_pending_sigsetsize"];
                set_error_0[label="set_error_0"];
                return_error[label="return_error"];
        }

        subgraph cluster_sigprocmask{
                label="int sigprocmask(int how, sigset_t *set, sigset_t *oldset)";
                lock_current_sighand_siglock[label="lock_current_sighand_siglock"];
                set_old_block_current_blocked[label="set_old_block_current_blocked"];
                switch_how[label="switch_how"];
                case_SIG_BLOCK[label="case_SIG_BLOCK"];
                sigorsets_current_blocked_current_blocked_set[label="sigorsets_current_blocked_current_blocked_set"];
                case_SIG_UNBLOCK[label="case_SIG_UNBLOCK"];
                signandsets_current_blocked_current_blocked_set[label="signandsets_current_blocked_current_blocked_set"];
                case_SIG_SETMASK[label="case_SIG_SETMASK"];
                set_current_blocked_set[label="set_current_blocked_set"];
                default_[label="default_"];
                set_error_EINVAL[label="set_error_EINVAL"];
                recalc_sigpending[label="recalc_sigpending"];
                unlock_current_sighand_siglock[label="unlock_current_sighand_siglock"];
                oldset_not_null[label="oldset_not_null"];
                set_oldset_old_block[label="set_oldset_old_block"];
                return_error[label="return_error"];
        }

        subgraph cluster_recalc_sigpending_tsk{
                label="fastcall void recalc_sigpending_tsk(struct task_struct *t)";
                t_signal_group_stop_count_great_0_or_PENDING_t_pending_t_blocked_or_PENDING_t_signal_shared_pending_t_blocked[label="t_signal_group_stop_count_great_0_or_PENDING_t_pending_t_blocked_or_PENDING_t_signal_shared_pending_t_blocked"];
                set_tsk_thread_flag_t_TIF_SIGPENDING[label="set_tsk_thread_flag_t_TIF_SIGPENDING"];
                clear_tsk_thread_flagt_TIF_SIGPENDING[label="clear_tsk_thread_flagt_TIF_SIGPENDING"];
        }

        subgraph cluster_recalc_sigpending{
                label="void recalc_sigpending(void)";
                recalc_sigpending_tsk_current[label="recalc_sigpending_tsk_current"];
        }

        subgraph cluster_PENDING{
                label="#define PENDING(p,b)";
                has_pending_signals_p_signal_b[label="has_pending_signals_p_signal_b"];
        }

        subgraph cluster_has_pending_signals{
                label="static inline int has_pending_signals(sigset_t *signal, sigset_t *blocked)";
                switch__NSIG_WORDS[label="switch__NSIG_WORDS"];
                default_[label="default_"];
                for__NISG_WORDS_countdown[label="for__NISG_WORDS_countdown"];
                ready_self_or_signal_sig_i_and_rever_blocked_sig_i[label="ready_self_or_signal_sig_i_and_rever_blocked_sig_i"];
                case_4[label="case_4"];
                set_ready_signal_sig_3_and_rever_blocked_sig_3[label="set_ready_signal_sig_3_and_rever_blocked_sig_3"];
                ready_self_or_signal_sig_2_and_rever_blocked_sig_2[label="ready_self_or_signal_sig_2_and_rever_blocked_sig_2"];
                ready_self_or_signal_sig_1_and_rever_blocked_sig_1[label="ready_self_or_signal_sig_1_and_rever_blocked_sig_1"];
                ready_self_or_signal_sig_0_and_rever_blocked_sig_0[label="ready_self_or_signal_sig_0_and_rever_blocked_sig_0"];
                case_2[label="case_2"];
                set_ready_signal_sig_1_and_rever_blocked_sig_1[label="set_ready_signal_sig_1_and_rever_blocked_sig_1"];
                ready_self_or_signal_sig_0_and_rever_blocked_sig_0_1[label="ready_self_or_signal_sig_0_and_rever_blocked_sig_0"];
                case_1[label="case_1"];
                set_ready_signal_sig_0_and_rever_blocked_sig_0[label="set_ready_signal_sig_0_and_rever_blocked_sig_0"];
                return_ready_not_eq_0[label="return_ready_not_eq_0"];
        }

        subgraph cluster_next_signal{
                label="static int next_signal(struct sigpending *pending, sigset_t *mask)";
                set_s_pending_signal_sig[label="set_s_pending_signal_sig"];
                set_m_mask_sig[label="set_m_mask_sig"];
                switch__NNSIG_WORDS[label="switch__NNSIG_WORDS"];
                default_[label="default_"];
                for__NSIG_WORDS_inc_i_s_m[label="for__NSIG_WORDS_inc_i_s_m"];
                set_x_s_and_rever_m_not_null[label="set_s_and_rever_m_not_null"];
                set_sig_ffz_rever_x_add_i_multi__NSIG_BPW_add_1[label="set_sig_ffz_rever_x_add_i_multi__NSIG_BPW_add_1"];
                case_2[label="case_2"];
                set_x_s_0_and_rever_m_0_not_eq_0[label="set_x_s_0_and_rever_m_0_not_eq_0"];
                set_sig_1[label="set_sig_1"];
                set_x_s_1_and_rever_m_1_not_eq_0[label="set_x_s_1_and_rever_m_1_not_eq_0"];
                set_sig__NSIG_BPW_add_1[label="set_sig__NSIG_BPW_add_1"];
                sig_self_add_ffz_rever_x[label="sig_self_add_ffz_rever_x"];
                case_1[label="case_1"];
                set_x_s_and_rever_m_not_eq_0[label="set_x_s_and_rever_m_not_eq_0"];
                set_sig_ffz_rever_x_add_1[label="set_sig_ffz_rever_x_add_1"];
                return_sig[label="return_sig"];
        }

        subgraph cluster___sigqueue_alloc{
                label="static struct sigqueue *__sigqueue_alloc(struct task_struct *t, unsigned int __nocast flags,int override_rlimit)";
                atomic_inc_t_user_sigpending[label="atomic_inc_t_user_sigpending"];
                override_rlimit_or_atomic_read_t_user_sigpending_not_great_t_signal_rlim_RLIMIT_SIGPENDING_rlim_cur[label="override_rlimit_or_atomic_read_t_user_sigpending_not_great_t_signal_rlim_RLIMIT_SIGPENDING_rlim_cur"];
                set_q_kmem_cache_alloc_sigqueue_cachep_flags[label="set_q_kmem_cache_alloc_sigqueue_cachep_flags"];
                q_null[label="q_null"];
                atomic_dec_t_user_sigpending[label="atomic_dec_t_user_sigpending"];
                INIT_LIST_HEAD_q_list[label="INIT_LIST_HEAD_q_list"];
                set_q_flags_0[label="set_q_flags_0"];
                clear_q_lock[label="clear_q_lock"];
                set_q_user_get_uid_t_user[label="set_q_user_get_uid_t_user"];
                return_q[label="return_q"];

		atomic_inc_t_user_sigpending -> override_rlimit_or_atomic_read_t_user_sigpending_not_great_t_signal_rlim_RLIMIT_SIGPENDING_rlim_cur;
		override_rlimit_or_atomic_read_t_user_sigpending_not_great_t_signal_rlim_RLIMIT_SIGPENDING_rlim_cur -> set_q_kmem_cache_alloc_sigqueue_cachep_flags;
		override_rlimit_or_atomic_read_t_user_sigpending_not_great_t_signal_rlim_RLIMIT_SIGPENDING_rlim_cur -> q_null;
		set_q_kmem_cache_alloc_sigqueue_cachep_flags -> q_null;
		q_null -> atomic_dec_t_user_sigpending;
		q_null -> INIT_LIST_HEAD_q_list;
		atomic_dec_t_user_sigpending -> return_q;
		INIT_LIST_HEAD_q_list -> set_q_flags_0;
		set_q_flags_0 -> clear_q_lock;
		clear_q_lock -> set_q_user_get_uid_t_user;
        }

        subgraph cluster___sigqueue_free{
                label="static inline void __sigqueue_free(struct sigqueue *q)";
                q_flags_SIGQUEUE_PREALLOC_set[label="q_flags_SIGQUEUE_PREALLOC_set"];
                atomic_dec_q_user_sigpending[label="atomic_dec_q_user_sigpending"];
                free_uid_q_user[label="free_uid_q_user"];
                kmem_cache_free_sigqueue_cachep_q[label="kmem_cache_free_sigqueue_cachep_q"];
        }

        subgraph cluster_flush_sigqueue{
                label="static void flush_sigqueue(struct sigpending *queue)";
                sigemptyset_queue_signal[label="sigemptyset_queue_signal"];
                list_empty_queue_list_false[label="list_empty_queue_list_false"];
                set_q_list_entry_queue_list_next_struct_sigqueue_list[label="set_q_list_entry_queue_list_next_struct_sigqueue_list"];
                list_del_init_q_list[label="list_del_init_q_list"];
                __sigqueue_free_q[label="__sigqueue_free_q"];
        }

        subgraph cluster_flush_signals{
                label="void flush_signals(struct task_struct *t)";
                lock_t_sighand_siglock[label="lock_t_sighand_siglock"];
                clear_tsk_thread_flag_t_TIF_SIGPENDING[label="clear_tsk_thread_flag_t_TIF_SIGPENDING"];
                flush_sigqueue_t_pending[label="flush_sigqueue_t_pending"];
                flush_sigqueue_t_signal_shared_pending[label="flush_sigqueue_t_signal_shared_pending"];
                unlock_t_sighand_siglock[label="unlock_t_sighand_siglock"];
        }

        subgraph cluster__exit_sighand{
                label="void __exit_sighand(struct task_struct *tsk)";
                set_sighand_tsk_sighand[label="set_sighand_tsk_sighand"];
                clear_tsk_sighand[label="clear_tsk_sighand"];
                atomic_dec_and_test_sighand_count[label="atomic_dec_and_test_sighand_count"];
                kmem_cache_free_sighand_cachep_sighand[label="kmem_cache_free_sighand_cachep_sighand"];
        }

        subgraph cluster_exit_sighand{
                label="void exit_sighand(struct task_struct *tsk)";
                write_lock_irq_tasklist_lock[label="write_lock_irq_tasklist_lock"];
                __exit_sighand_tsk[label="__exit_sighand_tsk"];
                write_unlock_irq_tasklist_lock[label="write_unlock_irq_tasklist_lock"];
        }

        subgraph cluster___exit_signal{
                label="void __exit_signal(struct task_struct *tsk)";
                set_sig_tsk_signal[label="set_sig_tsk_signal"];
                set_sighand_tsk_sighand[label="set_sighand_tsk_sighand"];
                sig_null[label="sig_null"];
                BUG[label="BUG"];
                atomic_read_sig_count_null[label="atomic_read_sig_count_null"];
                BUG[label="BUG"];
                lock_sighand_siglock[label="lock_sighand_siglock"];
                posix_cpu_timers_exit_tsk[label="posix_cpu_timers_exit_tsk"];
                atomic_dec_and_test_sig_count[label="atomic_dec_and_test_sig_count"];
                posix_cpu_timers_exit_group_tsk[label="posix_cpu_timers_exit_group_tsk"];
                tsk_eq_sig_curr_target[label="tsk_eq_sig_curr_target"];
                set_sig_curr_target_next_thread_tsk[label="set_sig_curr_target_next_thread_tsk"];
                clear_tsk_signal[label="clear_tsk_signal"];
                unlock_sighand_siglock[label="unlock_sighand_siglock"];
                flush_sigqueue_sig_shared_pending[label="flush_sigqueue_sig_shared_pending"];
                sig_group_exit_task_and_atomic_read_sig_count_eq_sig_notify_count[label="sig_group_exit_task_and_atomic_read_sig_count_eq_sig_notify_count"];
                wake_up_process_sig_group_exit_task[label="wake_up_process_sig_group_exit_task"];
                clear_sig_grup_exit_task[label="clear_sig_grup_exit_task"];
                tsk_eq_sig_curr_target[label="tsk_eq_sig_curr_target"];
                set_sig_curr_target_next_thread_tsk[label="set_sig_curr_target_next_thread_tsk"];
                clear_tsk_signal[label="clear_tsk_signal"];
                set_sig_utime_cputime_add_sig_utime_tsk_utime[label="set_sig_utime_cputime_add_sig_utime_tsk_utime"];
                set_sig_stime_cpuptime_add_sig_stime_tsk_stime[label="set_sig_stime_cpuptime_add_sig_stime_tsk_stime"];
                sig_min_flt_self_add_tsk_min_flt[label="sig_min_flt_self_add_tsk_min_flt"];
                sig_maj_flt_self_add_tsk_maj_flt[label="sig_maj_flt_self_add_tsk_maj_flt"];
                sig_nvcsw_self_add_tsk_nvcsw[label="sig_nvcsw_self_add_tsk_nvcsw"];
                sig_nivcsw_self_add_tsk_nivcsw[label="sig_nivcsw_self_add_tsk_nivcsw"];
                sig_sched_time_self_add_tsk_sched_time[label="sig_sched_time_self_add_tsk_sched_time"];
                unlock_sighand_siglock[label="unlock_sighand_siglock"];
                clear_sig[label="clear_sig"];
                clear_tsk_thread_flag_tsk_TIF_SIGPENDING[label="clear_tsk_thread_flag_tsk_TIF_SIGPENDING"];
                flush_sigqueue_tsk_pending[label="flush_sigqueue_tsk_pending"];
                sig_not_null[label="sig_not_null"];
                exit_itimers_sig[label="exit_itimers_sig"];
                exit_thread_group_keys_sig[label="exit_thread_group_keys_sig"];
                kmem_cache_free_signal_cachep_sig[label="kmem_cache_free_signal_cachep_sig"];
        }

        subgraph cluster_exit_signal{
                label="void exit_signal(struct task_struct *tsk)";
                lock_tasklist_lock[label="lock_tasklist_lock"];
                __exit_signal_tsk[label="__exit_signal_tsk"];
                unlock_tasklist_lock[label="unlock_tasklist_lock"];
        }

        subgraph cluster_flush_signal_handlers{
                label="void flush_signal_handlers(struct task_struct *t, int force_default)";
                set_ka_t_sighand_action_0[label="set_ka_t_sighand_action_0"];
                for__NSIG[label="for__NSIG"];
                force_default_true_or_ka_sa_sa_handler_not_eq_SIG_IGN[label="force_default_true_or_ka_sa_sa_handler_not_eq_SIG_IGN"];
                set_ka_sa_sa_handler_SIG_DFL[label="set_ka_sa_sa_handler_SIG_DFL"];
                set_ka_sa_sa_flags_0[label="set_ka_sa_sa_flags_0"];
                sigemptyset_ka_sa_sa_mask[label="sigemptyset_ka_sa_sa_mask"];
                inc_ka[label="inc_ka"];
        }

        subgraph cluster_block_all_signals{
                label="void block_all_signals(int (*notifier)(void *priv), void *priv, sigset_t *mask)";
                lock_current_sighand_siglock[label="lock_current_sighand_siglock"];
                set_current_notifier_mask_mask[label="set_current_notifier_mask_mask"];
                set_current_notifier_data_priv[label="set_current_notifier_data_priv"];
                set_current_notifier_notifier[label="set_current_notifier_notifier"];
                unlock_current_sighand_siglock[label="unlock_current_sighand_siglock"];
        }

        subgraph cluster_unblock_all_signals{
                label="void unblock_all_signals(void)";
                lock_current_sighand_siglock[label="lock_current_sighand_siglock"];
                clear_current_notifier[label="clear_current_notifier"];
                clear_current_notifier_data[label="clear_current_notifier_data"];
                recalc_sigpending[label="recalc_sigpending"];
        }

        subgraph cluster_collect_signal{
                label="static inline int collect_signal(int sig, struct sigpending *list, siginfo_t *info)";
                sigismember_list_signal_sig_null[label="sigismember_list_signal_sig_null"];
                return_0[label="return_0"];
                list_for_each_entry_q_list_list_list[label="list_for_each_entry_q_list_list_list"];
                q_info_si_signo_eq_sig[label="q_info_si_signo_eq_sig"];
                first_not_null[label="first_not_null"];
                set_still_pending_1[label="set_still_pending_1"];
                set_first_q[label="set_first_q"];
                first_not_null[label="first_not_null"];
                list_del_init_first_list[label="list_del_init_first_list"];
                copy_siginfo_info_first_info[label="copy_siginfo_info_first_info"];
                __sigqueue_free_first[label="__sigqueue_free_first"];
                still_pending_null[label="still_pending_null"];
                sigdelset_list_signal_sig[label="sigdelset_list_signal_sig"];
                sigdelset_list_signal_sig_1[label="sigdelset_list_signal_sig_1"];
                set_info_signo_sig[label="set_info_signo_sig"];
                set_info_errno_0[label="set_info_errno_0"];
                set_info_si_code_0[label="set_info_si_code_0"];
                set_info_si_pid_0[label="set_info_si_pid_0"];
                set_info_si_uid_0[label="set_info_si_uid_0"];
                return_1[label="return_1"];
        }

        subgraph cluster____dequeue_signal{
                label="static int __dequeue_signal(struct sigpending *pending, sigset_t *mask,";
                sigismember_pending_signal_SIGKILL_not_null[label="sigismember_pending_signal_SIGKILL_not_null"];
                sigismemeber_mask_SIGKILL_null[label="sigismemeber_mask_SIGKILL_null"];
                set_sig_SIGKILL[label="set_sig_SIGKILL"];
                sig_null[label="sig_null"];
                next_signal_Pending_mask[label="next_signal_Pending_mask"];
                sig_not_null[label="sig_not_null"];
                current_notifier[label="current_notifier"];
                sigismember_current_notifier_mask_sig[label="sigismember_current_notifier_mask_sig"];
                current_notifier_reuturn_not_null[label="current_notifier_reuturn_not_null"];
                clear_thread_flag_TIF_SIGPENDING[label="clear_thread_flag_TIF_SIGPENDING"];
                return_0[label="return_0"];
                collect_signal_sig_pendig_info[label="collect_signal_sig_pendig_info"];
                set_sig_0[label="set_sig_0"];
                recalc_sigpending[label="recalc_sigpending"];
                return_sig[label="return_sig"];
        }

        subgraph cluster_rm_from_queue{
                label="static int rm_from_queue(unsigned long mask, struct sigpending *s)";
                sigtestsetmask_s_signal_mask[label="sigtestsetmask_s_signal_mask"];
                return_0[label="return_0"];
                sigdelsetmask_s_signal_mask[label="sigdelsetmask_s_signal_mask"];
                list_for_each_entry_safe_q_n_s_list_list[label="list_for_each_entry_safe_q_n_s_list_list"];
                q_info_si_signo_small_SIGRTMIN_and_mask_and_sigmask_q_info_si_signo_not_null[label="q_info_si_signo_small_SIGRTMIN_and_mask_and_sigmask_q_info_si_signo_not_null"];
                list_del_init_q_list[label="list_del_init_q_list"];
                __sigqueue_free_q[label="__sigqueue_free_q"];
                return_1[label="return_1"];
        }

        subgraph cluster_check_kill_permission{
                label="static int check_kill_permission(int sig, struct siginfo *info, struct task_struct *t)";
                set_error_EINVAL[label="set_error_EINVAL"];
                valid_signal_sig_null[label="valid_signal_sig_null"];
                return_error[label="return_error"];
                set_error_EPERM[label="set_error_EPERM"];
                info_null_or_info_not_eq_1_and_info_not_eq_2_and_SI_FROMUSER_info_and_sig_not_eq_SIGCONT_or_current_signal_session_not_eq_t_signal_session_and_current_euid_xor_t_suid_and_current_euid_xor_t_uid_and_current_uid_xor_t_suid_and_current_uid_xor_t_uid_and_capable_CAP_KILL_null[label="info_null_or_info_not_eq_1_and_info_not_eq_2_and_SI_FROMUSER_info_and_sig_not_eq_SIGCONT_or_current_signal_session_not_eq_t_signal_session_and_current_euid_xor_t_suid_and_current_euid_xor_t_uid_and_current_uid_xor_t_suid_and_current_uid_xor_t_uid_and_capable_CAP_KILL_null"];
                return_error[label="return_error"];
                return_security_task_kill_t_info_sig[label="return_security_task_kill_t_info_sig"];
        }

        subgraph cluster_zap_other_threads{
                label="void zap_other_threads(struct task_struct *p)";
                set_p_signall_flags_SIGNAL_GROUP_EXIT[label="set_p_signall_flags_SIGNAL_GROUP_EXIT"];
                set_p_signal_group_stop_count_0[label="set_p_signal_group_stop_count_0"];
                thread_group_empty_p[label="thread_group_empty_p"];
                return[label="return"];
                for_t_next_thread_p[label="for_t_next_thread_p"];
                t_exit_state_not_null[label="t_exit_state_not_null"];
                t_not_eq_p_group_leader[label="t_not_eq_p_group_leader"];
                set_t_exit_signal_neg_1[label="set_t_exit_signal_neg_1"];
                sigaddset_t_pending_signal_SIGKILL[label="sigaddset_t_pending_signal_SIGKILL"];
                rm_from_queue_SIG_KERNEL_STOP_MASK_t_pending[label="rm_from_queue_SIG_KERNEL_STOP_MASK_t_pending"];
                signal_wake_up_t_1[label="signal_wake_up_t_1"];
        }

        subgraph cluster_sigqueue_free{
                label="void sigqueue_free(struct sigqueue *q)";

                list_empty_q_list_null[label="list_empty_q_list_null"];
                lock_tasklist_lock[label="lock_tasklist_lock"];
                lock_q_lock[label="lock_q_lock"];
                list_empty_q_list_null[label="list_empty_q_list_null"];
                list_del_init_q_list[label="list_del_init_q_list"];
                unlock_q_lock[label="unlock_q_lock"];
                unlock_tsklist_lock[label="unlock_tsklist_lock"];
                clear_q_flags_SIGQUEUE_PREALLOC[label="clear_q_flags_SIGQUEUE_PREALLOC"];
                __sigqueue_free_q[label="__sigqueue_free_q"];
        }

        subgraph cluster_send_sigqueue{
                label="int send_sigqueue(int sig, struct sigqueue *q, struct task_struct *p)";
                lock_tasklist_lock[label="lock_tasklist_lock"];
                lock_p_sighand_siglock[label="lock_p_sighand_siglock"];
                list_empty_q_list_null[label="list_empty_q_list_null"];
                q_info_si_code_not_eq_SI_TIMER[label="q_info_si_code_not_eq_SI_TIMER"];
                BUG[label="BUG"];
                inc_q_info_si_overrun[label="inc_q_info_si_overrun"];
                sig_ignored_p_sig[label="sig_ignored_p_sig"];
                set_ret_1[label="set_ret_1"];
                set_q_lock_p_sighand_siglock[label="set_q_lock_p_sighand_siglock"];
                list_add_tail_q_list_p_pending_list[label="list_add_tail_q_list_p_pending_list"];
                sigaddset_p_pending_signal_sig[label="sigaddset_p_pending_signal_sig"];
                sigismember_p_blocked_sig_null[label="sigismember_p_blocked_sig_null"];
                signal_wake_up_p_sig_eq_SIGKILL[label="signal_wake_up_p_sig_eq_SIGKILL"];
                unlock_p_sighand_siglock[label="unlock_p_sighand_siglock"];
                unlock_tasklist_lock[label="unlock_tasklist_lock"];
                return_ret[label="return_ret"];
        }

        subgraph cluster_send_group_sigqueue{
                label="int send_group_sigqueue(int sig, struct sigqueue *q, struct task_struct *p)";
                lock_tasklist_lock[label="lock_tasklist_lock"];
                lock_p_sighand_siglock[label="lock_p_sighand_siglock"];
                handle_stop_signal_sig_p[label="handle_stop_signal_sig_p"];
                sig_ignored_p_sig[label="sig_ignored_p_sig"];
                set_ret_1[label="set_ret_1"];
                list_empty_q_list_null[label="list_empty_q_list_null"];
                q_info_si_code_eq_SI_TIMER[label="q_info_si_code_eq_SI_TIMER"];
                BUG[label="BUG"];
                inc_q_info_si_overrun[label="inc_q_info_si_overrun"];
                set_q_lock_p_sighand_siglock[label="set_q_lock_p_sighand_siglock"];
                list_add_tail_q_list_p_signal_shared_pending_list[label="list_add_tail_q_list_p_signal_shared_pending_list"];
                sigaddset_p_signal_shared_pending_signal_sig[label="sigaddset_p_signal_shared_pending_signal_sig"];
                __group_complete_signal_sig_p[label="__group_complete_signal_sig_p"];
                unlock_p_sighand_siglock[label="unlock_p_sighand_siglock"];
                unlock_tasklist_lock[label="unlock_tasklist_lock"];
                return_ret[label="return_ret"];
        }

        subgraph cluster__wake_up_parent{
                label="static inline void __wake_up_parent(struct task_struct *p, struct task_struct *parent)";
                wake_up_interruptible_sync_parent_signal_wait_chldexit[label="wake_up_interruptible_sync_parent_signal_wait_chldexit"];
        }

        subgraph cluster_do_notify_parent{
                label="void do_notify_parent(struct task_struct *tsk, int sig)";
                set_info_si_signo_sig[label="set_info_si_signo_sig"];
                set_info_si_errno_0[label="set_info_si_errno_0"];
                set_info_si_pid_tsk_pid[label="set_info_si_pid_tsk_pid"];
                set_info_si_uid_tsk_uid[label="set_info_si_uid_tsk_uid"];
                set_info_si_utime_cputime_to_jiffies_cputime_add_tsk__utime_tsk_signal_utime[label="set_info_si_utime_cputime_to_jiffies_cputime_add_tsk__utime_tsk_signal_utime"];
                set_info_si_stime_cputime_to_jiffies_cputime_add_tsk__stime_tsk_signal_stime[label="set_info_si_stime_cputime_to_jiffies_cputime_add_tsk__stime_tsk_signal_stime"];
                set_info_si_status_tsk_exit_code_and_0x7f[label="set_info_si_status_tsk_exit_code_and_0x7f"];
                tsk_exit_code_and_0x80_not_null[label="tsk_exit_code_and_0x80_not_null"];
                set_info_si_code_CLD_DUMPED[label="set_info_si_code_CLD_DUMPED"];
                tsk_exit_code_and_0x7f[label="tsk_exit_code_and_0x7f"];
                set_info_si_code_CLD_KILLED[label="set_info_si_code_CLD_KILLED"];
                set_info_si_code_CLD_EXITED[label="info_si_code_CLD_EXITED"];
                set_info_si_status_tsk_exit_code_right_move_8[label="set_info_si_status_tsk_exit_code_right_move_8"];
                set_psig_tsk_parent_sighand[label="set_psig_tsk_parent_sighand"];
                lock_psig_siglock[label="lock_psig_siglock"];
                sig_eq_SIGCHLD_and_psig_action_SIGCHLD_sa_sa_handler_eq_SIG_IGN_or_psig_SIGCHLD_sa_sa_flags_and__SA_NOCLDWAIT[label="sig_eq_SIGCHLD_and_psig_action_SIGCHLD_sa_sa_handler_eq_SIG_IGN_or_psig_SIGCHLD_sa_sa_flags_and__SA_NOCLDWAIT"];
                set_tsk_exit_signal_neg_1[label="set_tsk_exit_signal_neg_1"];
                psig_action_SIGCHLD_sa_sa_handler_eq_SIG_IGN[label="psig_action_SIGCHLD_sa_sa_handler_eq_SIG_IGN"];
                set_sig_0[label="set_sig_0"];
                valid_signal_sig_and_sig_great_0[label="valid_signal_sig_and_sig_great_0"];
                __group_send_sig_info_sig_info_tsk_parent[label="__group_send_sig_info_sig_info_tsk_parent"];
                __wake_up_parent_tsk_tsk_parent[label="__wake_up_parent_tsk_tsk_parent"];
                unlock_psig_siglock[label="unlock_psig_siglock"];
        }

        subgraph cluster_do_notify_parent_cldstop{
                label="static void do_notify_parent_cldstop(struct task_struct *tsk, struct task_struct *parent, int why)";
                set_info_si_signo_SIGCHLD[label="set_info_si_signo_SIGCHLD"];
                set_info_si_errno_0[label="set_info_si_errno_0"];
                set_info_si_pid_tsk_pid[label="set_info_si_pid_tsk_pid"];
                set_info_si_uid_tsk_uid[label="set_info_si_uid_tsk_uid"];
                set_info_si_utime_cutime_to_jiffies_tsk_utime[label="set_info_si_utime_cutime_to_jiffies_tsk_utime"];
                set_inffo_si_stime_cputime_to_jiffies_tsk_stime[label="set_inffo_si_stime_cputime_to_jiffies_tsk_stime"];
                set_info_si_code_why[label="set_info_si_code_why"];
                switch_why[label="switch_why"];
                case_CLD_CONTINUED[label="case_CLD_CONTINUED"];
                set_info_si_status_SIGCONT[label="set_info_si_status_SIGCONT"];
                case_CLD_STOPPED[label="case_CLD_STOPPED"];
                set_info_si_status_tsk_signal_group_exit_code_and_0x7f[label="set_info_si_status_tsk_signal_group_exit_code_and_0x7f"];
                case_CLD__TRAPPED[label="case_CLD__TRAPPED"];
                set_info_si_status_tsk_exit_code_and_0x7f[label="set_info_si_status_tsk_exit_code_and_0x7f"];
                set_sighand_parent_sighand[label="set_sighand_parent_sighand"];
                lock_sighand_siglock[label="lock_sighand_siglock"];
                sighand_action_SIGCHLD_sa_sa_handler_SIG_IGN_and_sighand_action_SIGCHLD_sa_sa_flags_SANOCLDSTOP_set[label="sighand_action_SIGCHLD_sa_sa_handler_SIG_IGN_and_sighand_action_SIGCHLD_sa_sa_flags_SANOCLDSTOP_set"];
                __group_send_sig_info_SIGCHLD_info_parent[label="__group_send_sig_info_SIGCHLD_info_parent"];
                __wake_up_parent_tsk_parent[label="__wake_up_parent_tsk_parent"];
                unlock_sighand_siglock[label="unlock_sighand_siglock"];
        }

        subgraph cluster_ptrace_stop{
                label="static void ptrace_stop(int exit_code, int nostop_code, siginfo_t *info)";
                current_signal_group_stop_count_great_0[label="current_signal_group_stop_count_great_0"];
                dec_current_signal_group_stop_count[label="dec_current_signal_group_stop_count"];
                set_current_last_siginfo_info[label="set_current_last_siginfo_info"];
                set_current_exit_code_exit_code[label="set_current_exit_code_exit_code"];
                set_current_state_TASK_TRACED[label="set_current_state_TASK_TRACED"];
                unlock_current_sighand_siglock[label="unlock_current_sighand_siglock"];
                lock_tasklist_lock[label="lock_tasklist_lock"];
                current_ptrace_PT_PTRACED_set_and_current_parent_not_current_real_parent_or_current_ptrace_PT_ATTACHED_not_null_and_current_parent_signal_not_eq_current_signal_or_current_signal_flags_SIGNAL_GROUP_EXIT_null[label="current_ptrace_PT_PTRACED_set_and_current_parent_not_current_real_parent_or_current_ptrace_PT_ATTACHED_not_null_and_current_parent_signal_not_eq_current_signal_or_current_signal_flags_SIGNAL_GROUP_EXIT_null"];
                do__notify_parent_cldstop_current_current_parent_CLD_TRAPPED[label="do__notify_parent_cldstop_current_current_parent_CLD_TRAPPED"];
                unlock_tasklist_lock[label="unlock_tasklist_lock"];
                schedule[label="schedule"];
                unlock_tasklist_lock[label="unlock_tasklist_lock"];
                set_current_state_TASK_RUNNING[label="set_current_state_TASK_RUNNING"];
                set_current_exit_code_nostop_code[label="set_current_exit_code_nostop_code"];
                lock_current_sighand_siglock[label="lock_current_sighand_siglock"];
                clear_current_last_siginfo[label="clear_current_last_siginfo"];
                recalc_sigpending[label="recalc_sigpending"];
        }

        subgraph cluster_ptrace_notify{
                label="void ptrace_notify(int exit_code)";
                memset_info_0[label="memset_info_0"];
                set_info_signo_SIGTRAP[label="set_info_signo_SIGTRAP"];
                set_info_si_code_exit_code[label="set_info_si_code_exit_code"];
                set_si_pid_current_pid[label="set_si_pid_current_pid"];
                set_info_uid_current_uid[label="set_info_uid_current_uid"];
                lock_current_sighand_siglock[label="lock_current_sighand_siglock"];
                ptrace_stop_exit_code_0_info[label="ptrace_stop_exit_code_0_info"];
                unlock_current_sighand_siglock[label="unlock_current_sighand_siglock"];
        }

        subgraph cluster_finish_stop{
                label="static void finish_stop(int stop_count)";
                stop_count_small_0_or_current_ptrace_PT_PTRACED_set[label="stop_count_small_0_or_current_ptrace_PT_PTRACED_set"];
                lock_tasklist_lock[label="lock_tasklist_lock"];
                do_notify_parent_cldstop_current_current_parent_CLD_STOPPED[label="do_notify_parent_cldstop_current_current_parent_CLD_STOPPED"];
                unlock_tasklist_lock[label="unlock_tasklist_lock"];
                stop_count_eq_0[label="stop_count_eq_0"];
                lock_tasklist_lock[label="lock_tasklist_lock"];
                do_notify_parent_cldstop_current_group_leader_current_group_leader_real_parent_CLD_STOPPED[label="do_notify_parent_cldstop_current_group_leader_current_group_leader_real_parent_CLD_STOPPED"];
                unlock_tasklist_lock[label="unlock_tasklist_lock"];
                schedule[label="schedule"];
                set_current_exit_code_0[label="set_current_exit_code_0"];
        }

        subgraph cluster_sys_restart_syscall{
                label="asmlinkage long sys_restart_syscall(void)";
                set_restart_current_thread_info_restart_block[label="set_restart_current_thread_info_restart_block"];
                return_restart_fn_restart[label="return_restart_fn_restart"];
        }

        subgraph cluster_do_no_restart_syscall{
                label="long do_no_restart_syscall(struct restart_block *param)";
                return_EINTR[label="return_EINTR"];
        }

        subgraph cluster_sys_rt_sigprocmask{
                label="asmlinkage long sys_rt_sigprocmask(int how, sigset_t __user *set, sigset_t __user *oset, size_t sigsetsize)";
                set_error_EINVAL[label="set_error_EINVAL"];
                sigsetsize_not_eq_sizeof_sigset_t[label="sigsetsize_not_eq_sizeof_sigset_t"];
                set_not_null[label="set_not_null"];
                set_error_EFAULT[label="set_error_EFAULT"];
                copy_from_user_new_set_set[label="copy_from_user_new_set_set"];
                out[label="out"];
                sigdelsetmask_new_set_sigmask_SIGKILL_or_sigmask_SIGSTOP[label="sigdelsetmask_new_set_sigmask_SIGKILL_or_sigmask_SIGSTOP"];
                set_error_sigprocmask_how_new_sset_old_set[label="set_error_sigprocmask_how_new_sset_old_set"];
                error_not_null[label="error_not_null"];
                oset_not_null[label="oset_not_null"];
                set_old[label="set_old"];
                oset_not_null[label="oset_not_null"];
                lock_current_sighand_siglock[label="lock_current_sighand_siglock"];
                set_old_set_current_blocked[label="set_old_set_current_blocked"];
                unlock_current_sighand_siglock[label="unlock_current_sighand_siglock"];
                set_error_EFAULT[label="set_error_EFAULT"];
                copy_to_user_oset_old_set[label="copy_to_user_oset_old_set"];
                set_error_0[label="set_error_0"];
                return_error[label="return_error"];
        }

        subgraph cluster_sys_rt_sigpending{
                label="asmlinkage long sys_rt_sigpending(sigset_t __user *set, size_t sigsetsize)";
                return_do_sigpending_set_sigsetsize[label="return_do_sigpending_set_sigsetsize"];
        }

        subgraph cluster_copy_siginfo_to_user{
                label="int copy_siginfo_to_user(siginfo_t __user *to, siginfo_t *from)";
                access_ok_VERIFY_WRITE_to_null[label="access_ok_VERIFY_WRITE_to_null"];
                return_EFAULT[label="return_EFAULT"];
                from_si_code_small_0[label="from_si_code_small_0"];
                return___copy_to_user_to_from[label="return___copy_to_user_to_from"];
                set_err___put_user_from_si_siggno_to_si_signo[label="set_err___put_user_from_si_siggno_to_si_signo"];
                err_self_or___put_user_from_si_errno_to_si_errno[label="err_self_or___put_user_from_si_errno_to_si_errno"];
                err_self_or___put_user_from_si_code_to_si_code[label="err_self_or___put_user_from_si_code_to_si_code"];
                switch_from_si_code_and___SI_MASK[label="switch_from_si_code_and___SI_MASK"];
                case___SI_KILL[label="case___SI_KILL"];
                err_self_or___put_user_from_si_pid_to_si_pid[label="err_self_or___put_user_from_si_pid_to_si_pid"];
                err_self_or___put_user_from_si_uid_to_si_uid[label="err_self_or___put_user_from_si_uid_to_si_uid"];
                case___SI_TIMER[label="case___SI_TIMER"];
                err_self_or___put_user_from_si_tid_to_si_tid[label="err_self_or___put_user_from_si_tid_to_si_tid"];
                err_self_or___put_user_from_si_overrun_to_si_overrun[label="err_self_or___put_user_from_si_overrun_to_si_overrun"];
                err_self_or___put_user_form_si_ptr_to_si_ptr[label="err_self_or___put_user_form_si_ptr_to_si_ptr"];
                case__SI_POLL[label="case__SI_POLL"];
                err_self_set___put_user_from_si_band_to_si_band[label="err_self_set___put_user_from_si_band_to_si_band"];
                err_self_or___put_user_from_si_fd_to_si_fd[label="err_self_set___put_user_from_si_fd_to_si_fd"];
                case___SI_FAULT[label="case___SI_FAULT"];
                err_self_or___put_user_from_si_addr_to_si_addr[label="err_self_or___put_user_from_si_addr_to_si_addr"];
                err_self_or___put_user_from_si_trapno_to_si_trapno[label="err_self_or___put_user_from_si_trapno_to_si_trapno"];
                case___SI_CHLD[label="case___SI_CHLD"];
                err_self_or___put_user_from_si_pid_to_si_pid[label="err_self_or___put_user_from_si_pid_to_si_pid"];
                err_self_or___put_user_from_si_uid_to_si_uid[label="err_self_or___put_user_from_si_uid_to_si_uid"];
                err_self_or___put_user_from_si_status_to_si_status[label="err_self_or___put_user_from_si_status_to_si_status"];
                err_self_or___put_user_from_si_utime_to_si_utime[label="err_self_or___put_user_from_si_utime_to_si_utime"];
                err_self_or___put_user_from_si_stime_to_si_stime[label="err_self_or___put_user_from_si_stime_to_si_stime"];
                case___SI_RT[label="case___SI_RT"];
                case___SI_MESGQ[label="case___SI_MESGQ"];
                err_self_or___put_user_from_si_pid_to_si_pid[label="err_self_or___put_user_from_si_pid_to_si_pid"];
                err_self_or___put_user_from_si_uid_to_si_uid[label="err_self_or___put_user_from_si_uid_to_si_uid"];
                err_self_or___put_user_form_si_ptr_to_si_ptr[label="err_self_or___put_user_form_si_ptr_to_si_ptr"];
                err_self_or___put_user_from_si_pid_to_si_pid[label="err_self_or___put_user_from_si_pid_to_si_pid"];
                err_self_or___put_user_from_si_uid_to_si_uid[label="err_self_or___put_user_from_si_uid_to_si_uid"];
                return_err[label="return_err"];
        }

        subgraph cluster_sys_rt_sigtimedwait{
                label="asmlinkage long sys_rt_sigtimedwait(const sigset_t __user *uthese, siginfo_t __user *uinfo, const struct timespec __user *uts, size_t sigsetsize)";
                sigsetsize_not_eq_sizeof_sigset_t[label="sigsetsize_not_eq_sizeof_sigset_t"];
                return_EINVAL[label="return_EINVAL"];
                copy_from_user_these_uthese[label="copy_from_user_these_uthese"];
                return_EFAULT[label="return_EFAULT"];
                sigdelsetmask_thest_sigmask_SIGKILL_or_sigmask_SIGSTOP[label="sigdelsetmask_thest_sigmask_SIGKILL_or_sigmask_SIGSTOP"];
                signotset_these[label="signotset_these"];
                uts_not_null[label="uts_not_null"];
                copy_from_user_ts_uts[label="copy_from_user_ts_uts"];
                return_EFAULT[label="return_EFAULT"];
                ts_tv_nsec_not_small_1000000000L_or_ts_tv_nsec_small_or_ts_tv_sec_small_0[label="ts_tv_nsec_not_small_1000000000L_or_ts_tv_nsec_small_or_ts_tv_sec_small_0"];
                return_EINVAL[label="return_EINVAL"];
                lock_current_sighand_siglock[label="lock_current_sighand_siglock"];
                set_sig_dequeue_signal_current_these_info[label="set_sig_dequeue_signal_current_these_info"];
                sig_null[label="sig_null"];
                set_timeout_MAX_SCHEDULE_TIMEOUT[label="set_timeout_MAX_SCHEDULE_TIMEOUT"];
                uts_not_null[label="uts_not_null"];
                set_timeout_timespec_to_jiffies_ts_add_ts_tv_sec_or_ts_tv_nsec[label="set_timeout_timespec_to_jiffies_ts_add_ts_tv_sec_or_ts_tv_nsec"];
                timeout_not_null[label="timeout_not_null"];
                set_current_real_blocked_current_blocked[label="set_current_real_blocked_current_blocked"];
                sigaddsets_current_blocked_current_blocked_these[label="sigaddsets_current_blocked_current_blocked_these"];
                recalc_sigpending[label="recalc_sigpending"];
                unlock_current_sighand_siglock[label="unlock_current_sighand_siglock"];
                set_current_state_TASK_INTERRUPTIBLE[label="set_current_state_TASK_INTERRUPTIBLE"];
                set_timeout_schedule_timeout_timeout[label="set_timeout_schedule_timeout_timeout"];
                current_flags_PF_FREEZE_set[label="current_flags_PF_FREEZE_set"];
                refrigerator_PF_FREEZE[label="refrigerator_PF_FREEZE"];
                lock_current_sighand_siglock[label="lock_current_sighand_siglock"];
                set_sig_dequeue_signal_current_these_info[label="set_sig_dequeue_signal_current_these_info"];
                set_current_blocked_current_real_blocked[label="set_current_blocked_current_real_blocked"];
                siginitset_current_real_blocked_0[label="siginitset_current_real_blocked_0"];
                recalc_sigpending[label="recalc_sigpending"];
                unlock_current_sighand_siglock[label="unlock_current_sighand_siglock"];
                sig_not_null[label="sig_not_null"];
                set_ret_sig[label="set_ret_sig"];
                uinfo_not_null[label="uinfo_not_null"];
                copy_siginfo_to_user_uinfo_info[label="copy_siginfo_to_user_uinfo_info"];
                set_ret_EFAULT[label="set_ret_EFAULT"];
                set_ret_EAGIAN[label="set_ret_EAGIAN"];
                timeout_not_null[label="timeout_not_null"];
                set_ret_EINTR[label="set_ret_EINTR"];
                return_ret[label="return_ret"];
        }

        subgraph cluster_do_sigaltstack{
                label="int do_sigaltstack (const stack_t __user *uss, stack_t __user *uoss, unsigned long sp)";
                uoss_not_null[label="uoss_not_null"];
                set_oss_ss_sp_current_sas_ss_sp[label="set_oss_ss_sp_current_sas_ss_sp"];
                set_oss_ss_size_current_sas_ss_size[label="set_oss_ss_size_current_sas_ss_size"];
                set_oss_ss_flags_sas_ss_flags_sp[label="set_oss_ss_flags_sas_ss_flags_sp"];
                uss_not_null[label="uss_not_null"];
                set_error_EFAULT[label="set_error_EFAULT"];
                access_ok_VERIFY_READ_uss_or___get_user_ss_sp_uss_ss_sp_or___get_user_ss_flags_uss_ss_flags_or___get_user_ss_size_uss_ss_size[label="access_ok_VERIFY_READ_uss_or___get_user_ss_sp_uss_ss_sp_or___get_user_ss_flags_uss_ss_flags_or___get_user_ss_size_uss_ss_size"];
                out[label="out"];
                set_error_EPERM[label="set_error_EPERM"];
                on_sig_stack_sp[label="on_sig_stack_sp"];
                set_error_EINVAL[label="set_error_EINVAL"];
                ss_flags_not_eq_SS_DISABLE_and_ss_flags_not_eq_SS_ONSTACK_and_ss_flags_not_eq_0[label="ss_flags_not_eq_SS_DISABLE_and_ss_flags_not_eq_SS_ONSTACK_and_ss_flags_not_eq_0"];
                ss_flags_not_eq_SS_DISABLE[label="ss_flags_not_eq_SS_DISABLE"];
                set_ss_size_0[label="set_ss_size_0"];
                clear_ss_sp[label="clear_ss_sp"];
                set_error_ENOMEM[label="set_error_ENOMEM"];
                ss_size_small_MINSIGSTKSZ[label="ss_size_small_MINSIGSTKSZ"];
                set_current_sas_ss_sp_ss_sp[label="set_current_sas_ss_sp_ss_sp"];
                set_current_sas_ss_size_ss_size[label="set_current_sas_ss_size_ss_size"];
                uoss_not_null[label="uoss_not_null"];
                set_error_EFAULT[label="set_error_EFAULT"];
                copy_to_user_uoss_oss[label="copy_to_user_uoss_oss"];
                set_error_0[label="set_error_0"];
                return_error[label="return_error"];
        }
}
