digraph open_c{
        subgraph cluster_vfs_statfs{
                label="int vfs_statfs(struct super_block *sb, struct kstatfs *buf)
";
                set_retval_ENODEV[label="set_retval_ENODEV"];
                sb_true[label="sb_true"];
                set_retval_ENOSYS[label="set_retval_ENOSYS"];
                sb_s_op_statfs_true[label="sb_s_op_statfs_true"];
                memset_buf_0[label="memset_buf_0"];
                set_retval_security_sb_statfs_sb[label="set_retval_security_sb_statfs_sb"];
                retval_true[label="retval_true"];
                return_retval[label="return_retval"];
                set_retval_sb_s_op_statfs_sb_buf[label="set_retval_sb_s_op_statfs_sb_buf"];
                retval_eq_0_and_buf_frsize_eq_0[label="retval_eq_0_and_buf_frsize_eq_0"];
                set_buf_f_frsize_buf_f_bsize[label="set_buf_f_frsize_buf_f_bsize"];
                return_retval[label="return_retval"];
        }

        subgraph cluster_vfs_statfs_native{
                label="static int vfs_statfs_native(struct super_block *sb, struct statfs *buf)
";
                set_retval_vfs_statfs_sb_st[label="set_retval_vfs_statfs_sb_st"];
                retval_true[label="retval_true"];
                return_retval[label="return_retval"];
                sizeof_buf_eq_sizeof_st[label="sizeof_buf_eq_sizeof_st"];
                memcpy_buf_st[label="memcpy_buf_st"];
                sizeof_buf_f_blocks_eq_4[label="sizeof_buf_f_blocks_eq_4"];
                st_f_blocks_or_st_f_bfree_or_st_f_bavail_and_0xffffffff00000000ULL_true[label="st_f_blocks_or_st_f_bfree_or_st_f_bavail_and_0xffffffff00000000ULL_true"];
                return_EOVERFLOW[label="return_EOVERFLOW"];
                st_f_files_not_eq_neg1_and_st_f_files_and_0xffffffff00000000ULL_true[label="st_f_files_not_eq_neg1_and_st_f_files_and_0xffffffff00000000ULL_true"];
                return_EOVERFLOW[label="return_EOVERFLOW"];
                st_f_ffree_not_eq_neg1_and_st_f_ffree_and_0xffffffff00000000ULL_true[label="st_f_ffree_not_eq_neg1_and_st_f_ffree_and_0xffffffff00000000ULL_true"];
                return_EOVERFLOW[label="return_EOVERFLOW"];
                set_buf_f_type_st_f_type[label="set_buf_f_type_st_f_type"];
                set_buf_f_bsize_st_f_bsize[label="set_buf_f_bsize_st_f_bsize"];
                set_buf_f_blocks_st_f_blocks[label="set_buf_f_blocks_st_f_blocks"];
                set_buf_f_bfree_st_f_bfree[label="set_buf_f_bfree_st_f_bfree"];
                set_buf_f_bavail_st_f_bavail[label="set_buf_f_bavail_st_f_bavail"];
                set_buf_f_files_st_f_files[label="set_buf_f_files_st_f_files"];
                set_buf_f_ffree_st_f_ffree[label="set_buf_f_ffree_st_f_ffree"];
                set_buf_f_fsid_st_f_fsid[label="set_buf_f_fsid_st_f_fsid"];
                set_buf_f_namelen_st_f_namelen[label="set_buf_f_namelen_st_f_namelen"];
                set_buf_f_frsize_st_ff_frsize[label="set_buf_f_frsize_st_ff_frsize"];
                memset_buf_f_spare_0[label="memset_buf_f_spare_0"];
                return_0[label="return_0"];
        }

        subgraph cluster_vfs_statfs64{
                label="static int vfs_statfs64(struct super_block *sb, struct statfs64 *buf)
";
                set_retval_vfs_statfs_sb_st[label="set_retval_vfs_statfs_sb_st"];
                retval_true[label="retval_true"];
                return_retval[label="return_retval"];
                sizeof_buf_eq_sizeof_st[label="sizeof_buf_eq_sizeof_st"];
                memcpy_buf_st[label="memcpy_buf_st"];
                set_buf_f_type_st_f_type[label="set_buf_f_type_st_f_type"];
                set_buf_f_bsize_st_f_bsize[label="set_buf_f_bsize_st_f_bsize"];
                set_buf_f_blocks_st_f_blocks[label="set_buf_f_blocks_st_f_blocks"];
                set_buf_f_bfree_st_f_bfree[label="set_buf_f_bfree_st_f_bfree"];
                set_buf_f_bavail_st_f_bavail[label="set_buf_f_bavail_st_f_bavail"];
                set_buf_f_files_st_f_files[label="set_buf_f_files_st_f_files"];
                set_buf_f_ffree_st_f_ffree[label="set_buf_f_ffree_st_f_ffree"];
                set_buf_f_fsid_st_f_fsid[label="set_buf_f_fsid_st_f_fsid"];
                set_buf_f_namelen_st_f_namelen[label="set_buf_f_namelen_st_f_namelen"];
                set_buf_f_frsize_st_ff_frsize[label="set_buf_f_frsize_st_ff_frsize"];
                memset_buf_f_spare_0[label="memset_buf_f_spare_0"];
                return_0[label="return_0"];
        }

        subgraph cluster_sys_statfs{
                label="asmlinkage long sys_statfs(const char __user * path, struct statfs __user * buf)
";
                set_error_user_path_walk_path_nd[label="set_error_user_path_walk_path_nd"];
                error_false[label="error_false"];
                set_error_vfs_statfs_native_nd_dentry_d_inode_i_sb_tmp[label="set_error_vfs_statfs_native_nd_dentry_d_inode_i_sb_tmp"];
                error_false_and_copy_to_user_buf_tmp_true[label="error_false_and_copy_to_user_buf_tmp_true"];
                set_error_EFAULT[label="set_error_EFAULT"];
                path_release_nd[label="path_release_nd"];
                return_error[label="return_error"];
        }

        subgraph cluster_sys_statfs64{
                label="asmlinkage long sys_statfs64(const char __user *path, size_t sz, struct statfs64 __user *buf)
";
                set_error_user_path_walk_path_nd[label="set_error_user_path_walk_path_nd"];
                error_false[label="error_false"];
                set_error_vfs_statfs64_nd_dentry_d_inode_i_sb_tmp[label="set_error_vfs_statfs64_nd_dentry_d_inode_i_sb_tmp"];
                error_false_and_copy_to_user_buf_tmp_true[label="error_false_and_copy_to_user_buf_tmp_true"];
                set_error_EFAULT[label="set_error_EFAULT"];
                path_release_nd[label="path_release_nd"];
                return_error[label="return_error"];
        }

        subgraph cluster_sys_fstatfs{
                label="asmlinkage long sys_fstatfs(unsigned int fd, struct statfs __user * buf)
";
                set_error_EBADF[label="set_error_EBADF"];
                set_file_fget_fd[label="set_file_fget_fd"];
                file_false[label="file_false"];
                goto_out[label="goto_out"];
                set_error_vfs_statfs_native_file_f_dentry_d_inode_i_sb_tmp[label="set_error_vfs_statfs_native_file_f_dentry_d_inode_i_sb_tmp"];
                error_false_and_copy_to_user_buf_tmp_true[label="error_false_and_copy_to_user_buf_tmp_true"];
                set_error_EFAULT[label="set_error_EFAULT"];
                fput_file[label="fput_file"];
                return_error[label="return_error"];
        }

        subgraph cluster_sys_fstatfs64{
                label="asmlinkage long sys_fstatfs64(unsigned int fd, size_t sz, struct statfs64 __user *buf)
";
                set_error_EBADF[label="set_error_EBADF"];
                set_file_fget_fd[label="set_file_fget_fd"];
                file_false[label="file_false"];
                goto_out[label="goto_out"];
                set_error_vfs_statfs64_file_f_dentry_d_inode_i_sb_tmp[label="set_error_vfs_statfs64_file_f_dentry_d_inode_i_sb_tmp"];
                error_false_and_copy_to_user_buf_tmp_true[label="error_false_and_copy_to_user_buf_tmp_true"];
                set_error_EFAULT[label="set_error_EFAULT"];
                fput_file[label="fput_file"];
                return_error[label="return_error"];
        }

        subgraph cluster_do_truncate{
                label="int do_truncate(struct dentry *dentry, loff_t length)
";
                length_small_0[label="length_small_0"];
                return_EINVAL[label="return_EINVAL"];
                set_newattrs_ia_size_length[label="set_newattrs_ia_size_length"];
                set_newattrs_ia_valid_ATTR_SIZE_ATTR_CTIME[label="set_newattrs_ia_valid_ATTR_SIZE_ATTR_CTIME"];
                down_dentry_d_inode_i_sem[label="down_dentry_d_inode_i_sem"];
                set_err_notify_change_dentry_newattrs[label="set_err_notify_change_dentry_newattrs"];
                up_dentry_d_inode_i_sem[label="up_dentry_d_inode_i_sem"];
                return_err[label="return_err"];
        }

        subgraph cluster_do_sys_truncate{
                label="static inline long do_sys_truncate(const char __user * path, loff_t length)
";
                set_error_EINVAL[label="set_error_EINVAL"];
                length_small_0[label="length_small_0"];
                goto_out[label="goto_out"];
                set_error_user_path_walk_path_nd[label="set_error_user_path_walk_path_nd"];
                error_true[label="error_true"];
                goto_out[label="goto_out"];
                set_inode_nd_dentry_d_inode[label="set_inode_nd_dentry_d_inode"];
                set_error_EISDIR[label="set_error_EISDIR"];
                S_ISDIR_inode_i_mode_true[label="S_ISDIR_inode_i_mode_true"];
                goto_dput_and_out[label="goto_dput_and_out"];
                set_error_EINVAL[label="set_error_EINVAL"];
                S_ISREG_inode_i_mode_false[label="S_ISREG_inode_i_mode_false"];
                goto_dput_and_out[label="goto_dput_and_out"];
                set_error_permission_inode_MAY_WRITE_nd[label="set_error_permission_inode_MAY_WRITE_nd"];
                error_true[label="error_true"];
                goto_dput_and_out[label="goto_dput_and_out"];
                set_error_EROFS[label="set_error_EROFS"];
                IS_RDONLY_inode_true[label="IS_RDONLY_inode_true"];
                goto_dput_and_out[label="goto_dput_and_out"];
                set_error_EPERM[label="set_error_EPERM"];
                IS_IMMUTABLE_inode_true_or_IS_APPEND_inode_true[label="IS_IMMUTABLE_inode_true_or_IS_APPEND_inode_true"];
                goto_dput_and_out[label="goto_dput_and_out"];
                set_error_break_lease_inode_FMODE_WRITE[label="set_error_break_lease_inode_FMODE_WRITE"];
                error_true[label="error_true"];
                goto_dput_and_out[label="goto_dput_and_out"];
                set_error_get_write_access_inode[label="set_error_get_write_access_inode"];
                error_true[label="error_true"];
                goto_dput_and_out[label="goto_dput_and_out"];
                set_error_locks_verify_truncate_inode_NULL_length[label="set_error_locks_verify_truncate_inode_NULL_length"];
                error_false[label="error_false"];
                DQUOT_INIT_inode[label="DQUOT_INIT_inode"];
                set_error_do_truncate_nd_dentry_length[label="set_error_do_truncate_nd_dentry_length"];
                put_write_access_inode[label="put_write_access_inode"];
                path_release_nd[label="path_release_nd"];
                return_error[label="return_error"];
        }

        subgraph cluster_sys_truncate{
                label="asmlinkage long sys_truncate(const char __user * path, unsigned long length)
";
                return_do_sys_truncate_path_length[label="return_do_sys_truncate_path_length"];
        }

        subgraph cluster_do_sys_ftruncate{
                label="static inline long do_sys_ftruncate(unsigned int fd, loff_t length, int small)
";
                set_error_EINVAL[label="set_error_EINVAL"];
                length_small_0[label="length_small_0"];
                goto_out[label="goto_out"];
                set_error_EBADF[label="set_error_EBADF"];
                set_file_fget_fd[label="set_file_fget_fd"];
                file_false[label="file_false"];
                goto_out[label="goto_out"];
                file_f_flags_O_LARGEFILE_set[label="file_f_flags_O_LARGEFILE_set"];
                set_small_0[label="set_small_0"];
                set_dentry_file_f_dentry[label="set_dentry_file_f_dentry"];
                set_inode_dentry_d_inode[label="set_inode_dentry_d_inode"];
                set_error_EINVAL[label="set_error_EINVAL"];
                S_ISREG_inode_i_mode_false_or_file_f_mode_FMODE_WRITE_clear[label="S_ISREG_inode_i_mode_false_or_file_f_mode_FMODE_WRITE_clear"];
                goto_out_putf[label="goto_out_putf"];
                set_error_EINVAL[label="set_error_EINVAL"];
                small_true_and_length_great_MAX_NOLFS[label="small_true_and_length_great_MAX_NOLFS"];
                goto_out_putf[label="goto_out_putf"];
                set_error_EPERM[label="set_error_EPERM"];
                IS_APPEND_inode_true[label="IS_APPEND_inode_true"];
                goto_out_putf[label="goto_out_putf"];
                set_error_locks_verify_truncate_inode_file_length[label="set_error_locks_verify_truncate_inode_file_length"];
                error_false[label="error_false"];
                set_error_do_tracateee_dentry_length[label="set_error_do_tracateee_dentry_length"];
                fput_file[label="fput_file"];
                return_error[label="return_error"];
        }

        subgraph cluster_sys_ftruncate{
                label="asmlinkage long sys_ftruncate(unsigned int fd, unsigned long length)
";
                return_do_sys_ftruncate_fd_length_1[label="return_do_sys_ftruncate_fd_length_1"];
        }

        subgraph cluster_sys_truncate64{
                label="asmlinkage long sys_truncate64(const char __user * path, loff_t length)
";
                return_do_sys_truncate_path_length[label="return_do_sys_truncate_path_length"];
        }

        subgraph cluster_sys_ftruncate64{
                label="asmlinkage long sys_ftruncate64(unsigned int fd, loff_t length)
";
                return_do_sys_ftruncate_fd_length_0[label="return_do_sys_ftruncate_fd_length_0"];
        }

        subgraph cluster_sys_utime{
                label="asmlinkage long sys_utime(char __user * filename, struct utimbuf __user * times)
";
                set_error_user_path_walk_filename_nd[label="set_error_user_path_walk_filename_nd"];
                error_true[label="error_true"];
                goto_out[label="goto_out"];
                set_inode_nd_dentry_d_inode[label="set_inode_nd_dentry_d_inode"];
                set_error_EROFS[label="set_error_EROFS"];
                IS_RDONLY_inode_true[label="IS_RDONLY_inode_true"];
                goto_dput_and_out[label="goto_dput_and_out"];
                set_newattrs_ia_valid_ATTR_CTIME_ATTR_MTIME_ATTR_ATIME[label="set_newattrs_ia_valid_ATTR_CTIME_ATTR_MTIME_ATTR_ATIME"];
                times_true[label="times_true"];
                set_error_EPERM[label="set_error_EPERM"];
                IS_APPEND_inode_true_or_IS_IMMUTABLE_inode_true[label="IS_APPEND_inode_true_or_IS_IMMUTABLE_inode_true"];
                goto_dput_and_out[label="goto_dput_and_out"];
                set_error_get_user_newattrs_ia_atime_tv_sec_times_actime[label="set_error_get_user_newattrs_ia_atime_tv_sec_times_actime"];
                set_newattrs_ia_atime_tv_nsec_0[label="set_newattrs_ia_atime_tv_nsec_0"];
                error_false[label="error_false"];
                set_error_get_user_newattrs_ia_mtime_tv_sec_times_modtime[label="set_error_get_user_newattrs_ia_mtime_tv_sec_times_modtime"];
                set_newattrs_ia_mtime_tv_nsec_0[label="set_newattrs_ia_mtime_tv_nsec_0"];
                error_true[label="error_true"];
                goto_dput_and_not[label="goto_dput_and_not"];
                newattrs_ia_valid_self_or_ATTR_ATIME_SET_ATTR_MTIME_SET[label="newattrs_ia_valid_self_or_ATTR_ATIME_SET_ATTR_MTIME_SET"];
                set_error_EACCES[label="set_error_EACCES"];
                IS_IMMUTABLE_inode_true[label="IS_IMMUTABLE_inode_true"];
                goto_dput_and_out[label="goto_dput_and_out"];
                current_fsuid_not_eq_inode_i_uid_and_set_error_permission_inode_MAY_WRITE_nd_not_eq_0[label="current_fsuid_not_eq_inode_i_uid_and_set_error_permission_inode_MAY_WRITE_nd_not_eq_0"];
                goto_dput_and_out[label="goto_dput_and_out"];
                down_inode_i_sem[label="down_inode_i_sem"];
                set_error_notify_change_nd_dentry_newattrs[label="set_error_notify_change_nd_dentry_newattrs"];
                up_inode_i_sem[label="up_inode_i_sem"];
                path_release_nd[label="path_release_nd"];
                return_error[label="return_error"];
        }

        subgraph cluster_do_utimes{
                label="long do_utimes(char __user * filename, struct timeval * times)
";
                set_error_user_path_walk_filename_nd[label="set_error_user_path_walk_filename_nd"];
                error_true[label="error_true"];
                goto_out[label="goto_out"];
                set_inode_nd_dentry_d_inode[label="set_inode_nd_dentry_d_inode"];
                set_error_EROFS[label="set_error_EROFS"];
                IS_RDONLY_inode_true[label="IS_RDONLY_inode_true"];
                goto_dput_and_out[label="goto_dput_and_out"];
                set_newattrs_ia_valid_ATTR_CTIME_ATTR_MTIME_ATTR_ATIME[label="set_newattrs_ia_valid_ATTR_CTIME_ATTR_MTIME_ATTR_ATIME"];
                times_true[label="times_true"];
                set_error_EPERM[label="set_error_EPERM"];
                IS_APPEND_inode_true_or_IS_IMMUTABLE_inode_true[label="IS_APPEND_inode_true_or_IS_IMMUTABLE_inode_true"];
                goto_dput_and_out[label="goto_dput_and_out"];
                set_newattrs_ia_atime_tv_sec_times_0_tv_sec[label="set_newattrs_ia_atime_tv_sec_times_0_tv_sec"];
                set_newattrs_ia_atime_tv_nsec_times_0_tv_usec_multi_1000[label="set_newattrs_ia_atime_tv_nsec_times_0_tv_usec_multi_1000"];
                set_newattrs_ia_mtime_tv_sec_times_1_tv_sec[label="set_newattrs_ia_mtime_tv_sec_times_1_tv_sec"];
                set_newattrs_ia_mtime_tv_nsec_times_1_tv_usec_multi_1000[label="set_newattrs_ia_mtime_tv_nsec_times_1_tv_usec_multi_1000"];
                newattrs_ia_valid_self_or_ATTR_ATIME_SET_ATTR_MTIME_SET[label="newattrs_ia_valid_self_or_ATTR_ATIME_SET_ATTR_MTIME_SET"];
                set_error_EACCES[label="set_error_EACCES"];
                IS_IMMUTABLE_inode_true[label="IS_IMMUTABLE_inode_true"];
                goto_dput_and_out[label="goto_dput_and_out"];
                current_fsuid_not_eq_inode_i_uid_and_set_error_permission_inode_MAY_WRITE_nd_not_eq_0[label="current_fsuid_not_eq_inode_i_uid_and_set_error_permission_inode_MAY_WRITE_nd_not_eq_0"];
                goto_dput_and_out[label="goto_dput_and_out"];
                down_inode_i_sem[label="down_inode_i_sem"];
                set_error_notify_change_nd_dentry_newattrs[label="set_error_notify_change_nd_dentry_newattrs"];
                up_inode_i_sem[label="up_inode_i_sem"];
                path_release_nd[label="path_release_nd"];
                return_error[label="return_error"];
        }

        subgraph cluster_sys_utimes{
                label="asmlinkage long sys_utimes(char __user * filename, struct timeval __user * utimes)
 ";
                utimes_true_and_copy_from_user_times_utimes_true[label="utimes_true_and_copy_from_user_times_utimes_true"];
                return_EFAULT[label="return_EFAULT"];
                return_do_utimes_filename_times_or_NULL_decide_filename[label="return_do_utimes_filename_times_or_NULL_decide_filename"];
        }

        subgraph cluster_sys_access{
                label="asmlinkage long sys_access(const char __user * filename, int mode)
";
                mode_S_IRWXO_clear[label="mode_S_IRWXO_clear"];
                return_EINVAL[label="return_EINVAL"];
                set_old_fsuid_current_fsuid[label="set_old_fsuid_current_fsuid"];
                set_old_fsgid_current_fsgid[label="set_old_fsgid_current_fsgid"];
                set_old_cap_current_cap_effective[label="set_old_cap_current_cap_effective"];
                set_current_fsuid_current_uid[label="set_current_fsuid_current_uid"];
                set_current_fsgid_current_gid[label="set_current_fsgid_current_gid"];
                current_uid_true[label="current_uid_true"];
                cap_clear_current_cap_effective[label="cap_clear_current_cap_effective"];
                set_current_cap_effective_current_cap_permitted[label="set_current_cap_effective_current_cap_permitted"];
                set_res___user_walk_filename_LOOKUP_FOLLOW_LOOKUP_ACCESS_nd[label="set_res___user_walk_filename_LOOKUP_FOLLOW_LOOKUP_ACCESS_nd"];
                res_false[label="res_false"];
                set_res_permission_nd_dentry_d_inode_mode_nd[label="set_res_permission_nd_dentry_d_inode_mode_nd"];
                res_false_and_mode_S_IWOTH_set_and_IS_RDONLY_nd_dentry_d_inode_true_special_file_nd_dentry_d_inode_i_mode_false[label="res_false_and_mode_S_IWOTH_set_and_IS_RDONLY_nd_dentry_d_inode_true_special_file_nd_dentry_d_inode_i_mode_false"];
                set_res_EROFS[label="set_res_EROFS"];
                path_release_nd[label="path_release_nd"];
                set_current_fsuid_old_fsuid[label="set_current_fsuid_old_fsuid"];
                set_current_fsgid_old_fsgid[label="set_current_fsgid_old_fsgid"];
                set_current_cap_effective_old_cap[label="set_current_cap_effective_old_cap"];
                return_res[label="return_res"];
        }

        subgraph cluster_sys_chdir{
                label="asmlinkage long sys_chdir(const char __user * filename)
";
                set_error___user_walk_filename_LOOUP_FOLLOW_LOOKUP_DIRECTORY_nd[label="set_error___user_walk_filename_LOOUP_FOLLOW_LOOKUP_DIRECTORY_nd"];
                error_true[label="error_true"];
                goto_out[label="goto_out"];
                set_error_permission_nd_dentry_d_inode_MAY_EXEC_nd[label="set_error_permission_nd_dentry_d_inode_MAY_EXEC_nd"];
                error_true[label="error_true"];
                goto_dput_and_out[label="goto_dput_and_out"];
                set_fs_pwd_current_fs_nd_mnt_nd_dentry[label="set_fs_pwd_current_fs_nd_mnt_nd_dentry"];
                path_release_nd[label="path_release_nd"];
                return_error[label="return_error"];
        }

        subgraph cluster_sys_fchdir{
                label="asmlinkage long sys_fchdir(unsigned int fd)
";
                set_error_EBADF[label="set_error_EBADF"];
                set_file_fget_fd[label="set_file_fget_fd"];
                file_false[label="file_false"];
                goto_out[label="goto_out"];
                set_dentry_file_f_dentry[label="set_dentry_file_f_dentry"];
                set_mnt_file_f_vfsmnt[label="set_mnt_file_f_vfsmnt"];
                set_inode_dentry_d_inode[label="set_inode_dentry_d_inode"];
                set_error_ENOTDIR[label="set_error_ENOTDIR"];
                S_ISDIR_inode_i_mode_false[label="S_ISDIR_inode_i_mode_false"];
                goto_out_putf[label="goto_out_putf"];
                set_error_permission_inode_MAY_EXEC_NULL[label="set_error_permission_inode_MAY_EXEC_NULL"];
                error_false[label="error_false"];
                set_fs_pwd_current_fs_mnt_dentry[label="set_fs_pwd_current_fs_mnt_dentry"];
                fput_file[label="fput_file"];
                return_error[label="return_error"];
        }

        subgraph cluster_sys_chroot{
                label="asmlinkage long sys_chroot(const char __user * filename)
";
                set_error___user_walk_filename_LOOKUP_FOLLOW_LOOKUP_DIRECTORY_LOOKUP_NOALT_nd[label="set_error___user_walk_filename_LOOKUP_FOLLOW_LOOKUP_DIRECTORY_LOOKUP_NOALT_nd"];
                error_true[label="error_true"];
                goto_out[label="goto_out"];
                set_error_permission_nd_dentry_d_inode_MAY_EXEC_nd[label="set_error_permission_nd_dentry_d_inode_MAY_EXEC_nd"];
                error_true[label="error_true"];
                goto_dput_and_out[label="goto_dput_and_out"];
                set_error_EPERM[label="set_error_EPERM"];
                capable_CAP_SYS_CHROOT_false[label="capable_CAP_SYS_CHROOT_false"];
                goto_dput_and_out[label="goto_dput_and_out"];
                set_fs_root_current_fs_nd_mnt_nd_dentry[label="set_fs_root_current_fs_nd_mnt_nd_dentry"];
                set_fs_altroot[label="set_fs_altroot"];
                set_error_0[label="set_error_0"];
                path_release_nd[label="path_release_nd"];
                return_error[label="return_error"];
        }

        subgraph cluster_sys_fchmod{
                label="asmlinkage long sys_fchmod(unsigned int fd, mode_t mode)
";
                set_file_fget_fd[label="set_file_fget_fd"];
                file_false[label="file_false"];
                goto_out[label="goto_out"];
                set_dentry_file_f_dentry[label="set_dentry_file_f_dentry"];
                set_inode_dentry_d_inode[label="set_inode_dentry_d_inode"];
                set_err_EROFS[label="set_err_EROFS"];
                IS_RDONLY_inode_true[label="IS_RDONLY_inode_true"];
                goto_out_putf[label="goto_out_putf"];
                set_err_EPERM[label="set_err_EPERM"];
                IS_IMMUTABLE_inode_true_or_IS_APPEND_inode_true[label="IS_IMMUTABLE_inode_true_or_IS_APPEND_inode_true"];
                goto_out_putf[label="goto_out_putf"];
                down_inode_i_sem[label="down_inode_i_sem"];
                mode_eq_neg1[label="mode_eq_neg1"];
                set_mode_inode_i_mode[label="set_mode_inode_i_mode"];
                set_newattrs_ia_mode_mode_S_IALLUGO_set_or_inode_i_mode_clear_S_IALLUGO[label="set_newattrs_ia_mode_mode_S_IALLUGO_set_or_inode_i_mode_clear_S_IALLUGO"];
                set_newatrrs_valid_ATTR_ATTR_CTIME[label="set_newatrrs_valid_ATTR_ATTR_CTIME"];
                set_err_notify_change_dentry_newattrs[label="set_err_notify_change_dentry_newattrs"];
                up_inode_i_sem[label="up_inode_i_sem"];
                fput_file[label="fput_file"];
                return_err[label="return_err"];
        }

        subgraph cluster_sys_chmod{
                label="asmlinkage long sys_chmod(const char __user * filename, mode_t mode)
";
                set_error_user_path_walk_filename_nd[label="set_error_user_path_walk_filename_nd"];
                error_true[label="error_true"];
                goto_out[label="goto_out"];
                set_inode_nd_dentry_d_inode[label="set_inode_nd_dentry_d_inode"];
                set_error_EROFS[label="set_error_EROFS"];
                IS_RDONLY_inode_true[label="IS_RDONLY_inode_true"];
                goto_dput_and_out[label="goto_dput_and_out"];
                set_error_EPERM[label="set_error_EPERM"];
                IS_IMMUTABEL_inode_true_or_IS_APPEND_inode_true[label="IS_IMMUTABEL_inode_true_or_IS_APPEND_inode_true"];
                goto_dput_and_out[label="goto_dput_and_out"];
                down_inode_i_sem[label="down_inode_i_sem"];
                mode_eq_neg1[label="mode_eq_neg1"];
                set_mode_inode_i_mode[label="set_mode_inode_i_mode"];
                set_newattrs_ia_mode_mode_S_IALLUGO_set_or_inode_i_mode_S_IALLUGO_clear[label="set_newattrs_ia_mode_mode_S_IALLUGO_set_or_inode_i_mode_S_IALLUGO_clear"];
                set_newattrs_ia_valid_ATTR_MODE_ATTR_CTIME[label="set_newattrs_ia_valid_ATTR_MODE_ATTR_CTIME"];
                set_error_notify_change_nd_dentry_newattrs[label="set_error_notify_change_nd_dentry_newattrs"];
                up_inode_i_sem[label="up_inode_i_sem"];
                path_release_nd[label="path_release_nd"];
                return_error[label="return_error"];
        }

        subgraph cluster_chown_common{
                label="static int chown_common(struct dentry * dentry, uid_t user, gid_t group)
";
                set_error_ENOENT[label="set_error_ENOENT"];
                set_inode_dentry_d_inode_false[label="set_inode_dentry_d_inode_false"];
                goto_out[label="goto_out"];
                set_error_EROFS[label="set_error_EROFS"];
                IS_RDONLY_inode_true[label="IS_RDONLY_inode_true"];
                goto_out[label="goto_out"];
                set_error_EPERM[label="set_error_EPERM"];
                IS_IMMUTABLE_inode_true_or_IS_APPEND_inode_true[label="IS_IMMUTABLE_inode_true_or_IS_APPEND_inode_true"];
                goto_out[label="goto_out"];
                set_newattrs_ia_valid_ATTR_CTIME[label="set_newattrs_ia_valid_ATTR_CTIME"];
                user_not_eq_neg1[label="user_not_eq_neg1"];
                newattrs_ia_valid_self_or_ATTR_UID[label="newattrs_ia_valid_self_or_ATTR_UID"];
                set_newattrs_ia_uid_user[label="set_newattrs_ia_uid_user"];
                group_not_eq_neg1[label="group_not_eq_neg1"];
                newattrs_ia_valid_self_or_ATTR_GID[label="newattrs_ia_valid_self_or_ATTR_GID"];
                set_newattrs_ia_gid_group[label="set_newattrs_ia_gid_group"];
                S_ISDIR_inode_i_mode_false[label="S_ISDIR_inode_i_mode_false"];
                newattrs_ia_valid_self_or_ATTR_KILL_SUID_ATTR_KILL_SGID[label="newattrs_ia_valid_self_or_ATTR_KILL_SUID_ATTR_KILL_SGID"];
                down_inode_i_sem[label="down_inode_i_sem"];
                set_error_notify_change_dentry_newattrs[label="set_error_notify_change_dentry_newattrs"];
                up_inode_i_sem[label="up_inode_i_sem"];
                return_error[label="return_error"];
        }

        subgraph cluster_sys_chown{
                label="asmlinkage long sys_chown(const char __user * filename, uid_t user, gid_t group)
";
                set_error_user_path_walk_filename_nd[label="set_error_user_path_walk_filename_nd"];
                error_false[label="error_false"];
                set_error_chown_common_nd_dentry_user_group[label="set_error_chown_common_nd_dentry_user_group"];
                path_release_nd[label="path_release_nd"];
                return_error[label="return_error"];
        }

        subgraph cluster_sys_lchown{
                label="asmlinkage long sys_lchown(const char __user * filename, uid_t user, gid_t group)
";
                set_error_user_path_walk_link_filename_nd[label="set_error_user_path_walk_link_filename_nd"];
                error_false[label="error_false"];
                set_error_chown_common_nd_dentry_user_group[label="set_error_chown_common_nd_dentry_user_group"];
                path_release_nd[label="path_release_nd"];
                return_error[label="return_error"];
        }

        subgraph cluster_sys_fchown{
                label="asmlinkage long sys_fchown(unsigned int fd, uid_t user, gid_t group)
";
                set_file_fget_fd[label="set_file_fget_fd"];
                file_true[label="file_true"];
                set_error_chown_common_file_f_dentry_user_group[label="set_error_chown_common_file_f_dentry_user_group"];
                fput_file[label="fput_file"];
                return_error[label="return_error"];
        }

        subgraph cluster_*filp_open{
                label="struct file *filp_open(const char * filename, int flags, int mode)
";
                set_namei_flags_flags[label="set_namei_flags_flags"];
                namei_flags_add_1_OACCMODE_set[label="namei_flags_add_1_OACCMODE_set"];
                inc_namei_flags[label="inc_namei_flags"];
                namei_flags_O_TRUNC_set[label="namei_flags_O_TRUNC_set"];
                namei_flags_self_or_2[label="namei_flags_self_or_2"];
                set_error_open_namei_filename_namei_flags_mode_nd[label="set_error_open_namei_filename_namei_flags_mode_nd"];
                error_false[label="error_false"];
                return_dentry_open_nd_dentry_nd_mnt_flags[label="return_dentry_open_nd_dentry_nd_mnt_flags"];
                return_ERR_PTR_error[label="return_ERR_PTR_error"];
        }

        subgraph cluster_*dentry_open{
                label="struct file *dentry_open(struct dentry *dentry, struct vfsmount *mnt, int flags)
";
                set_error_ENFILE[label="set_error_ENFILE"];
                set_f_get_empty_filp[label="set_f_get_empty_filp"];
                f_false[label="f_false"];
                goto_cleanup_dentry[label="goto_cleanup_dentry"];
                set_f_f_flags_flags[label="set_f_f_flags_flags"];
                set_f_f_mode_flags_add_1_O_ACCMODE_set_or_FMODE_LSEEK_FMODE_READ_FMODE_PWRITE[label="set_f_f_mode_flags_add_1_O_ACCMODE_set_or_FMODE_LSEEK_FMODE_READ_FMODE_PWRITE"];
                set_inode_dentry_d_inode[label="set_inode_dentry_d_inode"];
                f_f_mode_FMODE_WRITE_set[label="f_f_mode_FMODE_WRITE_set"];
                set_error_get_write_access_inode[label="set_error_get_write_access_inode"];
                error_true[label="error_true"];
                goto_cleanup_file[label="goto_cleanup_file"];
                set_f_f_mapping_inode_i_mapping[label="set_f_f_mapping_inode_i_mapping"];
                set_f_dentry_dentry[label="set_f_dentry_dentry"];
                set_f_vfsmnt_mnt[label="set_f_vfsmnt_mnt"];
                set_f_pos_0[label="set_f_pos_0"];
                set_f_f_op_fops_get_inode_i_fop[label="set_f_f_op_fops_get_inode_i_fop"];
                file_move_f_inode_i_sb_s_files[label="file_move_f_inode_i_sb_s_files"];
                f_f_op_true_f_f_op_open_true[label="f_f_op_true_f_f_op_open_true"];
                set_error_f_f_op_open_inode_f[label="set_error_f_f_op_open_inode_f"];
                error_true[label="error_true"];
                goto_cleanup_all[label="goto_cleanup_all"];
                f_flags_clear_O_CREAT_O_EXCL_O_NOCTTY_O_TRUNC[label="f_flags_clear_O_CREAT_O_EXCL_O_NOCTTY_O_TRUNC"];
                file_ra_state_init_f_f_ra_f_f_mapping_host_i_mapping[label="file_ra_state_init_f_f_ra_f_f_mapping_host_i_mapping"];
                f_f_flags_O_DIRECT_set[label="f_f_flags_O_DIRECT_set"];
                f_f_mapping_a_ops_false_or_f_f_mapping_a_ops_direct_IO_false[label="f_f_mapping_a_ops_false_or_f_f_mapping_a_ops_direct_IO_false"];
                fput_f[label="fput_f"];
                set_f_ERR_PTR_EINVAL[label="set_f_ERR_PTR_EINVAL"];
                return_f[label="return_f"];
                fops_put_f_f_op[label="fops_put_f_f_op"];
                f_f_mode_FMODE_WRITE_set[label="f_f_mode_FMODE_WRITE_set"];
                put_write_access_inode[label="put_write_access_inode"];
                file_kill_f[label="file_kill_f"];
                clear_f_f_dentry[label="clear_f_f_dentry"];
                clear_f_f_vfsmnt[label="clear_f_f_vfsmnt"];
                put_filp_f[label="put_filp_f"];
                dput_dentry[label="dput_dentry"];
                mntput_mnt[label="mntput_mnt"];
                return_ERR_PTR_error[label="return_ERR_PTR_error"];
        }

        subgraph cluster_get_unused_fd{
                label="int get_unused_fd(void)
";
                set_file_current_files[label="set_file_current_files"];
                set_error_EMFILE[label="set_error_EMFILE"];
                lock_files_file_lock[label="lock_files_file_lock"];
                set_fd_find_next_zero_bit_files_open_fds_fds_bits_files_max_fdset_files_next_fd[label="set_fd_find_next_zero_bit_files_open_fds_fds_bits_files_max_fdset_files_next_fd"];
                fd_not_small_current_signal_rlim_RLIMIT_NOFIL_rlim_cur[label="fd_not_small_current_signal_rlim_RLIMIT_NOFIL_rlim_cur"];
                goto_out[label="goto_out"];
                set_error_expand_files_files_fd[label="set_error_expand_files_files_fd"];
                error_small_0[label="error_small_0"];
                goto_out[label="goto_out"];
                error_true[label="error_true"];
                set_error_EMFILE[label="set_error_EMFILE"];
                goto_repeat[label="goto_repeat"];
                FD_SET_fd_files_open_fds[label="FD_SET_fd_files_open_fds"];
                FD_CLR_fd_files_close_on_exec[label="FD_CLR_fd_files_close_on_exec"];
                set_file_next_fd_fd_add_1[label="set_file_next_fd_fd_add_1"];
                files_fd_fd_not_eq_NULL[label="files_fd_fd_not_eq_NULL"];
                clear_files_fd_fd[label="clear_files_fd_fd"];
                set_error_fd[label="set_error_fd"];
                unlock_files_file_lock[label="unlock_files_file_lock"];
                return_error[label="return_error"];
        }

        subgraph cluster___put_unused_fd{
                label="static inline void __put_unused_fd(struct files_struct *files, unsigned int fd)
";
                __FD_CLR_fd_files_open_fds[label="__FD_CLR_fd_files_open_fds"];
                fd_small_files_next_fd[label="fd_small_files_next_fd"];
                set_files_next_fd_fd[label="set_files_next_fd_fd"];
        }

        subgraph cluster_put_unused_fd{
                label="void fastcall put_unused_fd(unsigned int fd)
";
                set_files_current_files[label="set_files_current_files"];
                lock_files_file_lock[label="lock_files_file_lock"];
                __put_unused_fd_files_fd[label="__put_unused_fd_files_fd"];
                unlock_files_file_lock[label="unlock_files_file_lock"];
        }

        subgraph cluster_fd_install{
                label="void fastcall fd_install(unsigned int fd, struct file * file)
";
                set_files_current_files[label="set_files_current_files"];
                lock_files_file_lock[label="lock_files_file_lock"];
                files_fd_fd_not_eq_NULL[label="files_fd_fd_not_eq_NULL"];
                BUG[label="BUG"];
                set_files_fd_fd_file[label="set_files_fd_fd_file"];
                unlock_files_file_lock[label="unlock_files_file_lock"];
        }

        subgraph cluster_sys_open{
                label="asmlinkage long sys_open(const char __user * filename, int flags, int mode)
";
                set_tmp_getname_filename[label="set_tmp_getname_filename"];
                set_fd_PTR_ERR_tmp[label="set_fd_PTR_ERR_tmp"];
                IS_ERR_tmp_false[label="IS_ERR_tmp_false"];
                set_fd_get_unused_fd[label="set_fd_get_unused_fd"];
                fd_not_small_0[label="fd_not_small_0"];
                set_f_filp_open_tmp_flags_mode[label="set_f_filp_open_tmp_flags_mode"];
                set_error_PTR_ERR_f[label="set_error_PTR_ERR_f"];
                IS_ERR_f_true[label="IS_ERR_f_true"];
                goto_out_error[label="goto_out_error"];
                fd_install_fd_f[label="fd_install_fd_f"];
                putname_tmp[label="putname_tmp"];
                return_fd[label="return_fd"];
                put_unused_fd_fd[label="put_unused_fd_fd"];
                set_fd_error[label="set_fd_error"];
                goto_out[label="goto_out"];
        }

        subgraph cluster_filp_close{
                label="int filp_close(struct file *filp, fl_owner_t id)
";
                set_retval_filp_f_error[label="set_retval_filp_f_error"];
                retval_true[label="retval_true"];
                set_filp_error_0[label="set_filp_error_0"];
                file_count_filp_false[label="file_count_filp_false"];
                return_retval[label="return_retval"];
                filp_f_op_true_and_filp_f_op_flush_true[label="filp_f_op_true_and_filp_f_op_flush_true"];
                set_err_filp_f_op_flush_filp[label="set_err_filp_f_op_flush_filp"];
                retval_false[label="retval_false"];
                set_retval_err[label="set_retval_err"];
                dnotify_flush_filp_id[label="dnotify_flush_filp_id"];
                locks_remove_posix_filp_id[label="locks_remove_posix_filp_id"];
                fput_filp[label="fput_filp"];
                return_retval[label="return_retval"];
        }

        subgraph cluster_sys_close{
                label="asmlinkage long sys_close(unsigned int fd)
";
                set_files_current_files[label="set_files_current_files"];
                lock_files_file_lock[label="lock_files_file_lock"];
                fd_not_small_files_max_fds[label="fd_not_small_files_max_fds"];
                goto_out_unlock[label="goto_out_unlock"];
                set_filp_files_fd_fd[label="set_filp_files_fd_fd"];
                filp_false[label="filp_false"];
                goto_out_unlock[label="goto_out_unlock"];
                clear_files_fd_fd[label="clear_files_fd_fd"];
                FD_CLR_fd_files_close_on_exec[label="FD_CLR_fd_files_close_on_exec"];
                __put_unused_fd_files_fd[label="__put_unused_fd_files_fd"];
                unlock_files_file_lock[label="unlock_files_file_lock"];
                return_filp_close_filp_files[label="return_filp_close_filp_files"];
                unlock_files_file_lock[label="unlock_files_file_lock"];
                return_EBADF[label="return_EBADF"];
        }

        subgraph cluster_sys_vhangup{
                label="asmlinkage long sys_vhangup(void)
";
                capable_CAP_SYS_TTY_CONFIG_true[label="capable_CAP_SYS_TTY_CONFIG_true"];
                tty_vhangup_current_signal_tty[label="tty_vhangup_current_signal_tty"];
                return_0[label="return_0"];
                return_EPERM[label="return_EPERM"];
        }

        subgraph cluster_generic_file_open{
                label="int generic_file_open(struct inode * inode, struct file * filp)
";
                filp_f_flags_O_LARGEFILE_clear_and_i_size_read_inode_great_MAX_NON_LFS[label="filp_f_flags_O_LARGEFILE_clear_and_i_size_read_inode_great_MAX_NON_LFS"];
                return_EFBIG[label="return_EFBIG"];
                return_0[label="return_0"];
        }

        subgraph cluster_nonseekable_open{
                label="int nonseekable_open(struct inode *inode, struct file *filp)
";
                filp_f_mode_clear_FMODE_LSEEK_FMODE_PREAD_FMODE_PWRITE[label="filp_f_mode_clear_FMODE_LSEEK_FMODE_PREAD_FMODE_PWRITE"];
                return_0[label="return_0"];
        }
}
