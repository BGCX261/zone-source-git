digraph semaphore_c{
        subgraph cluster___up_wakeup{
                label="__up_wakeup";
                __up_wakeup_asm[label="asm(\".section .sched.text\\n\"\".align 4\\n\"\".globl __up_wakeup\\n\"\"__up_wakeup:\\n\\t\"\"pushl %edx\\n\\t\"\"pushl %ecx\\n\\t\"\"call __up\\n\\t\"\"popl %ecx\\n\\t\"\"popl %edx\\n\\t\"\"ret\");"];
        }

        subgraph cluster___up{
                label="static fastcall void __attribute_used__  __up(struct semaphore *sem)";
                wake_up[label="wake_up(&sem->wait);"];
        }

        subgraph cluster___down_failed{
                label="__down_failed";
                __down_failed_asm[label="\"pushl %edx\n\t\"\"pushl %ecx\n\t\"\"call __down\n\t\"\"popl %ecx\n\t\"\"popl %edx\n\t\""];
        }

        subgraph cluster__down{
                label="static fastcall void __attribute_used__ __sched __down(struct semaphore * sem)";
                DECLARE_WAITQUEUE[label="DECLARE_WAITQUEUE(wait, tsk);"];
                set_tsk_state_TASK_UNINTERRUPTIBLE[label="set_tsk_state_TASK_UNINTERRUPTIBLE"];
                lock_sem_wait_lock[label="lock_sem_wait_lock"];
                add_wait_queue_exclusive_locked_sem_wait_wait[label="add_wait_queue_exclusive_locked_sem_wait_wait"];
                inc_sem_sleepers[label="inc_sem_sleepers"];
                for_dead[label="for_dead"];
                atomic_add_negative_sem_sleeper_sub1_sem_count[label="atomic_add_negative_sem_sleeper_sub1_sem_count"];
                set_sem_sleepers_1[label="set_sem_sleepers_1"];
                unlock_sem_wait_lock[label="unlock_sem_wait_lock"];
                schedule[label="schedule ()"];
                lock_sem_wait_lock[label="lock_sem_wait_lock"];
                set_tsk_state_TASK_UNINTERRUPTIBLE[label="set_tsk_state_TASK_UNINTERRUPTIBLE"];
                wake_up_locked_sem_wait[label="wake_up_locked_sem_wait"];
                unlock_sem_wait_lock[label="unlock_sem_wait_lock"];
                set_tsk_state_TASK_RUNNING[label="set_tsk_state_TASK_RUNNING"];
        }

        subgraph cluster___down_failed_trylock{
                label="__down_failed_trylock";
                __down_failed_trylock_asm[label="\"pushl %edx\n\t\"\"pushl %ecx\n\t\"\"call __down_trylock\n\t\"\"popl %ecx\n\t\"\"popl %edx\n\t\""];
        }

        subgraph cluster___down_trylock{
                label="static fastcall int __attribute_used__ __down_trylock(struct semaphore * sem)";
                lock_sem_wait_lock[label="lock_sem_wait_lock"];
                set_sleepers_sem_sleeperrs_add_1[label="set_sleepers_sem_sleeperrs_add_1"];
                clear_sem_sleepers[label="clear_sem_sleepers"];
                atomic_add_negative_sleepers_sem_count[label="atomic_add_negative(sleepers, &sem->count"];
                wake_up_locked_sem_wait[label="wake_up_locked_sem_wait"];
                unlock_sem_wait_lock[label="unlock_sem_wait_lock"];
        }

        subgraph cluster__down_failed_interruptible{
                label="__down_failed_interruptible";
                __down_failed_interruptible_asm[label="\"pushl %edx\n\t\"\"pushl %ecx\n\t\"\"call __down_interruptible\n\t\"\"popl %ecx\n\t\"\"popl %edx\n\t\""];
        }

        subgraph cluster___down_interruptible{
                label="static fastcall int __attribute_used__ __sched __down_interruptible(struct semaphore * sem)";

                DECLARE_WAITQUEUE_wait_current[label="DECLARE_WAITQUEUE_wait_current"];
                set_current_state_TASK_INTERRUPTIBLE[label="set_current_state_TASK_INTERRUPTIBLE"];
                lock_sem_wait_lock[label="lock_sem_wait_lock"];
                add_wait_queue_exclusive_locked_sem_wait_wait[label="add_wait_queue_exclusive_locked_sem_wait_wait"];
                inc_sem_sleepers[label="inc_sem_sleepers"];
                for_dead[label="dead_for"];
                signal_pending_current[label="signal_pending_current"];
                set_retval_EINTR[label="set_retval_EINTR"];
                clear_sem_sleepers_1[label="clear_sem_sleepers"];
                atomic_add_sleepers_sem_count[label="atomic_add_sleepers_sem_count"];
                atomic_add_negative[label="atomic_add_negative(sleepers-1,&sem->count)"];
                clear_sem_sleepers_2[label="clear_sem_sleepers"];
                set_sem_sleepers_1[label="set_sem_sleepers_1"];
                unlock_sem_wait_lock[label="unlock_sem_wait_lock"];
                schedule[label="schedule ()"];
                lock_sem_wait_lock[label="lock_sem_wait_lock"];
                set_current_state_TASK_INTERRUPTIBLE[label="set_current_state_TASK_INTERRUPTIBLE"];
                remove_wait_queue_locked_sem_wait_wait[label="remove_wait_queue_locked_sem_wait_wait"];
                wake_up_locked[label="wake_up_locked(&sem->wait)"];
                unlock_sem_wait_lock[label="unlock_sem_wait_lock"];
                set_current_state_TASK_RUNNING[label="set_current_state_TASK_RUNNING"];
        }
}
