digraph page_alloc_c{
        subgraph cluster___get_free_pages{
                label="fastcall unsigned long __get_free_pages(unsigned int __nocast gfp_mask, unsigned int order)";
                alloc_pages[label="alloc_pages (gfp_mask,order)"];
                page_address_page[label="page_address_page"];
        }

	subgraph cluster_get_zeroed_page{
		label="fastcall unsigned long get_zeroed_page(unsigned int __nocast gfp_mask)";
		alloc_pages_gfp_mask___GFP_ZERO_0[label="alloc_pages_gfp_mask___GFP_ZERO_0"];
		page_address[label="page_address"];
	}

	subgraph cluster__free_pages{
		label="fastcall void __free_pages(struct page *page, unsigned int order)";
		PageReserved_page_false_and_put_page_testzero_page[label="PageReserved_page_false_and_put_page_testzero_page"];
		order_eq_0[label="order_eq_0"];
		free_hot_page_page[label="free_hot_page_page"];
		__free_pages_ok[label="__free_pages_ok (page, order)"];
	}

	subgraph cluster_free_pages{
		label="fastcall void free_pages(unsigned long addr, unsigned int order)";
		addr_not_null[label="addr_not_null"];
		__free_pages_virt_to_page_addr_order[label="__free_pages_virt_to_page_addr_order"];
	}

	subgraph cluster___rmqueue{
		label="static struct page *__rmqueue(struct zone *zone, unsigned int order)";
		for_set_current_order_order_current_order_little_MAX_ORDER_inc_current_order[label="for_set_current_order_order_current_order_little_MAX_ORDER_inc_current_order"];
		set_area_zone_free_area_add_current_order[label="set_area_zone_free_area_add_current_order"];
		list_empty_area_free_list[label="list_empty_area_free_list"];
		set_page_list_entry_area_free_list_next_struct_page_lru[label="set_page_list_entry_area_free_list_next_struct_page_lru"];
		list_del_page_lru[label="list_del_page_lru"];
		rmv_page_order_page[label="rmv_page_order_page"];
		dec_area_nr_free[label="dec_area_nr_free"];
		zone_free_pages_self_sub_1_left_move_order[label="zone_free_pages_self_sub_1_left_move_order"];
		return_expand_zone_page_order_current_order_area[label="return_expand_zone_page_order_current_order_area"];
		return_NULL[label="return_NULL"];
	}

	subgraph cluster___free_pages_bulk{
		label="static inline void __free_pages_bulk (struct page *page,struct zone *zone, unsigned int order)";
		get_order_size_1_move_left_order[label="get_order_size_1_move_left_order"];
		order_not_null[label="order_not_null"];
		destroy_compound_page_page_order[label="destroy_compound_page_page_order"];
		set_page_idx[label="page_idx = page_to_pfn(page) & ((1 << MAX_ORDER) - 1);"];
		zone_free_page_self_add_order_size[label="zone_free_page_self_add_order_size"];
		order_small_MAX_ORDER_sub_1[label="order_small_MAX_ORDER_sub_1"];
		set_combined_idx___find_combined_index_page_idx_order[label="set_combined_idx___find_combined_index_page_idx_order"];
		bad_range_zone_buddy[label="bad_range_zone_buddy"];
		page_is_buddy_buddy_order[label="page_is_buddy_buddy_order"];
		list_del_buddy_lru[label="list_del_buddy_lru"];
		set_area_zone_free_area_add_order[label="set_area_zone_free_area_add_order"];
		dec_area_nr_free[label="dec_area_nr_free"];
		rmv_page_order_buddy[label="rmv_page_order_buddy"];
		set_page_page_add_combined_idx_sub_page_idx[label="set_page_page_add_combined_idx_sub_page_idx"];
		set_page_idx_combined_idx[label="set_page_idx_combined_idx"];
		inc_order[label="inc_order"];
		set_page_order_page_order[label="set_page_order_page_order"];
		list_add[label="list_add(&page->lru, &zone->free_area[order].free_list);"];
		inc_set_zone_free_area_orer_nr_free[label="inc_set_zone_free_area_orer_nr_free"];
	}

        subgraph cluster_buffered_rmqueue{
                label="static struct page *buffered_rmqueue(struct zone *zone, int order, unsigned int __nocast gfp_flags";
                order_eq_0[label="order_eq_0"];
                set_cold[label="int cold = !!(gfp_flags & __GFP_COLD);"];
                set_per_cpu_pages_pcp_zone_pageset_get_cpu_pcp_cold[label="set_per_cpu_pages_pcp_zone_pageset_get_cpu_pcp_cold"];
                local_irq_save[label="local_irq_save"];
                pcp_count_great_pcp_low[label="pcp_count_great_pcp_low"];
                set_pcp_count[label="pcp->count += rmqueue_bulk(zone, 0,pcp->batch, &pcp->list);"];
                pcp_count_not_0[label="pcp_count_not_0"];
                set_page_list_entry_pcp_list_next_struct_page_lru[label="set_page_list_entry_pcp_list_next_struct_page_lru"];
                list_del_page_lru[label="list_del_page_lru"];
                dec_pcp_count[label="dec_pcp_count"];
                local_irq_restore[label="local_irq_restore"];
                put_cpu[label="put_cpu ()"];
                page_null[label="page_null"];
                lock_zone_lock[label="lock_zone_lock"];
                set_page___rmqueue_zone_order[label="set_page___rmqueue_zone_order"];
                unlock_zone_lock[label="unlock_zone_lock"];
                page_not_null[label="page_not_null"];
                mod_page_state_zone_zone_pgalloc_1_move_left_order[label="mod_page_state_zone_zone_pgalloc_1_move_left_order"];
                prep_new_page_page_order[label="prep_new_page_page_order"];
                gfp_flags_GFP_ZERO_set[label="gfp_flags_GFP_ZERO_set"];
                prep_zero_page_page_order_gfp_flags[label="prep_zero_page_page_order_gfp_flags"];
                order_true_and_gfp_flags___GFP_COMP_set[label="order_true_and_gfp_flags___GFP_COMP_set"];
                prep_compound_page_page_order[label="prep_compound_page_page_order"];
                return_page[label="return_page"];
        }

        subgraph cluster_free_hot_cold_page{
                label="static void fastcall free_hot_cold_page(struct page *page, int cold)";
                set_zone_page_zone_page[label="set_zone_page_zone_page"];
                arch_free_page_page_0[label="arch_free_page_page_0"];
                kernel_map_pages_page_1_0[label="kernel_map_pages_page_1_0"];
                inc_page_state_pgfree[label="inc_page_state_pgfree"];
                PageAnon_page_not_null[label="PageAnon_page_not_null"];
                clear_page_mapping[label="clear_page_mapping"];
                free_pages_check___FUNCTION___page[label="free_pages_check___FUNCTION___page"];
                set_pcp[label="	pcp = &zone->pageset[get_cpu()].pcp[cold];"];
                local_irq_save[label="local_irq_save"];
                pcp_count_great_pcp_high[label="pcp_count_great_pcp_high"];
                pcp_count[label="pcp->count -= free_pages_bulk(zone, pcp->batch, &pcp->list, 0);"];
                list_add_page_lru_pcp_list[label="list_add_page_lru_pcp_list"];
                inc_pcp_count[label="inc_pcp_count"];
                local_irq_restore[label="local_irq_restore"];
                put_cpu[label="put_cpu ()"];
        }

        subgraph cluster_free_hot_page{
                label="void fastcall free_hot_page(struct page *page)";
                free_hot_cold_page_page_0[label="free_hot_cold_page_page_0"];
        }

        subgraph cluster_free_cold_page{
                label="void fastcall free_cold_page(struct page *page)";
                free_hot_cold_page_page_1[label="free_hot_cold_page_page_1"];
        }

        subgraph cluster___alloc_pages{
                label="struct page * fastcall __alloc_pages(unsigned int __nocast gfp_mask, unsigned int order,struct zonelist *zonelist)";
                set_wait_gfp_mask_and___GFP_WAIT[label="set_wait_gfp_mask_and___GFP_WAIT"];
                might_sleep_if_wait[label="might_sleep_if_wait"];
                set_can_try_harder_rt_task_p_and_in_interrupt_not_true_or_wait_null[label="set_can_try_harder_rt_task_p_and_in_interrupt_not_true_or_wait_null"];
                set_zones_zonelist_zones[label="set_zones_zonelist_zones"];
                zones_0_NULL[label="zones_0_NULL"];
                return_NULL[label="return_NULL"];
                set_classzone[label="classzone_idx = zone_idx(zones[0]);"];
                for_zones[label="for (i = 0; (z = zones[i]) != NULL; i++)"];
                zone_watermark_ok_z_order_z_pages_low_classzone_idx_0_0[label="zone_watermark_ok_z_order_z_pages_low_classzone_idx_0_0"];
                continue[label="continue"];
                cpuset_zone_allowed_z[label="cpuset_zone_allowed_z"];
                continue_1[label="continue"];
                set_page_buffered_rmqueue_z_order_gfp_mask[label="set_page_buffered_rmqueue_z_order_gfp_mask"];
                page_not_null[label="page_not_null"];
                for_zones_1[label="for (i = 0; (z = zones[i]) != NULL; i++)"];
                wakeup_kswapd_z_order[label="wakeup_kswapd_z_order"];
                for_zones_2[label="for (i = 0; (z = zones[i]) != NULL; i++)"];
                zone_watermark_ok_z_order_z_pages_min_clsszone_idx_can_try_harder_gfp_mask___GFP_HIGH_set[label="zone_watermark_ok_z_order_z_pages_min_clsszone_idx_can_try_harder_gfp_mask___GFP_HIGH_set"];
                wait_true_and_cpuset_zone_allowed_z_not_true[label="wait_true_and_cpuset_zone_allowed_z_not_true"];
                set_page_buffered_rmqueue_z_order_gfp_mask_1[label="set_page_buffered_rmqueue_z_order_gfp_mask"];
                page_not_null_1[label="page_not_null"];
                current_flags_PG_MEMALLOC_set_or_test_thread_flag_TIF_MEMDIE_true_in_interrupt_not_true[label="current_flags_PG_MEMALLOC_set_or_test_thread_flag_TIF_MEMDIE_true_in_interrupt_not_true"];
                gfp_mask___GFP_NOMEMALLOC_set[label="gfp_mask___GFP_NOMEMALLOC_set"];
                for_zones_3[label="for (i = 0; (z = zones[i]) != NULL; i++)"];
                cpuset_zone_allowed_z_not_true[label="cpuset_zone_allowed_z_not_true"];
                set_page_buffered_rmqueue_z_order_gfp_mask_2[label="set_page_buffered_rmqueue_z_order_gfp_mask"];
                page_not_null_2[label="page_not_null"];
                wait_null[label="wait_null"];
                cond_resched[label="cond_resched"];
                set_current_flags_PF_MEMALLOC[label="set_current_flags_PF_MEMALLOC"];
                clear_reclaim_state_reclaimed_slab[label="clear_reclaim_state_reclaimed_slab"];
                set_current_reclaim_state_reclaim_state[label="set_current_reclaim_state_reclaim_state"];
                set_did_some_progress_try_to_free_pages_zones_gfp_mask_order[label="set_did_some_progress_try_to_free_pages_zones_gfp_mask_order"];
                clear_current_reclaim_state[label="clear_current_reclaim_state"];
                clear_current_flags_PF_MEMALLOC[label="clear_current_flags_PF_MEMALLOC"];
                cond_resched[label="cond_resched ()"];
                did_some_progress_true[label="did_some_progress_true"];
                for_zones_4[label="for (i = 0; (z = zones[i]) != NULL; i++)"];
                zone_watermark_ok_z_order_z_pages_min_clsszone_idx_can_try_harder_gfp_mask___GFP_HIGH_set_1[label="zone_watermark_ok_z_order_z_pages_min_clsszone_idx_can_try_harder_gfp_mask___GFP_HIGH_set"];
                cpuset_zone_allowed_z_not_true_1[label="cpuset_zone_allowed_z_not_true"];
                set_page_buffered_rmqueue_z_order_gfp_mask_3[label="set_page_buffered_rmqueue_z_order_gfp_mask"];
                page_not_null_3[label="page_not_null"];
                gfp_mask___GFP_FS_set_and_gfp_mask___GFP_NORETRY_not_set[label="gfp_mask___GFP_FS_set_and_gfp_mask___GFP_NORETRY_not_set"];
                for_zones_5[label="for (i = 0; (z = zones[i]) != NULL; i++)"];
                cpuset_zone_allowed_z_not_true_2[label="cpuset_zone_allowed_z_not_true"];
                set_page_buffered_rmqueue_z_order_gfp_mask_4[label="set_page_buffered_rmqueue_z_order_gfp_mask"];
                out_of_memory_gfp_mask[label="out_of_memory_gfp_mask"];
                clear_do_retry[label="clear_do_retry"];
                gfp_mask___GFP_NOTETRY_not_set[label="gfp_mask___GFP_NOTETRY_not_set"];
                order_great_3_or_gf_mask___GFP_REPEAT_set[label="order_great_3_or_gf_mask___GFP_REPEAT_set"];
                set_do_retry_1[label="set_do_retry_1"];
                gfp_mask___GFP_NOFAIL_set[label="gfp_mask___GFP_NOFAIL_set"];
                set_do_retry_1_1[label="set_do_retry_1"];
                do_retry_true[label="do_retry_true"];
                blk_congestion_wait_WRITE_HZ_div_50[label="blk_congestion_wait_WRITE_HZ_div_50"];
                gfp_mask___GFP_NOWARN_not_set_and_printk_ratelimit[label="gfp_mask___GFP_NOWARN_not_set_and_printk_ratelimit"];
                printk[label="printk"];
                dump_stack[label="dump_stack"];
                return_NULL[label="return_NULL"];
                zone_statistics_zonelist_z[label="zone_statistics_zonelist_z"];
                return_page[label="return_page"];
        }

	subgraph cluster___free_pages{
		label="fastcall void __free_pages(struct page *page, unsigned int order)";
		PageReserved_page_false_and_put_page_testzero_page_true[label="PageReserved_page_false_and_put_page_testzero_page_true"];
		order_eq_0[label="order_eq_0"];
		__free_pages_ok_page_order[label="__free_pages_ok_page_order"];
	}

	subgraph clustet___free_pages_ok{
		label="void __free_pages_ok(struct page *page, unsigned int order)";
		LIST_HEAD_list[label="LIST_HEAD_list"];
		arch_free_page_page_order[label="arch_free_page_page_order"];
		mod_page_state[label="mod_page_state(pgfree, 1 << order);"];
		CONFIG_MMU[label="CONFIG_MMU"];
		order_great_0[label="order_great_0"];
		for_order[label="for (i = 1 ; i < (1 << order) ; ++i)"];
		__put_page_page_add_i[label="__put_page_page_add_i"];
		for_order_1[label="for (i = 1 ; i < (1 << order) ; ++i)"];
		free_page_check___FUNCTION___page_add_i[label="free_page_check___FUNCTION___page_add_i"];
		list_add_page_lru_list[label="list_add_page_lru_list"];
		kernel_map_page[label="kernel_map_pages(page, 1<<order, 0);"];
		free_pages_bulk[label="free_pages_bulk(page_zone(page), 1, &list, order);"];
	}

        subgraph cluster_bad_page{
                label="static void bad_page(const char *function, struct page *page)";
                dump_stack[label="dump_stack"];
                page_flags_clear_PG_private_GP_locked_PG_lru_PG_active_PG_dirty_PG_swapcache_PG_writeback[label="page_flags_clear_PG_private_GP_locked_PG_lru_PG_active_PG_dirty_PG_swapcache_PG_writeback"];
                set_page_count_page_0[label="set_page_count_page_0"];
                reset_page_mapcount_page[label="reset_page_mapcount_page"];
                clear_page_mapping[label="clear_page_mapping"];
                tainted_self_or_TAINT_BAD_PAGE[label="tainted_self_or_TAINT_BAD_PAGE"];
        }

        subgraph cluster_prep_compound_page{
                label="static void prep_compound_page(struct page *page, unsigned long order)";
                set_nr_pages_1_left_move_order[label="set_nr_pages_1_left_move_order"];
                clear_page_1_mapping[label="clear_page_1_mapping"];
                set_page_1_index_order[label="set_page_1_index_order"];
                for_i_nr_pages[label="for_i_nr_pages"];
                set_p_page_add_i[label="set_p_page_add_i"];
                SetPageCompound_p[label="SetPageCompound_p"];
                set_p_private_page[label="set_p_private_page"];
        }

        subgraph cluster_destory_compound_page{
                label="static void destroy_compound_page(struct page *page, unsigned long order)";
                set_nr_pages_1_left_move_order[label="set_nr_pages_1_left_move_order"];
                PageCompound_page_false[label="PageCompound_page_false"];
                return[label="return"];
                page_1_index_not_eq_order[label="page_1_index_not_eq_order"];
                bad_page___FUNCTION__page[label="bad_page___FUNCTION__page"];
                for_i_nr_pages[label="for_i_nr_pages"];
                set_p_page_add_i[label="set_p_page_add_i"];
                PageCompound_p_false[label="PageCompound_p_false"];
                bad_page___FUNCTIONS___page[label="bad_page___FUNCTIONS___page"];
                p_private_not_eq_page[label="p_private_not_eq_page"];
                bad_page___FUNCTION___page[label="bad_page___FUNCTION___page"];
                ClearPageCompound_p[label="ClearPageCompound_p"];
        }

        subgraph cluster_page_order{
                label="static inline unsigned long page_order(struct page *page)";
                return_page_private[label="return_page_private"];
        }

        subgraph cluster_set_page_order{
                label="static inline void set_page_order(struct page *page, int order)";
                set_page_private_order[label="set_page_private_order"];
                __SetPagePrivate_page[label="__SetPagePrivate_page"];
        }

        subgraph cluster_rmv_page_order{
                label="static inline void rmv_page_order(struct page *page)";
                __ClearPagePrivate_page[label="__ClearPagePrivate_page"];
                set_page_private_0[label="set_page_private_0"];
        }

        subgraph cluster___page_find_buddy{
                label="static inline struct page *__page_find_buddy(struct page *page, unsigned long page_idx, unsigned int order)";
                set_buddy_idx_page_idx_xor_1_left_order[label="set_buddy_idx_page_idx_xor_1_left_order"];
                return_page_add_buddy_idx_sub_page_idx[label="return_page_add_buddy_idx_sub_page_idx"];
        }

        subgraph cluster___find_combined_index{
                label="static inline unsigned long __find_combined_index(unsigned long page_idx, unsigned int order)";
                return_page_idx_and_rever_1_left_move_order[label="return_page_idx_and_rever_1_left_move_order"];
        }

        subgraph cluster_page_is_buddy{
                label="static inline int page_is_buddy(struct page *page, int order)";
                PagePrivate_page_true_and_page_order_page_eq_order_and_PageReserved_page_false_and_page_count_page_eq_0[label="PagePrivate_page_true_and_page_order_page_eq_order_and_PageReserved_page_false_and_page_count_page_eq_0"];
                return_1[label="return_1"];
                return_0[label="return_0"];
        }

        subgraph cluster___free_page_bulk{
                label="static inline void __free_pages_bulk (struct page *page, struct zone *zone, unsigned int order)";
                set_order_size_1_left_move_order[label="set_order_size_1_left_move_order"];
                order_not_null[label="order_not_null"];
                destroy_compound_page_page_order[label="destroy_compound_page_page_order"];
                set_page_idx_page_to_pfn_page_and_1_left_move_ORDER_sub_1[label="set_page_idx_page_to_pfn_page_and_1_left_move_ORDER_sub_1"];
                zone_free_pages_self_add_order_size[label="zone_free_pages_self_add_order_size"];
                order_small_MAX_ORDER_sub_1[label="order_small_MAX_ORDER_sub_1"];
                set_combined_idx___find_combined_index_page_idx_order[label="set_combined_idx___find_combined_index_page_idx_order"];
                set_buddy___page_find_buddy_page_page_idx_order[label="set_buddy___page_find_buddy_page_page_idx_order"];
                bad_range_zone_buddy_true[label="bad_range_zone_buddy_true"];
                page_is_buddy_buddy_order_false[label="page_is_buddy_buddy_order_false"];
                list_del_buddy_lru[label="list_del_buddy_lru"];
                set_area_zone_free_area_add_order[label="set_area_zone_free_area_add_order"];
                dec_area_nr_free[label="dec_area_nr_free"];
                rmv_page_order_buddy[label="rmv_page_order_buddy"];
                set_page_page_add_combined_idx_sub_page_idx[label="set_page_page_add_combined_idx_sub_page_idx"];
                set_page_idx_combined_idx[label="set_page_idx_combined_idx"];
                inc_order[label="inc_order"];
                set_page_order_page_order[label="set_page_order_page_order"];
                list_add_page_lru_zone_free_area_order_free_list[label="list_add_page_lru_zone_free_area_order_free_list"];
                inc_zone_free_area_order_nr_free[label="inc_zone_free_area_order_nr_free"];
        }

        subgraph cluster_free_pages_check{
                label="static inline void free_pages_check(const char *function, struct page *page)";
                page_mapcount_page_true_or_page_mapping_not_eq_NULL_or_page_count_page_not_eq_0_or_page_flags_PG_lru_PG_private_PG_locked_PG_active_PG_reclaim_PG_slab_PG__swapcache_PG_writeback_set[label="page_mapcount_page_true_or_page_mapping_not_eq_NULL_or_page_count_page_not_eq_0_or_page_flags_PG_lru_PG_private_PG_locked_PG_active_PG_reclaim_PG_slab_PG__swapcache_PG_writeback_set"];
                bad_page_functions_page[label="bad_page_functions_page"];
                PageDirty_page_true[label="PageDirty_page_true"];
                ClearPageDirty_page[label="ClearPageDirty_page"];
        }

        subgraph cluster_free_pages_bulk{
                label="static int free_pages_bulk(struct zone *zone, int count, struct list_head *list, unsigned int order)";
                clear_page[label="clear_page"];
                lock_zone_lock[label="lock_zone_lock"];
                set_zone_all_unreclaimable_0[label="set_zone_all_unreclaimable_0"];
                set_zone_pages_scanned_0[label="set_zone_pages_scanned_0"];
                list_empty_list_false_and_dec_count[label="list_empty_list_false_and_dec_count"];
                set_page_list_entry_list_prev_struct_page_lru[label="set_page_list_entry_list_prev_struct_page_lru"];
                list_del_page_lru[label="list_del_page_lru"];
                __free_pages_bulk_page_zone_order[label="__free_pages_bulk_page_zone_order"];
                inc_ret[label="inc_ret"];
                unlock_zone_lock[label="unlock_zone_lock"];
                return_ret[label="return_ret"];
        }

        subgraph cluster___free_pages_ok{
                label="void __free_pages_ok(struct page *page, unsigned int order)";
                LIST_HEAD_list[label="LIST_HEAD_list"];
                arch_free_page_page_order[label="arch_free_page_page_order"];
                mod_page_state_pgfree_1_left_move_order[label="mod_page_state_pgfree_1_left_move_order"];
                CONFIG_MMU[label="CONFIG_MMU"];
                order_small_0[label="order_small_0"];
                for_i_1_left_move_order[label="for_i_1_left_move_order"];
                __put_page_page_add_i[label="__put_page_page_add_i"];
                for_i_1_left_move_order[label="for_i_1_left_move_order"];
                free_pages_check___FUNCTION___page_add_i[label="free_pages_check___FUNCTION___page_add_i"];
                list_add_page_lru_list[label="list_add_page_lru_list"];
                kernel_map_pages_page_1_left_move_order_0[label="kernel_map_pages_page_1_left_move_order_0"];
                free_pages_bulk_page_zone_page_1_list_order[label="free_pages_bulk_page_zone_page_1_list_order"];
        }

        subgraph cluster_expand{
                label="static inline struct page *expand(struct zone *zone, struct page *page,int low, int high, struct free_area *area)";
                set_size_1_left_move_high[label="set_size_1_left_move_high"];
                high_great_low[label="high_great_low"];
                dec_area[label="dec_area"];
                dec_high[label="dec_high"];
                size_self_right_move_1[label="size_self_right_move_1"];
                list_add_page_size_lru_area_free_list[label="list_add_page_size_lru_area_free_list"];
                inc_area_nr_free[label="inc_area_nr_free"];
                set_page_order_page_size_high[label="set_page_order_page_size_high"];
                return_page[label="return_page"];
        }

        subgraph cluster_set_page_refs{
                label="void set_page_refs(struct page *page, int order)";
                CONFIG_MMU[label="CONFIG_MMU"];
                set_page_count_page_1[label="set_page_count_page_1"];
                for_i_1_left_move_order[label="for_i_1_left_move_order"];
                set_page_count_page_add_i_1[label="set_page_count_page_add_i_1"];
        }

        subgraph cluster_prep_new_page{
                label="static void prep_new_page(struct page *page, int order)";
                page_mapping_true_or_page_mapcount_page_true_or_page_flags_PG_private_PG_locked_PG_lru_PG_active_PG_dirty_PG_reclaim_PG_swapcache_PG_writeback_set[label="page_mapping_true_or_page_mapcount_page_true_or_page_flags_PG_private_PG_locked_PG_lru_PG_active_PG_dirty_PG_reclaim_PG_swapcache_PG_writeback_set"];
                bad_page___FUNCTION___page[label="bad_page___FUNCTION___page"];
                page_flags_clear__PG_uptodate_PG_error_PG_referenced_PG_aarch1_PG_cheched_PG_mappedtodisk[label="page_flags_clear__PG_uptodate_PG_error_PG_referenced_PG_aarch1_PG_cheched_PG_mappedtodisk"];
                set_page_private_0[label="set_page_private_0"];
                set_page_refs_page_order[label="set_page_refs_page_order"];
                kernel_map_pages_page_1_left_move_order_1[label="kernel_map_pages_page_1_left_move_order_1"];
        }

        subgraph cluster_rmqueue_bulk{
                label="static int rmqueue_bulk(struct zone *zone, unsigned int order, unsigned long count, struct list_head *list)";
                lock_zone_lock[label="lock_zone_lock"];
                for_i_count[label="for_i_count"];
                set_page___rmqueue_zone_order[label="set_page___rmqueue_zone_order"];
                page_eq_NULL[label="page_eq_NULL"];
                inc_allocated[label="inc_allocated"];
                list_add_tail_page_lru_list[label="list_add_tail_page_lru_list"];
                unlock_zone_lock[label="unlock_zone_lock"];
                return_allocated[label="return_allocated"];
        }

        subgraph cluster___drain_pages{
                label="static void __drain_pages(unsigned int cpu)";
                for_each_zone_zone[label="for_each_zone_zone"];
                set_pset_zone_pageset_cpu[label="set_pset_zone_pageset_cpu"];
                for_i_ARRAY_SIZE_pset_pcp[label="for_i_ARRAY_SIZE_pset_pcp"];
                set_pcp_pset_pcp_i[label="set_pcp_pset_pcp_i"];
                pcp_count_self_sub_free_pages_bulk_zone_pcp_count_pcp_list_0[label="pcp_count_self_sub_free_pages_bulk_zone_pcp_count_pcp_list_0"];
        }

        subgraph cluster_mark_free_pages{
                label="void mark_free_pages(struct zone *zone)";
                lock_zone_lock[label="lock_zone_lock"];
                for_zone_pfn_zone_spanned_pages[label="for_zone_pfn_zone_spanned_pages"];
                ClearPageNosaveFree_pfn_to_page_zone_pfn_add_zone_zone_start_pfn[label="ClearPageNosaveFree_pfn_to_page_zone_pfn_add_zone_zone_start_pfn"];
                for_order_MAX_ORDER_sub_1[label="for_order_MAX_ORDER_sub_1"];
                list_for_each_curr_zone_free_area_order_free_list[label="list_for_each_curr_zone_free_area_order_free_list"];
                set_start_pfn_page_to_pfn_list_entry_curr_struct_page_lru[label="set_start_pfn_page_to_pfn_list_entry_curr_struct_page_lru"];
                for_i_1_left_move_order[label="for_i_1_left_move_order"];
                SetPageNosaveFree_pfn_to_page_start_pfn_add_i[label="SetPageNosaveFree_pfn_to_page_start_pfn_add_i"];
                unlock_zone_lock[label="unlock_zone_lock"];
        }

        subgraph cluster_drain_local_pages{
                label="void drain_local_pages(void)";
                local_irq_save[label="local_irq_save"];
                __drain_pages_smp_processor_id[label="__drain_pages_smp_processor_id"];
                local_irq_restore[label="local_irq_restore"];
        }

        subgraph cluster_zone_statistics{
                label="static void zone_statistics(struct zonelist *zonelist, struct zone *z)";
                CONFIG_NUMA[label="CONFIG_NUMA"];
                set_pg_z_zone_pgdat[label="set_pg_z_zone_pgdat"];
                set_orig_zonelist_zones_0_zone_pgdat[label="set_orig_zonelist_zones_0_zone_pgdat"];
                local_irq_save[label="local_irq_save"];
                set_cpu_smp_processor_id[label="set_cpu_smp_processor_id"];
                set_p_z_pageset_cpu[label="set_p_z_pageset_cpu"];
                pg_eq_orig[label="pg_eq_orig"];
                inc_z_pageset_cpu_numa_hit[label="inc_z_pageset_cpu_numa_hit"];
                inc_p_numa_miss[label="inc_p_numa_miss"];
                inc_zonelist_zones_0_pageset_cpu_numa_foreign[label="inc_zonelist_zones_0_pageset_cpu_numa_foreign"];
                pg_eq_NODE_DATA_numa_node_id[label="pg_eq_NODE_DATA_numa_node_id"];
                inc_p_local_node[label="inc_p_local_node"];
                inc_p_order_node[label="inc_p_order_node"];
                local_irq_restore[label="local_irq_restore"];
        }

        subgraph cluster_prep_zone_page{
                label="static inline void prep_zero_page(struct page *page, int order, unsigned int __nocast gfp_flags)";
                for_i_1_left_move_order[label="for_i_1_left_move_order"];
                clear_highpage_page_add_i[label="clear_highpage_page_add_i"];
        }

        subgraph cluster_zone_watermark_ok{
                label="int zone_watermark_ok(struct zone *z, int order, unsigned long mark, int classzone_idx, int can_try_harder, int gfp_high)";
                set_min_mark[label="set_min_mark"];
                set_free_pages_z_free_pages_sub_1_left_move_order_add_1[label="set_free_pages_z_free_pages_sub_1_left_move_order_add_1"];
                gfp_high_true[label="gfp_high_true"];
                min_self_sub_min_div_2[label="min_self_sub_min_div_2"];
                can_try_harder_true[label="can_try_harder_true"];
                min_self_sub_min_div_2[label="min_self_sub_min_div_2"];
                free_pages_not_great_min_add_z_lowmem_reserve_classzone_idx[label="free_pages_not_great_min_add_z_lowmem_reserve_classzone_idx"];
                return_0[label="return_0"];
                for_o_small_order[label="for_o_small_order"];
                free_pages_self_sub_z_free_area_o_nr_free_left_move_o[label="free_pages_self_sub_z_free_area_o_nr_free_left_move_o"];
                min_self_right_move_1[label="min_self_right_move_1"];
                free_pages_not_great_min[label="free_pages_not_great_min"];
                return_0[label="return_0"];
                return_1[label="return_1"];
        }

        subgraph cluster___pagevec_free{
                label="void __pagevec_free(struct pagevec *pvec)";
                set_i_pagevec_count_pvec[label="set_i_pagevec_count_pvec"];
                dec_i_not_small_0[label="dec_i_not_small_0"];
                free_hot_cold_page_pvec_pages_i_pvec_cold[label="free_hot_cold_page_pvec_pages_i_pvec_cold"];
        }

        subgraph cluster_nr_free_pages{
                label="unsigned int nr_free_pages(void)";
                set_num_0[label="set_num_0"];
                for_each_zone_zone[label="for_each_zone_zone"];
                sum_self_add_zone_free_pages[label="sum_self_add_zone_free_pages"];
                return_sum[label="return_sum"];
        }

        subgraph cluster_nr_free_pages_pgdat{
                label="unsigned int nr_free_pages_pgdat(pg_data_t *pgdat)";
                for_i_MAX_NR_ZONES[label="for_i_MAX_NR_ZONES"];
                sum_self_add_pgdat_node_zones_i_free_pages[label="sum_self_add_pgdat_node_zones_i_free_pages"];
                return_sum[label="return_sum"];
        }

        subgraph cluster_nr_free_zone_pages{
                label="static unsigned int nr_free_zone_pages(int offset)";
                set_sum_0[label="set_sum_0"];
                for_each_pgdat_pgdat[label="for_each_pgdat_pgdat"];
                set_zonelist_pgdat_node_zonelist_add_offset[label="set_zonelist_pgdat_node_zonelist_add_offset"];
                set_zonep_zonelist_zones[label="set_zonep_zonelist_zones"];
                for_zone_zonep[label="for_zone_zonep"];
                set_size_zone_present_pages[label="set_size_zone_present_pages"];
                high_zone_pages_high[label="high_zone_pages_high"];
                size_great_high[label="size_great_high"];
                sum_self_add_size_sub_high[label="sum_self_add_size_sub_high"];
                return_sum[label="return_sum"];
        }

        subgraph cluster_nr_free_buffer_pages{
                label="unsigned int nr_free_buffer_pages(void)";
                return_nr_free_zone_pages_GFP_USER_and_GFP_ZONEMASK[label="return_nr_free_zone_pages_GFP_USER_and_GFP_ZONEMASK"];
        }

        subgraph cluster_nr_free_pagecache_pages{
                label="unsigned int nr_free_pagecache_pages(void)";
                return_nr_free_zone_pages_GFP_HIGHUSER_and_GFP_ZONEMASK[label="return_nr_free_zone_pages_GFP_HIGHUSER_and_GFP_ZONEMASK"];
        }

        subgraph cluster_nr_free_highpages{
                label="unsigned int nr_free_highpages (void)";
                set_pages_0[label="set_pages_0"];
                for_each_pgdat_pgdat[label="for_each_pgdat_pgdat"];
                pages_self_add_pgdat_node_zones_ZONE_HIGHMEM_free_pages[label="pages_self_add_pgdat_node_zones_ZONE_HIGHMEM_free_pages"];
                return_pages[label="return_pages"];
        }

        subgraph cluster___get_page_state{
                label="void __get_page_state(struct page_state *ret, int nr)";
                memset_ret_0[label="memset_ret_0"];
                set_cpu_first_cpu_cpu_online_map[label="set_cpu_first_cpu_cpu_online_map"];
                cpu_small_NR_CPUS[label="cpu_small_NR_CPUS"];
                set_in_per_cpu_page_states_cpu[label="set_in_per_cpu_page_states_cpu"];
                set_cpu_next_cpu_cpu_cpu_online_map[label="set_cpu_next_cpu_cpu_cpu_online_map"];
                cpu_small_NR_CPUS[label="cpu_small_NR_CPUS"];
                prefetch_per_cpu_page_states_cpu[label="prefetch_per_cpu_page_states_cpu"];
                set_out_ret[label="set_out_ret"];
                for_off_nr[label="for_off_nr"];
                out_inc_self_add_in_inc[label="out_inc_self_add_in_inc"];
        }
	
}
