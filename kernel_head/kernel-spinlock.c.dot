digraph spinlock_c{
        subgraph cluster__spin_lock{
                label="void __lockfunc _spin_lock(spinlock_t *lock)";
                preempt_disable[label="preempt_disable ()"];
                _raw_spin_lock[label="_raw_spin_lock ()"];
        }

        subgraph cluster__spin_unlock{
                label="void __lockfunc _spin_unlock(spinlock_t *lock)";
                _raw_spin_unlock[label="_raw_spin_unlock (lock)"];
                preempt_enable[label="preempt_enable ()"];
        }

		subgraph cluster_generic_raw_read_trylock{
			label="int __lockfunc generic_raw_read_trylock(rwlock_t *lock)";
			_raw_read_lock_lock[label="_raw_read_lock_lock"];
			return_1[label="return_1"];
		}

		subgraph cluster__spin_trylock{
			label="int __lockfunc _spin_trylock(spinlock_t *lock)";
			preempt_disable[label="preempt_disable"];
			_raw_spin_trylock_lock_true[label="_raw_spin_trylock_lock_true"];
			return_1[label="return_1"];
			preempt_enable[label="preempt_enable"];
			return_0[label="return_0"];
		}

		subgraph cluster__read_trylock{
			label="int __lockfunc _read_trylock(rwlock_t *lock)";
			preempt_disable[label="preempt_disable"];
			_raw_read_trylock_true[label="_raw_read_trylock_true"];
			return_1[label="return_1"];
			preempt_enable[label="preempt_enable"];
			return_0[label="return_0"];
		}

		subgraph cluster__write_trylock{
			label="int __lockfunc _write_trylock(rwlock_t *lock)";
			preempt_disable[label="preempt_disable"];
			_raw_write_trylock_lock_true[label="_raw_write_trylock_lock_true"];
			return_1[label="return_1"];
			preempt_enable[label="preempt_enable"];
			return_0[label="return_0"];
		}

		subgraph cluster__read_lock{
			label="void __lockfunc _read_lock(rwlock_t *lock)";
			preempt_disable[label="preempt_disable"];
			_raw_read_lock_lock[label="_raw_read_lock_lock"];
		}

		subgraph cluster__spin_lock_irqsave{
			label="unsigned long __lockfunc _spin_lock_irqsave(spinlock_t *lock)";
			local_irq_save[label="local_irq_save"];
			preempt_disable[label="preempt_disable"];
			_raw_spin_lock_flags_lock_flags[label="_raw_spin_lock_flags_lock_flags"];
			return_flags[label="return_flags"];
		}

		subgraph cluster__spin_lock_irq{
			label="void __lockfunc _spin_lock_irq(spinlock_t *lock)";
			local_irq_disable[label="local_irq_disable"];
			preempt_disable[label="preempt_disable"];
			_raw_spin_lock_lock[label="_raw_spin_lock_lock"];
		}

		subgraph cluster__spin_lock_bh{
			label="void __lockfunc _spin_lock_bh(spinlock_t *lock)";
			local_bh_disable[label="local_bh_disable"];
			preempt_disable[label="preempt_disable"];
			_raw_spin_lock_lock[label="_raw_spin_lock_lock"];
		}

		subgraph cluster__read_lock_irqsave{
			label="unsigned long __lockfunc _read_lock_irqsave(rwlock_t *lock)";
			local_irq_save_flags[label="local_irq_save_flags"];
			preempt_disable[label="preempt_disable"];
			_raw_read_lock_lock[label="_raw_read_lock_lock"];
			return_flags[label="return_flags"];
		}

		subgraph cluster__read_lock_irq{
			label="void __lockfunc _read_lock_irq(rwlock_t *lock)";
			local_irq_disable[label="local_irq_disable"];
			preempt_disable[label="preempt_disable"];
			_raw_read_lock_lock[label="_raw_read_lock_lock"];
		}

		subgraph cluster__read_lock_bh{
			label="void __lockfunc _read_lock_bh(rwlock_t *lock)";
			local_bh_disable[label="local_bh_disable"];
			preempt_disable[label="preempt_disable"];
			_raw_read_lock_lock[label="_raw_read_lock_lock"];
		}

		subgraph cluster__write_lock_irqsave{
			label="unsigned long __lockfunc _write_lock_irqsave(rwlock_t *lock)";
			local_irq_save_flags[label="local_irq_save_flags"];
			preempt_disable[label="preempt_disable"];
			_raw_write_lock_lock[label="_raw_write_lock_lock"];
			return_flags[label="return_flags"];
		}

		subgraph cluster__write_lock_irq{
			label="void __lockfunc _write_lock_irq(rwlock_t *lock)";
			local_irq_disable[label="local_irq_disable"];
			preempt_disable[label="preempt_disable"];
			_raw_write_lock_lock[label="_raw_write_lock_lock"];
		}

		subgraph cluster__write_lock_bh{
			label="void __lockfunc _write_lock_bh(rwlock_t *lock)";
			local_bh_disable[label="local_bh_disable"];
			preempt_disable[label="preempt_disable"];
			_raw_write_lock_lock[label="_raw_write_lock_lock"];
		}

		subgraph cluster__spin_lock{
			label="void __lockfunc _spin_lock(spinlock_t *lock)";
			preempt_disable[label="preempt_disable"];
			_raw_spin_lock_lock[label="_raw_spin_lock_lock"];
		}

		subgraph cluster__write_lock{
			label="void __lockfunc _write_lock(rwlock_t *lock)";
			preempt_disable[label="preempt_disable"];
			_raw_write_lock_lock[label="_raw_write_lock_lock"];
		}

		subgraph cluster_BUILD_LOCK_OPS{
			label="#define BUILD_LOCK_OPS(op, locktype)";
			define_op_lock_locktype_t_lock_func[label="define_op_lock_locktype_t_lock_func"];
			preempt_disable[label="preempt_disable"];
			dead_for[label="dead_for"];
			_raw_op_trylock_lock_true[label="_raw_op_trylock_lock_true"];
			preempt_enable[label="preempt_enable"];
			lock_break_lock_null[label="lock_break_lock_null"];
			set_lock_break_lock_1[label="set_lock_break_lock_1"];
			op_can_lock_lock_null_and_lock_break_lock_not_null[label="op_can_lock_lock_null_and_lock_break_lock_not_null"];
			cpu_relax[label="cpu_relax"];
			preempt_disable[label="preempt_disable"];
			lock_break_lock_0[label="lock_break_lock_0"];

			define_op_lock_irqsave_locktype_t_lock[label="define_op_lock_irqsave_locktype_t_lock"];
			preempt_disable[label="preempt_disable"];
			dead_for[label="dead_for"];
			local_irq_save_flags[label="local_irq_save_flags"];
			_raw_op_trylock_lock[label="_raw_op_trylock_lock"];
			local_irq_restore_flags[label="local_irq_restore_flags"];
			preempt_enable[label="preempt_enable"];
			lock_break_lock_null[label="lock_break_lock_null"];
			set_lock_break_lock_1[label="set_lock_break_lock_1"];
			op_can_lock_lock_null_and_lock_break_lock_not_null[label="op_can_lock_lock_null_and_lock_break_lock_not_null"];
			cpu_relax[label="cpu_relax"];
			preempt_disable[label="preempt_disable"];
			set_lock_break_lock_0[label="set_lock_break_lock_0"];
			return_flags[label="return_flags"];

			define_op_lock_irq_locktype_t_lock[label="define_op_lock_irq_locktype_t_lock"];
			_op_lock_irqsave_lock[label="_op_lock_irqsave_lock"];

			define_op_lock_bh_locktype_t_lock[label="define_op_lock_bh_locktype_t_lock"];
			set_flags__op_lock_irqsave_lock[label="set_flags__op_lock_irqsave_lock"];
			local_bh_disable[label="local_bh_disable"];
			local_irq_restore_flags[label="local_irq_restore_flags"];
		}

		subgraph cluster__spin_unlock{
			label="void __lockfunc _spin_unlock(spinlock_t *lock)";
			_raw_spin_unlock_lock[label="_raw_spin_unlock_lock"];
			preempt_enable[label="preempt_enable"];
		}

		subgraph cluster__write_unlock{
			label="void __lockfunc _write_unlock(rwlock_t *lock)";
			_raw_write_unlock_lock[label="_raw_write_unlock_lock"];
			preempt_enabel[label="preempt_enabel"];
		}

		subgraph cluster__read_unlock{
			label="void __lockfunc _read_unlock(rwlock_t *lock)";
			_raw_read_unlock_lock[label="_raw_read_unlock_lock"];
			preempt_enable[label="preempt_enable"];
		}

		subgraph cluster__spin_unlock_irqrestore{
			label="void __lockfunc _spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)";
			_raw_spin_unlock_lock[label="_raw_spin_unlock_lock"];
			local_irq_restore_flags[label="local_irq_restore_flags"];
			preempt_enable[label="preempt_enable"];
		}

		subgraph cluster__spin_unlock_irq{
			label="void __lockfunc _spin_unlock_irq(spinlock_t *lock)";
			_raw_spin_unlock_lock[label="_raw_spin_unlock_lock"];
			local_irq_enable[label="local_irq_enable"];
			preempt_enable[label="preempt_enable"];
		}

		subgraph cluster__spin_unlock_bh{
			label="void __lockfunc _spin_unlock_bh(spinlock_t *lock)";
			_raw_spin_unlock_lock[label="_raw_spin_unlock_lock"];
			preempt_enable_no_resched[label="preempt_enable_no_resched"];
			local_bh_enable[label="local_bh_enable"];
		}

		subgraph cluster__read_unlock_irqrestroe{
			label="void __lockfunc _read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)";
			_raw_read_unlock_lock[label="_raw_read_unlock_lock"];
			local_irq_restore_flags[label="local_irq_restore_flags"];
			preempt_enabel[label="preempt_enabel"];
		}

		subgraph cluster__read_unlock_irq{
			label="void __lockfunc _read_unlock_irq(rwlock_t *lock)";
			_raw_read_unlock[label="_raw_read_unlock"];
			local_irq_enable[label="local_irq_enable"];
			preempt_enable[label="preempt_enable"];
		}

		subgraph cluster__read_unlock_bh{
			label="void __lockfunc _read_unlock_bh(rwlock_t *lock)";
			_raw_read_unlock_lock[label="_raw_read_unlock_lock"];
			preempt_enable_no_resched[label="preempt_enable_no_resched"];
			local_bh_enable[label="local_bh_enable"];
		}

		subgraph cluster__write_unlock_irqrestroe{
			label="void __lockfunc _write_unlock_irqrestore(rwlock_t *lock, unsigned long flags)";
			_raw_write_unlock_lock[label="_raw_write_unlock_lock"];
			local_irq_restore_flags[label="local_irq_restore_flags"];
			preempt_enable[label="preempt_enable"];
		}

		subgraph cluster__write_unlock_irq{
			label="void __lockfunc _write_unlock_irq(rwlock_t *lock)";
			_raw_write_unlock_lock[label="_raw_write_unlock_lock"];
			local_irq_enable[label="local_irq_enable"];
			preempt_enable[label="preempt_enable"];
		}

		subgraph cluster__write_unlock_bh{
			label="void __lockfunc _write_unlock_bh(rwlock_t *lock)";
			_raw_write_unlock_lock[label="_raw_write_unlock_lock"];
			preempt_enable_no_resched[label="preempt_enable_no_resched"];
			local_bh_enable[label="local_bh_enable"];
		}

		subgraph cluster__spin_trylock_bh{
			label="int __lockfunc _spin_trylock_bh(spinlock_t *lock)";
			local_bh_disable[label="local_bh_disable"];
			preempt_disable[label="preempt_disable"];
			_raw_spin_trylock_lock_true[label="_raw_spin_trylock_lock_true"];
			return_1[label="return_1"];
			preempt_enable_no_resched[label="preempt_enable_no_resched"];
			local_bh_enable[label="local_bh_enable"];
			return_0[label="return_0"];
		}

		subgraph cluster_in_lock_functions{
			label="int in_lock_functions(unsigned long addr)";
			return_addr_not_small__lock_text_start_and_addr_small__lock_text_end[label="return_addr_not_small__lock_text_start_and_addr_small__lock_text_end"];
		}
        
}
