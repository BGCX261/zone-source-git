digraph rwsem_h{
	subgraph cluster_init_rwsem{
			label="static inline void init_rwsem(struct rw_semaphore *sem)";
			set_sem_count_RWSEM_UNLOCKED_VALUE[label="set_sem_count_RWSEM_UNLOCKED_VALUE"];
			lock_sem_wait_lock[label="lock_sem_wait_lock"];
			INIT_LIST_HEAD_sem_wait_list[label="INIT_LIST_HEAD_sem_wait_list"];
	}

	subgraph cluster__down_read{
			label="static inline void __down_read(struct rw_semaphore *sem)";
			__down_read_asm[label="	__asm__ __volatile__(
							\"# beginning down_read\n\t\"
							LOCK_PREFIX	\"  incl      (%%eax)\n\t\" /* adds 0x00000001, returns the old value */
							\"  js        2f\n\t\" /* jump if we weren't granted the lock */
							\"1:\n\t\"
							LOCK_SECTION_START(\"\")
							\"2:\n\t\"
							\"  pushl     %%ecx\n\t\"
							\"  pushl     %%edx\n\t\"
							\"  call      rwsem_down_read_failed\n\t\"
							\"  popl      %%edx\n\t\"
							\"  popl      %%ecx\n\t\"
							\"  jmp       1b\n\"
							LOCK_SECTION_END
							\"# ending down_read\n\t\"
							: \"=m\"(sem->count)
							: \"a\"(sem), \"m\"(sem->count)
							: \"memory\", \"cc\");"];
		}

		subgraph cluster___down_write{
				label="static inline void __down_write(struct rw_semaphore *sem)";

				__down_write[label="\"# beginning down_write\n\t\"
							 LOCK_PREFIX	\"  xadd      %%edx,(%%eax)\n\t\" /* subtract 0x0000ffff, returns the old value */
							 \"  testl     %%edx,%%edx\n\t\" /* was the count 0 before? */
							 \"  jnz       2f\n\t\" /* jump if we weren't granted the lock */
							 \"1:\n\t\"
							 LOCK_SECTION_START(\"\")
							 \"2:\n\t\"
							 \"  pushl     %%ecx\n\t\"
							 \"  call      rwsem_down_write_failed\n\t\"
							 \"  popl      %%ecx\n\t\"
							 \"  jmp       1b\n\"
							 LOCK_SECTION_END
							 \"# ending down_write\"
							 : \"=m\"(sem->count), \"=d\"(tmp)
							 : \"a\"(sem), \"1\"(tmp), \"m\"(sem->count)
							 : \"memory\", \"cc\");"];
		}

		subgraph cluster___up_read{
				label="static inline void __up_read(struct rw_semaphore *sem)";

				__up_read_asm[label="\"# beginning __up_read\n\t\"
							  LOCK_PREFIX	\"  xadd      %%edx,(%%eax)\n\t\" /* subtracts 1, returns the old value */
							  \"  js        2f\n\t\" /* jump if the lock is being waited upon */
							  \"1:\n\t\"
							  LOCK_SECTION_START(\"\")
							  \"2:\n\t\"
							  \"  decw      %%dx\n\t\" /* do nothing if still outstanding active readers */
							  \"  jnz       1b\n\t\"
							  \"  pushl     %%ecx\n\t\"
							  \"  call      rwsem_wake\n\t\"
							  \"  popl      %%ecx\n\t\"
							  \"  jmp       1b\n\"
							  LOCK_SECTION_END
							  \"# ending __up_read\n\"
							  : \"=m\"(sem->count), \"=d\"(tmp)
							  : \"a\"(sem), \"1\"(tmp), \"m\"(sem->count)
							  : \"memory\", \"cc\");"];
		}

		
}
