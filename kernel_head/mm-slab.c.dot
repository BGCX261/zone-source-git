digraph slab_c{
        subgraph cluster___alloc_percpu{
                label="void *__alloc_percpu (size_t size, size_t align)";
                kmalloc_percpu_data_pdata[label="kmalloc_percpu_data_pdata"];
                for_NR_CPUS[label="for_NR_CPUS"];
                cpu_possible_i[label="cpu_possible_i"];
                kmalloc_node_pdata_ptrs_i[label="kmalloc_node_pdata_ptrs_i"];
                goto_unwind_oom[label="goto_unwind_oom"];
                memset_pdata_ptrs_i[label="memset_pdata_ptrs_i"];
                return_rever_pdata[label="return_rever_pdata"];
                while_i_dec[label="while_i_dec"];
                cpu_possible_i_1[label="cpu_possible_i"];
                kfree_pdata_ptrs_i[label="kfree_pdata_ptrs_i"];
                kfree_pdata[label="kfree_pdata"];
                return_NULL[label="return_NULL"];
        }

        subgraph cluster_free_percpu{
                label="void free_percpu(const void *objp)";
                set_percpu_data_p_rever_objp[label="set_percpu_data_p_rever_objp"];
                for_NR_CPUS[label="for_NR_CPUS"];
                cpu_possible_i[label="cpu_possible_i"];
                kfree_p_ptrs_i[label="kfree_p_ptrs_i"];
                kfree_p[label="kfree_p"];
        }

        subgraph cluster_kmem_cache_init{
		label="void __init kmem_cache_init(void)";
		more_32MB[label="if (num_physpages > (32 << 20) >> PAGE_SHIFT)"];
		set_slab_break_gfp_order_BREAK_GFP_ORDER_HI[label="set_slab_break_gfp_order_BREAK_GFP_ORDER_HI"];
		init_MUTEX_cache_chain_sem[label="init_MUTEX_cache_chain_sem"];
		INIT_LIST_HEAD_cache_chain[label="INIT_LIST_HEAD_cache_chain"];
		list_add_cache_cache_next_cache_chain[label="list_add_cache_cache_next_cache_chain"];
		set_cache_cache_colour_off_cache_line_size[label="set_cache_cache_colour_off_cache_line_size"];
		set_cache_cache_array[label="cache_cache.array[smp_processor_id()] = &initarray_cache.cache;"];
		set_cache_cache_objsize[label="cache_cache.objsize = ALIGN(cache_cache.objsize, cache_line_size());"];
		cache_estimate[label="cache_estimate(0, cache_cache.objsize, cache_line_size(), 0,&left_over, &cache_cache.num);"];
		set_cache_cache_colour_left_over_div_cache_cache_colour_off[label="set_cache_cache_colour_left_over_div_cache_cache_colour_off"];
		clear_cache_cache_colour_next[label="clear_cache_cache_colour_next"];
		set_cache_cache_slab_size[label="cache_cache.slab_size = ALIGN(cache_cache.num*sizeof(kmem_bufctl_t) + sizeof(struct slab), cache_line_size());"];
		set_sizes_malloc_sizes[label="set_sizes_malloc_sizes"];
		set_names_cache_names[label="set_names_cache_names"];
		sizes_cs_size_not_eq_ULONG_MAX[label="sizes_cs_size_not_eq_ULONG_MAX"];
		set_cs_cachep[label="sizes->cs_cachep = kmem_cache_create(names->name,sizes->cs_size, ARCH_KMALLOC_MINALIGN,(ARCH_KMALLOC_FLAGS | SLAB_PANIC), NULL, NULL);"];
		OFF_SLAB_sizes_cs_cachep_null[label="OFF_SLAB_sizes_cs_cachep_null"];
		set_offslab_limit_sizes_cs_size_sub_sizeof_struct_slab[label="set_offslab_limit_sizes_cs_size_sub_sizeof_struct_slab"];
		offslab_limit_self_div_sizeof_kmem_bufctl_t[label="offslab_limit_self_div_sizeof_kmem_bufctl_t"];
		set_sizes_cs_dmacachep[label="sizes->cs_dmacachep = kmem_cache_create(names->name_dma,sizes->cs_size, ARCH_KMALLOC_MINALIGN,(ARCH_KMALLOC_FLAGS | SLAB_CACHE_DMA | SLAB_PANIC),NULL, NULL);"];
		inc_sizes[label="inc_sizes"];
		inc_names[label="inc_names"];
		set_ptr_kmalloc_struct_arraycache_init_GPF_KERNEL[label="set_ptr_kmalloc_struct_arraycache_init_GPF_KERNEL"];
		local_irq_disable[label="local_irq_disable"];
		memcpy_ptr_ac_data_cache_cache_struct_arraycache_init[label="memcpy_ptr_ac_data_cache_cache_struct_arraycache_init"];
		set_cache_cache_array[label="cache_cache.array[smp_processor_id()] = ptr;"];
		local_irq_enable[label="local_irq_enable"];
		set_ptr_kmalloc_struct_arraycache_init_GPF_KERNEL_1[label="set_ptr_kmalloc_struct_arraycache_init_GPF_KERNEL"];
		local_irq_disable[label="local_irq_disable"];
		memcpy[label="memcpy(ptr, ac_data(malloc_sizes[0].cs_cachep),sizeof(struct arraycache_init));"];
		set_malloc_size_0[label="malloc_sizes[0].cs_cachep->array[smp_processor_id()] = ptr;"];
		local_irq_enable[label="local_irq_enable"];
		down_cache_chain_sem[label="down_cache_chain_sem"];
		list_for_each_entry_cache_chain_next[label="list_for_each_entry_cache_chain_next"];
		enable_cpucache_cachep[label="enable_cpucache_cachep"];
		up_cache_chain_sem[label="up_cache_chain_sem"];
		set_g_cpucache_up_FULL[label="set_g_cpucache_up_FULL"];
		register_cpu_notifier_cpucache_notifier[label="register_cpu_notifier_cpucache_notifier"];
	}

	subgraph cluster_kmem_cache_create{
		label="kmem_cache_t *kmem_cache_create (const char *name, size_t size, size_t align,unsigned long flags, void (*ctor)(void*, kmem_cache_t *, unsigned long),void (*dtor)(void*, kmem_cache_t *, unsigned long))";
		clear_kmem_cache_t_cachep[label="clear_kmem_cache_t_cachep"];
		name_null_or_interrupt_null_or_size_small_BYTES_PER_WORD_or_size_great_1_move_left_MAX_OBJ_ORDER_multi_PAGE_SIZE_or_dtor_not_null_but_ctor_null[label="name_null_or_interrupt_null_or_size_small_BYTES_PER_WORD_or_size_great_1_move_left_MAX_OBJ_ORDER_multi_PAGE_SIZE_or_dtor_not_null_but_ctor_null"];
		BUG[label="BUG"];
		flags_SLAB_DESTROY_BY_RCU_set[label="flags_SLAB_DESTROY_BY_RCU_set"];
		BUG_ON_dtor[label="BUG_ON_dtor"];
		flags_rever_CREATE_MASK_set[label="flags_rever_CREATE_MASK_set"];
		BUG[label="BUG"];
		size_and_BYTES_PER_WORD_sub_1_not_0[label="size_and_BYTES_PER_WORD_sub_1_not_0"];
		size_self_add_BYTES_PER_WORK_sub_1[label="size_self_add_BYTES_PER_WORK_sub_1"];
		size_self_and_rever_BYTES_PER_WORD_sub_1[label="size_self_and_rever_BYTES_PER_WORD_sub_1"];
		flags_SLAB_HWCACHE_ALIGN_set[label="flags_SLAB_HWCACHE_ALIGN_set"];
		set_ralign_cache_line_size[label="set_ralign_cache_line_size"];
		size_not_greate_ralign_div_2[label="size_not_greate_ralign_div_2"];
		ralign_self_div_2[label="ralign_self_div_2"];
		set_ralign_BYTES_PER_WORD[label="set_ralign_BYTES_PER_WORD"];
		ralign_small_ARCH_SLAB_MINALIGN[label="ralign_small_ARCH_SLAB_MINALIGN"];
		set_ralign_ARCH_SLAB_MINALIGN[label="set_ralign_ARCH_SLAB_MINALIGN"];
		ralign_greate_BYTES_PER_WORD[label="ralign_greate_BYTES_PER_WORD"];
		clear_flags_SLAB_RED_ZONE_or_SLAB_STORE_USER[label="clear_flags_SLAB_RED_ZONE_or_SLAB_STORE_USER"];
		ralign_small_align[label="ralign_small_align"];
		set_ralign_align[label="set_ralign_align"];
		ralign_great_BYTES_PER_WORD[label="ralign_great_BYTES_PER_WORD"];
		clear_flags_SLAB_RED_ZONE_or_SLAB_STORE_USER_1[label="clear_flags_SLAB_RED_ZONE_or_SLAB_STORE_USER"];
		set_align_ralign[label="set_align_ralign"];
		set_cachep_kmem_cache_alloc_cache_cache_SLAB_KERNEL[label="set_cachep_kmem_cache_alloc_cache_cache_SLAB_KERNEL"];
		cachep_null[label="cachep_null"];
		memset_cachep_0_kmem_cache_t[label="memset_cachep_0_kmem_cache_t"];
		size_not_small_PAGE_SIZE_move_right_3[label="size_not_small_PAGE_SIZE_move_right_3"];
		set_flags_CFLGS_OFF_SLAB[label="set_flags_CFLGS_OFF_SLAB"];
		set_size_ALIGN_size_align[label="set_size_ALIGN_size_align"];
		flags_SLAB_RECLAIM_ACCOUNT_set_and_size_not_great_PAGE_SIZE[label="flags_SLAB_RECLAIM_ACCOUNT_set_and_size_not_great_PAGE_SIZE"];
		clear_cachep_gfporder[label="clear_cachep_gfporder"];
		cache_estimate[label="cache_estimate(cachep->gfporder, size, align, flags,&left_over, &cachep->num);"];
		clear_break_flag[label="clear_break_flag"];
		cache_estimate_1[label="cache_estimate(cachep->gfporder, size, align, flags,&left_over, &cachep->num);"];
		break_flag_true[label="break_flag_true"];
		cachep_gfporder_not_small_MAX_GFP_ORDER[label="cachep_gfporder_not_small_MAX_GFP_ORDER"];
		cachep_num_null[label="cachep_num_null"];
		flags_CFLGS_OFF_SLAB_set_and_cachep_num_great_offslab_limit[label="flags_CFLGS_OFF_SLAB_set_and_cachep_num_great_offslab_limit"];
		dec_cachep_gfporder[label="dec_cachep_gfporder"];
		inc_break_flag[label="inc_break_flag"];
		cachep_gfporder_not_small_slab_break_gfp_order[label="cachep_gfporder_not_small_slab_break_gfp_order"];
		left_over_multi_8_not_great_PAGE_SIZE_move_left_cachep_gfporder[label="left_over_multi_8_not_great_PAGE_SIZE_move_left_cachep_gfporder"];
		inc_cachep_gfporder[label="inc_cachep_gfporder"];
		cachep_num_null[label="cachep_num_null"];
		kmem_cache_free_cache_cache_cachep[label="kmem_cache_free_cache_cache_cachep"];
		clear_cachep[label="clear_cachep"];
		set_slab_size[label="slab_size = ALIGN(cachep->num*sizeof(kmem_bufctl_t)+ sizeof(struct slab), align);"];
		flags_CFLGS_OFF_SLAB_set_and_left_over_not_small_slab_size[label="flags_CFLGS_OFF_SLAB_set_and_left_over_not_small_slab_size"];
		clear_flags_CFLGS_OFF_SLAB[label="clear_flags_CFLGS_OFF_SLAB"];
		left_over_self_sub_slab_size[label="left_over_self_sub_slab_size"];
		flags_CFLGS_OFF_SLAB_set[label="flags_CFLGS_OFF_SLAB_set"];
		set_slab_size_1[label="slab_size = cachep->num*sizeof(kmem_bufctl_t)+sizeof(struct slab);"];
		cachep_colour_off_cache_line_size[label="cachep_colour_off_cache_line_size"];
		cachep_colour_off_small_align[label="cachep_colour_off_small_align"];
		cachep_colour_off_align[label="cachep_colour_off_align"];
		set_cachep_colour_left_over_div_cachep_colour_off[label="set_cachep_colour_left_over_div_cachep_colour_off"];
		set_cachep_slab_size_slab_size[label="set_cachep_slab_size_slab_size"];
		set_cachep_flags_flags[label="set_cachep_flags_flags"];
		clear_cachep_gfpflags[label="clear_cachep_gfpflags"];
		flags_SLAB_CACHE_DMA_set[label="flags_SLAB_CACHE_DMA_set"];
		set_cachep_gfpflags_GFP_DMA[label="set_cachep_gfpflags_GFP_DMA"];
		lock_cachep_spinlock[label="lock_cachep_spinlock"];
		set_cachep_objsize_size[label="set_cachep_objsize_size"];
		INIT_LIST_HEAD_cachep_lists_slabs_full[label="INIT_LIST_HEAD_cachep_lists_slabs_full"];
		INIT_LIST_HEAD_cachep_lists_slabs_partial[label="INIT_LIST_HEAD_cachep_lists_slabs_partial"];
		INIT_LIST_HEAD_cachep_lists_slabs_free[label="INIT_LIST_HEAD_cachep_lists_slabs_free"];
		flags_CFLGS_OFF_SLAB_set_1[label="flags_CFLGS_OFF_SLAB_set"];
		set_cachep_slabp_cache_kmem_find_general_cachep_slab_size_0[label="set_cachep_slabp_cache_kmem_find_general_cachep_slab_size_0"];
		set_cachep_ctor_ctor[label="set_cachep_ctor_ctor"];
		set_cachep_dtor_dtor[label="set_cachep_dtor_dtor"];
		set_cachep_name_name[label="set_cachep_name_name"];
		lock_cpu_hotplug[label="lock_cpu_hotplug"];
		g_cpucache_up_eq_FULL[label="g_cpucache_up_eq_FULL"];
		enable_cpucache_cachep[label="enable_cpucache_cachep"];
		g_cpucache_up_eq_NONE[label="g_cpucache_up_eq_NONE"];
		set_cachep_array[label="cachep->array[smp_processor_id()] = &initarray_generic.cache;"];
		set_g_cpucache_up_PARTIAL[label="set_g_cpucache_up_PARTIAL"];
		set_cachep_array_1[label="cachep->array[smp_processor_id()] = kmalloc(sizeof(struct arraycache_init),GFP_KERNEL);"];
		set_ac_data_cachep_avail_0[label="set_ac_data_cachep_avail_0"];
		set_ac_data_cachep_limit_BOOT_CPUCACHE_ENTRIES[label="set_ac_data_cachep_limit_BOOT_CPUCACHE_ENTRIES"];
		set_ac_data_cachep_batchcount_1[label="set_ac_data_cachep_batchcount_1"];
		set_ac_data_cachep_touched_0[label="set_ac_data_cachep_touched_0"];
		set_cachep_batchcount_1[label="set_cachep_batchcount_1"];
		set_cachep_limit_BOOT_CPUCACHE_ENTRIES[label="set_cachep_limit_BOOT_CPUCACHE_ENTRIES"];
		set_cachep_free_limit[label="cachep->free_limit = (1+num_online_cpus())*cachep->batchcount+ cachep->num;"];
		set_cachep_lists_next_reap[label="cachep->lists.next_reap = jiffies + REAPTIMEOUT_LIST3 +((unsigned long)cachep)%REAPTIMEOUT_LIST3;"];
		down_cache_chain_sem[label="down_cache_chain_sem"];
		set_old_fs_get_fs[label="set_old_fs_get_fs"];
		set_fs_KERNEL_DS[label="set_fs_KERNEL_DS"];
		list_for_p_each_cache_chain[label="list_for_p_each_cache_chain"];
		set_pc_list_entry_p_kmem_cache_t_next[label="set_pc_list_entry_p_kmem_cache_t_next"];
		__get_user_tmp_pc_name[label="__get_user_tmp_pc_name"];
		strcmp_pc_name_name_null[label="strcmp_pc_name_name_null"];
		up_cache_chain_sem[label="up_cache_chain_sem"];
		unlock_cpu_hotplug[label="unlock_cpu_hotplug"];
		set_fs_old_fs[label="set_fs_old_fs"];
		list_add_cachep_next_cache_chain[label="list_add_cachep_next_cache_chain"];
		up_cache_chain_sem_1[label="up_cache_chain_sem"];
		unlock_cpu_hotplug_1[label="unlock_cpu_hotplug"];
		cachep_null_and_flags_SLAB_PANIC_set[label="cachep_null_and_flags_SLAB_PANIC_set"];
		return_cachep[label="return_cachep"];
	}

	subgraph cluster_kmem_cache_destroy{
		label="int kmem_cache_destroy(kmem_cache_t * cachep)";
		cachep_null_or_in_interrupt[label="cachep_null_or_in_interrupt"];
		lock_cpu_hotplug[label="lock_cpu_hotplug"];
		donw_cache_chain_sem[label="donw_cache_chain_sem"];
		list_del_cachep_next[label="list_del_cachep_next"];
		up_cache_chain_sem[label="up_cache_chain_sem"];
		__cache_shrink_cachep[label="__cache_shrink_cachep"];
		donw_cache_chain_sem[label="donw_cache_chain_sem"];
		list_add_cachep_next_cache_chain[label="list_add_cachep_next_cache_chain"];
		up_cache_chain_sem[label="up_cache_chain_sem"];
		unlock_cpu_hotplug[label="unlock_cpu_hotplug"];
		return_1[label="return_1"];
		cachep_flags_SLAB_DESTROY_BY_RCU_set[label="cachep_flags_SLAB_DESTROY_BY_RCU_set"];
		synchronize_rcu[label="synchronize_rcu"];
		for_NR_CPUS[label="for_NR_CPUS"];
		kfree_cachep_array_i[label="kfree_cachep_array_i"];
		kfree_cachep_lists_chared[label="kfree_cachep_lists_chared"];
		clear_cachep_lists_chared[label="clear_cachep_lists_chared"];
		kmem_cache_free_cache_cache_cachep[label="kmem_cache_free_cache_cache_cachep"];
		unlock_cpu_hotplug[label="unlock_cpu_hotplug"];
	}

	subgraph cluster_cache_grow{
		label="static int cache_grow(kmem_cache_t *cachep, unsigned int __nocast flags, int nodeid)";
		flags_rever_SLAB_DMA_or_SLAB_LEVEL_MASK_or_SLAB_NO_GROW_set[label="flags_rever_SLAB_DMA_or_SLAB_LEVEL_MASK_or_SLAB_NO_GROW_set"];
		BUG[label="BUG"];
		flags_SLAB_NO_GROW_set[label="flags_SLAB_NO_GROW_set"];
		return_0[label="return_0"];
		set_ctor_flags_SLAB_CTOR_CONSTRUCTOR[label="set_ctor_flags_SLAB_CTOR_CONSTRUCTOR"];
		set_local_flags[label="local_flags = (flags & SLAB_LEVEL_MASK);"];
		local_flags___GFP_WAIT_clear[label="local_flags___GFP_WAIT_clear"];
		set_ctor_flags_SLAB_CTOR_ATOMIC[label="set_ctor_flags_SLAB_CTOR_ATOMIC"];
		check_irq_off[label="check_irq_off"];
		lock_cachep_spinlock[label="lock_cachep_spinlock"];
		set_offset_cachep_colour_next[label="set_offset_cachep_colour_next"];
		inc_cachep_colour_next[label="inc_cachep_colour_next"];
		cachep_colour_next_not_small_cachep_colour[label="cachep_colour_next_not_small_cachep_colour"];
		clear_cachep_colour_next[label="clear_cachep_colour_next"];
		offset_self_multi_cachep_colour_off[label="offset_self_multi_cachep_colour_off"];
		unlock_cachep_spinlock[label="unlock_cachep_spinlock"];
		local_flags___GFP_WAIT_set[label="local_flags___GFP_WAIT_set"];
		local_irq_enable[label="local_irq_enable"];
		kmem_flagchech_cachep_flags[label="kmem_flagchech_cachep_flags"];
		set_objp_kmem_getpages_cachep_flags_nodeid[label="set_objp_kmem_getpages_cachep_flags_nodeid"];
		objp_null[label="objp_null"];
		set_slabp_alloc_slabmgmt_cachep_objp_offset_local_flags[label="set_slabp_alloc_slabmgmt_cachep_objp_offset_local_flags"];
		set_slab_attr_cachep_slabp_objp[label="set_slab_attr_cachep_slabp_objp"];
		cache_init_objs_cachep_slabp_ctor_flags[label="cache_init_objs_cachep_slabp_ctor_flags"];
		local_flags___GFP_WAIT_set[label="local_flags___GFP_WAIT_set"];
		local_irq_disable[label="local_irq_disable"];
		check_irq_off[label="check_irq_off"];
		spin_lock_cachep_spinlock[label="spin_lock_cachep_spinlock"];
		list_add_tail[label="list_add_tail(&slabp->list, &(list3_data(cachep)->slabs_free));"];
		STATS_INC_GROWN_cachep[label="STATS_INC_GROWN_cachep"];
		list3_data_cachep_free_objects_self_add_cachep_num[label="list3_data_cachep_free_objects_self_add_cachep_num"];
		unlock_cachep_spinlock[label="unlock_cachep_spinlock"];
		return_1[label="return_1"];
		kmem_freepages_cachep_objp[label="kmem_freepages_cachep_objp"];
		local_flags___GFP_WAIT_set[label="local_flags___GFP_WAIT_set"];
		local_irq_disable[label="local_irq_disable"];
		return_0[label="return_0"];
	}

	subgraph cluster_kmem_getpages{
		label="static void *kmem_getpages(kmem_cache_t *cachep, unsigned int __nocast flags, int nodeid)";
		set_flags_cachep_gfpflags[label="set_flags_cachep_gfpflags"];
		nodeid_eq_neg_1[label="nodeid_eq_neg_1"];
		set_page_alloc_pages_flags_cachep_gfporder[label="set_page_alloc_pages_flags_cachep_gfporder"];
		set_page_alloc_pages_node_nodeid_flags_cachep_gfporder[label="set_page_alloc_pages_node_nodeid_flags_cachep_gfporder"];
		page_null[label="page_null"];
		return_NULL[label="return_NULL"];
		set_addr_page_address_page[label="set_addr_page_address_page"];
		set_i_1_move_left_cachep_gfporder[label="set_i_1_move_left_cachep_gfporder"];
		cachep_flags_SLAB_RECLAIM_ACCOUNT_set[label="cachep_flags_SLAB_RECLAIM_ACCOUNT_set"];
		atomic_add_i_slab_reclaim_pages[label="atomic_add_i_slab_reclaim_pages"];
		add_page_state_nr_slab_i[label="add_page_state_nr_slab_i"];
		dec_i[label="dec_i"];
		SetPageSlab_page[label="SetPageSlab_page"];
		inc_page[label="inc_page"];
		return_addr[label="return_addr"];
	}

	subgraph cluster_kmem_freepages{
		label="static void kmem_freepages(kmem_cache_t *cachep, void *addr)";
		set_i_1_move_left_cachep_gfporder[label="set_i_1_move_left_cachep_gfporder"];
		set_page_virt_to_page_addr[label="set_page_virt_to_page_addr"];
		dec_i[label="dec_i"];
		TestClearPageSlab_page_false[label="TestClearPageSlab_page"];
		BUG[label="BUG"];
		inc_page[label="inc_page"];
		sub_page_state_nr_slab_nr_freed[label="sub_page_state_nr_slab_nr_freed"];
		current_reclaim_state[label="current_reclaim_state"];
		current_reclaim_state_reclaimed_slab_self_add_nr_freed[label="current_reclaim_state_reclaimed_slab_self_add_nr_freed"];
		free_pages_addr_cachep_gfporder[label="free_pages_addr_cachep_gfporder"];
		cachep_flags_SLAB_RECLAIM_ACCOUNT_set[label="cachep_flags_SLAB_RECLAIM_ACCOUNT_set"];
		atomic_sub_1_move_left_cachep_gfporder_slab_reclaim_pages[label="atomic_sub_1_move_left_cachep_gfporder_slab_reclaim_pages"];
	}

	subgraph cluster_alloc_slabmgmt{
		label="static struct slab* alloc_slabmgmt(kmem_cache_t *cachep,void *objp, int colour_off, unsigned int __nocast local_flags)";
		OFF_SLAB_cachep[label="OFF_SLAB_cachep"];
		set_slabp_kmem_cache_alloc_cachep_slabp_cache_local_flags[label="set_slabp_kmem_cache_alloc_cachep_slabp_cache_local_flags"];
		slabp_null[label="slabp_null"];
		return_NULL[label="return_NULL"];
		set_slabp_objp_add_colour_off[label="set_slabp_objp_add_colour_off"];
		colour_off_self_add_cachep_slab_size[label="colour_off_self_add_cachep_slab_size"];
		clear_slabp_inuse[label="clear_slabp_inuse"];
		set_slabp_colouroff_colour_off[label="set_slabp_colouroff_colour_off"];
		set_slabp_s_mem_objp_add_colour_off[label="set_slabp_s_mem_objp_add_colour_off"];
		return_slabp[label="return_slabp"];
	}

	subgraph cluster_cache_init_objs{
		label="static void cache_init_objs(kmem_cache_t *cachep,struct slab *slabp, unsigned long ctor_flags)";
		for_cachep_num[label="for_cachep_num"];
		set_slabp_s_mem_add_cachep_objsize_multi_i[label="set_slabp_s_mem_add_cachep_objsize_multi_i"];
		cachep_ctor_not_null[label="cachep_ctor_not_null"];
		cachep_ctor_objp_cachep_ctor_flags[label="cachep_ctor_objp_cachep_ctor_flags"];
		set_slab_bufctl[label="slab_bufctl(slabp)[i] = i+1;"];
		set_bufctl_i_sub_1[label="slab_bufctl(slabp)[i-1] = BUFCTL_END;"];
		set_slabp_free_0[label="set_slabp_free_0"];
	}

	subgraph cluster_slab_destroy{
		label="static void slab_destroy (kmem_cache_t *cachep, struct slab *slabp)";
		set_addr_slabp_s_mem_sub_slabp_colouroff[label="set_addr_slabp_s_mem_sub_slabp_colouroff"];
		cachep_flags_SLAB_DESTROY_BY_RCU[label="cachep_flags_SLAB_DESTROY_BY_RCU"];
		set_slab_rcu_slabp[label="set_slab_rcu_slabp"];
		slab_rcu_cachep_cachep[label="slab_rcu_cachep_cachep"];
		set_slab_rcu_addr_addr[label="set_slab_rcu_addr_addr"];
		call_rcu_slab_rcu_head_kmem_rcu_free[label="call_rcu_slab_rcu_head_kmem_rcu_free"];
		keme_freepages_cachep_addr[label="keme_freepages_cachep_addr"];
		OFF_SLAB_cachep[label="OFF_SLAB_cachep"];
		kmem_cache_free_cachep_slabp_cache_slabp[label="kmem_cache_free_cachep_slabp_cache_slabp"];
	}

	subgraph cluster_kmem_cache_alloc{
		label="void *kmem_cache_alloc(kmem_cache_t *cachep, unsigned int __nocast flags)";
		__cache_alloc_cachep_flags[label="__cache_alloc_cachep_flags"];
	}

	subgraph cluster___cache_alloc{
		label="static inline void *__cache_alloc(kmem_cache_t *cachep, unsigned int __nocast flags)";
		cache_alloc_debugcheck_before_cachep_flags[label="cache_alloc_debugcheck_before_cachep_flags"];
		local_irq_save[label="local_irq_save"];
		set_ac_ac_data_cachep[label="set_ac_ac_data_cachep"];
		ac_avail[label="ac_avail"];
		STATS_INC_ALLOCHIT[label="STATS_INC_ALLOCHIT"];
		set_ac_touched_1[label="set_ac_touched_1"];
		set_objp_ac_entry[label="objp = ac_entry(ac)[--ac->avail];"];
		STATS_INC_ALLOCMISS_cachep[label="STATS_INC_ALLOCMISS_cachep"];
		set_objp_cache_alloc_refill_cachep_flags[label="set_objp_cache_alloc_refill_cachep_flags"];
		local_irq_restore[label="local_irq_restore"];
		set_objp_cache_alloc_debugcheck_after[label="objp = cache_alloc_debugcheck_after(cachep, flags, objp, __builtin_return_address(0));"];
		return_objp[label="return_objp"];
	}

        subgraph cluster_cache_alloc_refill{
                label="static void *cache_alloc_refill(kmem_cache_t *cachep, unsigned int __nocast flags)";
                check_irq_off[label="check_irq_off ()"];
                set_ac_ac_data_cachep[label="set_ac_ac_data_cachep"];
                set_batchcount_ac_batchcount[label="set_batchcount_ac_batchcount"];
                ac_touched_null_and_batchcount_great_BATCHREFILL_LIMIT[label="ac_touched_null_and_batchcount_great_BATCHREFILL_LIMIT"];
                set_batchcount_BATCHREFILL_LIMIT[label="set_batchcount_BATCHREFILL_LIMIT"];
                set_l3_list3_data_cachep[label="set_l3_list3_data_cachep"];
                spin_lock_cachep_spinlock[label="spin_lock_cachep_spinlock"];
                l3_shared_not_null[label="l3_shared_not_null"];
                set_share_array_l3_shared[label="set_share_array_l3_shared"];
                shared_array_avail_not_null[label="shared_array_avail_not_null"];
                batchcount_great_shared_array_avail[label="batchcount_great_shared_array_avail"];
                shard_array_avail_self_sub_batchcount[label="shard_array_avail_self_sub_batchcount"];
                memcpy[label="memcpy(ac_entry(ac), &ac_entry(shared_array)[shared_array->avail],sizeof(void*)*batchcount);"];
                set_shared_array_touched_1[label="set_shared_array_touched_1"];
                batchcount_great_0[label="batchcount_great_0"];
                set_entry_l3_slabs_partial_next[label="set_entry_l3_slabs_partial_next"];
                entry_eq_l3_slabs_partial[label="entry_eq_l3_slabs_partial"];
                set_l3_free_touched[label="set_l3_free_touched"];
                set_entry_l3_slabs_free_next[label="set_entry_l3_slabs_free_next"];
                entry_eq_l3_slabs_free[label="entry_eq_l3_slabs_free"];
                set_slabp_list_entry_struct_slab_list[label="set_slabp_list_entry_struct_slab_list"];
                check_slabp_cachep_slabp[label="check_slabp_cachep_slabp"];
                check_spinlock_acquired_cachep[label="check_spinlock_acquired_cachep"];
                slabp_inuse_small_cachep_num_and_batchcount_dec_not_null[label="slabp_inuse_small_cachep_num_and_batchcount_dec_not_null"];
                STATS_INC_ALLOCED_cachep[label="STATS_INC_ALLOCED_cachep"];
                STATS_INC_ACTIVE_cachep[label="STATS_INC_ACTIVE_cachep"];
                STATS_SET_HIGH_cachep[label="STATS_SET_HIGH_cachep"];
                set_ac_entry[label="ac_entry(ac)[ac->avail++] = slabp->s_mem + slabp->free*cachep->objsize;"];
                inc_slabp_inuse[label="inc_slabp_inuse"];
                set_next_slab_bufctl[label="next = slab_bufctl(slabp)[slabp->free];"];
                set_slab_bufctl[label="slab_bufctl(slabp)[slabp->free] = BUFCTL_FREE;"];
                set_slabp_free_next[label="set_slabp_free_next"];
                check_slabp_cachep_slabp[label="check_slabp_cachep_slabp"];
                

                        }
        
}
