digraph slab_c{
        subgraph cluster___alloc_percpu{
                label="void *__alloc_percpu (size_t size, size_t align)";
                kmalloc_percpu_data_pdata[label="kmalloc_percpu_data_pdata"];
                for_NR_CPUS[label="for_NR_CPUS"];
                cpu_possible_i[label="cpu_possible_i"];
                kmalloc_node_pdata_ptrs_i[label="kmalloc_node_pdata_ptrs_i"];
                goto_unwind_oom[label="goto_unwind_oom"];
                memset_pdata_ptrs_i[label="memset_pdata_ptrs_i"];
                return_rever_pdata[label="return_rever_pdata"];
                while_i_dec[label="while_i_dec"];
                cpu_possible_i_1[label="cpu_possible_i"];
                kfree_pdata_ptrs_i[label="kfree_pdata_ptrs_i"];
                kfree_pdata[label="kfree_pdata"];
                return_NULL[label="return_NULL"];
        }

        subgraph cluster_free_percpu{
                label="void free_percpu(const void *objp)";
                set_percpu_data_p_rever_objp[label="set_percpu_data_p_rever_objp"];
                for_NR_CPUS[label="for_NR_CPUS"];
                cpu_possible_i[label="cpu_possible_i"];
                kfree_p_ptrs_i[label="kfree_p_ptrs_i"];
                kfree_p[label="kfree_p"];
        }

        subgraph cluster_kmem_cache_init{
				label="void __init kmem_cache_init(void)";
				more_32MB[label="if (num_physpages > (32 << 20) >> PAGE_SHIFT)"];
				set_slab_break_gfp_order_BREAK_GFP_ORDER_HI[label="set_slab_break_gfp_order_BREAK_GFP_ORDER_HI"];
				init_MUTEX_cache_chain_sem[label="init_MUTEX_cache_chain_sem"];
				INIT_LIST_HEAD_cache_chain[label="INIT_LIST_HEAD_cache_chain"];
				list_add_cache_cache_next_cache_chain[label="list_add_cache_cache_next_cache_chain"];
				set_cache_cache_colour_off_cache_line_size[label="set_cache_cache_colour_off_cache_line_size"];
				set_cache_cache_array[label="cache_cache.array[smp_processor_id()] = &initarray_cache.cache;"];
				set_cache_cache_objsize[label="cache_cache.objsize = ALIGN(cache_cache.objsize, cache_line_size());"];
				cache_estimate[label="cache_estimate(0, cache_cache.objsize, cache_line_size(), 0,&left_over, &cache_cache.num);"];
				set_cache_cache_colour_left_over_div_cache_cache_colour_off[label="set_cache_cache_colour_left_over_div_cache_cache_colour_off"];
				clear_cache_cache_colour_next[label="clear_cache_cache_colour_next"];
				set_cache_cache_slab_size[label="cache_cache.slab_size = ALIGN(cache_cache.num*sizeof(kmem_bufctl_t) + sizeof(struct slab), cache_line_size());"];
				set_sizes_malloc_sizes[label="set_sizes_malloc_sizes"];
				set_names_cache_names[label="set_names_cache_names"];
				sizes_cs_size_not_eq_ULONG_MAX[label="sizes_cs_size_not_eq_ULONG_MAX"];
				set_cs_cachep[label="sizes->cs_cachep = kmem_cache_create(names->name,sizes->cs_size, ARCH_KMALLOC_MINALIGN,(ARCH_KMALLOC_FLAGS | SLAB_PANIC), NULL, NULL);"];
				OFF_SLAB_sizes_cs_cachep_null[label="OFF_SLAB_sizes_cs_cachep_null"];
				set_offslab_limit_sizes_cs_size_sub_sizeof_struct_slab[label="set_offslab_limit_sizes_cs_size_sub_sizeof_struct_slab"];
				offslab_limit_self_div_sizeof_kmem_bufctl_t[label="offslab_limit_self_div_sizeof_kmem_bufctl_t"];
				set_sizes_cs_dmacachep[label="sizes->cs_dmacachep = kmem_cache_create(names->name_dma,sizes->cs_size, ARCH_KMALLOC_MINALIGN,(ARCH_KMALLOC_FLAGS | SLAB_CACHE_DMA | SLAB_PANIC),NULL, NULL);"];
				inc_sizes[label="inc_sizes"];
				inc_names[label="inc_names"];
				set_ptr_kmalloc_struct_arraycache_init_GPF_KERNEL[label="set_ptr_kmalloc_struct_arraycache_init_GPF_KERNEL"];
				local_irq_disable[label="local_irq_disable"];
				memcpy_ptr_ac_data_cache_cache_struct_arraycache_init[label="memcpy_ptr_ac_data_cache_cache_struct_arraycache_init"];
				set_cache_cache_array[label="cache_cache.array[smp_processor_id()] = ptr;"];
				local_irq_enable[label="local_irq_enable"];
				set_ptr_kmalloc_struct_arraycache_init_GPF_KERNEL_1[label="set_ptr_kmalloc_struct_arraycache_init_GPF_KERNEL"];
				local_irq_disable[label="local_irq_disable"];
				memcpy[label="memcpy(ptr, ac_data(malloc_sizes[0].cs_cachep),sizeof(struct arraycache_init));"];
				set_malloc_size_0[label="malloc_sizes[0].cs_cachep->array[smp_processor_id()] = ptr;"];
				local_irq_enable[label="local_irq_enable"];
				down_cache_chain_sem[label="down_cache_chain_sem"];
				list_for_each_entry_cache_chain_next[label="list_for_each_entry_cache_chain_next"];
				enable_cpucache_cachep[label="enable_cpucache_cachep"];
				up_cache_chain_sem[label="up_cache_chain_sem"];
				set_g_cpucache_up_FULL[label="set_g_cpucache_up_FULL"];
				register_cpu_notifier_cpucache_notifier[label="register_cpu_notifier_cpucache_notifier"];
		}

		subgraph cluster_kmem_cache_create{
				label="kmem_cache_t *kmem_cache_create (const char *name, size_t size, size_t align,unsigned long flags, void (*ctor)(void*, kmem_cache_t *, unsigned long),void (*dtor)(void*, kmem_cache_t *, unsigned long))";
				clear_kmem_cache_t_cachep[label="clear_kmem_cache_t_cachep"];
				name_null_or_interrupt_null_or_size_small_BYTES_PER_WORD_or_size_great_1_move_left_MAX_OBJ_ORDER_multi_PAGE_SIZE_or_dtor_not_null_but_ctor_null[label="name_null_or_interrupt_null_or_size_small_BYTES_PER_WORD_or_size_great_1_move_left_MAX_OBJ_ORDER_multi_PAGE_SIZE_or_dtor_not_null_but_ctor_null"];
				BUG[label="BUG"];
				flags_SLAB_DESTROY_BY_RCU_set[label="flags_SLAB_DESTROY_BY_RCU_set"];
				BUG_ON_dtor[label="BUG_ON_dtor"];
				flags_rever_CREATE_MASK_set[label="flags_rever_CREATE_MASK_set"];
				BUG[label="BUG"];
				size_and_BYTES_PER_WORD_sub_1_not_0[label="size_and_BYTES_PER_WORD_sub_1_not_0"];
				size_self_add_BYTES_PER_WORK_sub_1[label="size_self_add_BYTES_PER_WORK_sub_1"];
				size_self_and_rever_BYTES_PER_WORD_sub_1[label="size_self_and_rever_BYTES_PER_WORD_sub_1"];
				flags_SLAB_HWCACHE_ALIGN_set[label="flags_SLAB_HWCACHE_ALIGN_set"];
				set_ralign_cache_line_size[label="set_ralign_cache_line_size"];
				size_not_greate_ralign_div_2[label="size_not_greate_ralign_div_2"];
				ralign_self_div_2[label="ralign_self_div_2"];
				set_ralign_BYTES_PER_WORD[label="set_ralign_BYTES_PER_WORD"];
				ralign_small_ARCH_SLAB_MINALIGN[label="ralign_small_ARCH_SLAB_MINALIGN"];
				set_ralign_ARCH_SLAB_MINALIGN[label="set_ralign_ARCH_SLAB_MINALIGN"];
				ralign_greate_BYTES_PER_WORD[label="ralign_greate_BYTES_PER_WORD"];
				clear_flags_SLAB_RED_ZONE_or_SLAB_STORE_USER[label="clear_flags_SLAB_RED_ZONE_or_SLAB_STORE_USER"];
				ralign_small_align[label="ralign_small_align"];
				set_ralign_align[label="set_ralign_align"];
				ralign_great_BYTES_PER_WORD[label="ralign_great_BYTES_PER_WORD"];
				clear_flags_SLAB_RED_ZONE_or_SLAB_STORE_USER_1[label="clear_flags_SLAB_RED_ZONE_or_SLAB_STORE_USER"];
				set_align_ralign[label="set_align_ralign"];
				set_cachep_kmem_cache_alloc_cache_cache_SLAB_KERNEL[label="set_cachep_kmem_cache_alloc_cache_cache_SLAB_KERNEL"];
				cachep_null[label="cachep_null"];
				memset_cachep_0_kmem_cache_t[label="memset_cachep_0_kmem_cache_t"];
				size_not_small_PAGE_SIZE_move_right_3[label="size_not_small_PAGE_SIZE_move_right_3"];
				set_flags_CFLGS_OFF_SLAB[label="set_flags_CFLGS_OFF_SLAB"];
				set_size_ALIGN_size_align[label="set_size_ALIGN_size_align"];
				flags_SLAB_RECLAIM_ACCOUNT_set_and_size_not_great_PAGE_SIZE[label="flags_SLAB_RECLAIM_ACCOUNT_set_and_size_not_great_PAGE_SIZE"];
				clear_cachep_gfporder[label="clear_cachep_gfporder"];
				cache_estimate[label="cache_estimate(cachep->gfporder, size, align, flags,&left_over, &cachep->num);"];
				clear_break_flag[label="clear_break_flag"];
				cache_estimate_1[label="cache_estimate(cachep->gfporder, size, align, flags,&left_over, &cachep->num);"];
				break_flag_true[label="break_flag_true"];
				cachep_gfporder_not_small_MAX_GFP_ORDER[label="cachep_gfporder_not_small_MAX_GFP_ORDER"];
				cachep_num_null[label="cachep_num_null"];
				flags_CFLGS_OFF_SLAB_set_and_cachep_num_great_offslab_limit[label="flags_CFLGS_OFF_SLAB_set_and_cachep_num_great_offslab_limit"];
				dec_cachep_gfporder[label="dec_cachep_gfporder"];
				inc_break_flag[label="inc_break_flag"];
				cachep_gfporder_not_small_slab_break_gfp_order[label="cachep_gfporder_not_small_slab_break_gfp_order"];
				left_over_multi_8_not_great_PAGE_SIZE_move_left_cachep_gfporder[label="left_over_multi_8_not_great_PAGE_SIZE_move_left_cachep_gfporder"];
				inc_cachep_gfporder[label="inc_cachep_gfporder"];
				cachep_num_null[label="cachep_num_null"];
				kmem_cache_free_cache_cache_cachep[label="kmem_cache_free_cache_cache_cachep"];
				clear_cachep[label="clear_cachep"];
				set_slab_size[label="slab_size = ALIGN(cachep->num*sizeof(kmem_bufctl_t)+ sizeof(struct slab), align);"];
				flags_CFLGS_OFF_SLAB_set_and_left_over_not_small_slab_size[label="flags_CFLGS_OFF_SLAB_set_and_left_over_not_small_slab_size"];
				clear_flags_CFLGS_OFF_SLAB[label="clear_flags_CFLGS_OFF_SLAB"];
				left_over_self_sub_slab_size[label="left_over_self_sub_slab_size"];
				flags_CFLGS_OFF_SLAB_set[label="flags_CFLGS_OFF_SLAB_set"];
				set_slab_size_1[label="slab_size = cachep->num*sizeof(kmem_bufctl_t)+sizeof(struct slab);"];
				cachep_colour_off_cache_line_size[label="cachep_colour_off_cache_line_size"];
				cachep_colour_off_small_align[label="cachep_colour_off_small_align"];
				cachep_colour_off_align[label="cachep_colour_off_align"];
				set_cachep_colour_left_over_div_cachep_colour_off[label="set_cachep_colour_left_over_div_cachep_colour_off"];
				set_cachep_slab_size_slab_size[label="set_cachep_slab_size_slab_size"];
				set_cachep_flags_flags[label="set_cachep_flags_flags"];
				clear_cachep_gfpflags[label="clear_cachep_gfpflags"];
				flags_SLAB_CACHE_DMA_set[label="flags_SLAB_CACHE_DMA_set"];
				set_cachep_gfpflags_GFP_DMA[label="set_cachep_gfpflags_GFP_DMA"];
				lock_cachep_spinlock[label="lock_cachep_spinlock"];
				set_cachep_objsize_size[label="set_cachep_objsize_size"];
				INIT_LIST_HEAD_cachep_lists_slabs_full[label="INIT_LIST_HEAD_cachep_lists_slabs_full"];
				INIT_LIST_HEAD_cachep_lists_slabs_partial[label="INIT_LIST_HEAD_cachep_lists_slabs_partial"];
				INIT_LIST_HEAD_cachep_lists_slabs_free[label="INIT_LIST_HEAD_cachep_lists_slabs_free"];
				flags_CFLGS_OFF_SLAB_set_1[label="flags_CFLGS_OFF_SLAB_set"];
				set_cachep_slabp_cache_kmem_find_general_cachep_slab_size_0[label="set_cachep_slabp_cache_kmem_find_general_cachep_slab_size_0"];
				set_cachep_ctor_ctor[label="set_cachep_ctor_ctor"];
				set_cachep_dtor_dtor[label="set_cachep_dtor_dtor"];
				set_cachep_name_name[label="set_cachep_name_name"];
				lock_cpu_hotplug[label="lock_cpu_hotplug"];
				g_cpucache_up_eq_FULL[label="g_cpucache_up_eq_FULL"];
				enable_cpucache_cachep[label="enable_cpucache_cachep"];
				g_cpucache_up_eq_NONE[label="g_cpucache_up_eq_NONE"];
				set_cachep_array[label="cachep->array[smp_processor_id()] = &initarray_generic.cache;"];
				set_g_cpucache_up_PARTIAL[label="set_g_cpucache_up_PARTIAL"];
				set_cachep_array_1[label="cachep->array[smp_processor_id()] = kmalloc(sizeof(struct arraycache_init),GFP_KERNEL);"];
				set_ac_data_cachep_avail_0[label="set_ac_data_cachep_avail_0"];
				set_ac_data_cachep_limit_BOOT_CPUCACHE_ENTRIES[label="set_ac_data_cachep_limit_BOOT_CPUCACHE_ENTRIES"];
				set_ac_data_cachep_batchcount_1[label="set_ac_data_cachep_batchcount_1"];
				set_ac_data_cachep_touched_0[label="set_ac_data_cachep_touched_0"];
				set_cachep_batchcount_1[label="set_cachep_batchcount_1"];
				set_cachep_limit_BOOT_CPUCACHE_ENTRIES[label="set_cachep_limit_BOOT_CPUCACHE_ENTRIES"];
				set_cachep_free_limit[label="cachep->free_limit = (1+num_online_cpus())*cachep->batchcount+ cachep->num;"];
				set_cachep_lists_next_reap[label="cachep->lists.next_reap = jiffies + REAPTIMEOUT_LIST3 +((unsigned long)cachep)%REAPTIMEOUT_LIST3;"];
				down_cache_chain_sem[label="down_cache_chain_sem"];
				set_old_fs_get_fs[label="set_old_fs_get_fs"];
				set_fs_KERNEL_DS[label="set_fs_KERNEL_DS"];
				list_for_p_each_cache_chain[label="list_for_p_each_cache_chain"];
				set_pc_list_entry_p_kmem_cache_t_next[label="set_pc_list_entry_p_kmem_cache_t_next"];
				__get_user_tmp_pc_name[label="__get_user_tmp_pc_name"];
				strcmp_pc_name_name_null[label="strcmp_pc_name_name_null"];
				up_cache_chain_sem[label="up_cache_chain_sem"];
				unlock_cpu_hotplug[label="unlock_cpu_hotplug"];
				set_fs_old_fs[label="set_fs_old_fs"];
				list_add_cachep_next_cache_chain[label="list_add_cachep_next_cache_chain"];
				up_cache_chain_sem_1[label="up_cache_chain_sem"];
				unlock_cpu_hotplug_1[label="unlock_cpu_hotplug"];
				cachep_null_and_flags_SLAB_PANIC_set[label="cachep_null_and_flags_SLAB_PANIC_set"];
				return_cachep[label="return_cachep"];
		}
}
