digraph pid_c{
        subgraph cluster_pid_hashfn{
                label="pid_hashfn(nr)";
                
                hash_long[label="hash_long((unsigned long)nr, pidhash_shift)"];
        }

        subgraph cluster_do_while_each_task_pid{
                label="do_each_task_pid(who, type, task),\l
		while_each_task_pid(who, type, task)";

		do[label="]find_task_by_pid_type(type, who)"];
		while[label="pid_task((task)->pids[type].pid_list.next, type)\l
		hlist_unhashed(&(task)->pids[type].pid_chain)"];

		do -> while;
        }

        subgraph cluster_find_task_by_pid_type{
                label="find_task_by_pid_type(int type, int nr)";

		find_pid[label="find_pid(type, nr)"];
		pid_null;
		pid_task[label="pid_task(&pid->pid_list, type)"];
        }
        
        subgraph cluster_find_task_by_pid_type{
                label="attach_pid(task_t *task, enum pid_type type, int nr)";

		find_pid[label="find_pid(type, nr);"];
		pid_null;
		hlist_add_heade[label="hlist_add_head(&task_pid->pid_chain,\l&pid_hash[type][pid_hashfn(nr)]);"];
		INIT_LIST_HEAD[label="NIT_LIST_HEAD(&task_pid->pid_list);"];
		INIT_HLIST_NODE[label="INIT_HLIST_NODE(&task_pid->pid_chain);"];
		list_add_tail[label="list_add_tail(&task_pid->pid_list, &pid->pid_list);"];
		update_pid_nr;

		find_pid -> pid_null;
		pid_null -> hlist_add_heade[label="null"];
		hlist_add_heade -> INIT_LIST_HEAD;
		pid_null -> INIT_HLIST_NODE;
		INIT_HLIST_NODE -> list_add_tail;

		INIT_LIST_HEAD -> update_pid_nr;
		list_add_tail -> update_pid_nr;
        }

        subgraph cluster__detach_pid{
                label="__detach_pid(task_t *task, enum pid_type type)";

		hlist_unhashed[label="hlist_unhashed(&pid->pid_chain)"];
		hlist_del[label="hlist_del(&pid->pid_chain);"];
		list_empty[label="list_empty(&pid->pid_list)"];
		get_pid_nr;
		list_entry[label="list_entry(pid->pid_list.next,struct pid, pid_list);"];
		hlist_add_head[label="hlist_add_head(&pid_next->pid_chain,&pid_hash[type][pid_hashfn(pid_next->nr)]);"];
		list_del[label="list_del(&pid->pid_list);"];
		set_pid_nr;
		
		return_nr;

		hlist_unhashed -> hlist_del[label="hash"];
		hlist_del -> list_empty;
		list_empty -> get_pid_nr[label="empty"];
		get_pid_nr -> list_del;
		list_del -> set_pid_nr;
		set_pid_nr -> return_nr;
		list_empty -> list_entry;
		list_entry -> hlist_add_head[label="insert next pid from pid_list to hash"];
		hlist_add_head -> list_del;

		hlist_unhashed -> list_del;
        }

        subgraph cluster_detach_pid{
                label="detach_pid(task_t *task, enum pid_type type)";
		node[style=filled, shape = box, margin="0.05,0.005",height="0.1",width="0.1"];

		__detach_pid[label="__detach_pid(task, type);"];
		// per_PID_list_null;
		task_not_in_other_hash_list[label="task_not_in_other_hash_list"];
		free_pidmap[label="free_pidmap(nr)"];
		return;

		__detach_pid -> task_not_in_other_hash_list[label="per-PID list is empty return nr"];
		__detach_pid -> return;
		task_not_in_other_hash_list -> return[label="true"];
		task_not_in_other_hash_list -> free_pidmap;
		free_pidmap -> return;
	}


}
