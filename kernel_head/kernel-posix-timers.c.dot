digraph posix_timers_c{
	subgraph cluster_common_clock_getres{
		label="static inline int common_clock_getres(clockid_t which_clock, struct timespec *tp)";
		set_tp_tv_sec_0[label="set_tp_tv_sec_0"];
		set_tp_tv_nsec_posix_clocks_which_clock_res[label="set_tp_tv_nsec_posix_clocks_which_clock_res"];
		return_0[label="return_0"];
	}

	subgraph cluster_common_clock_get{
		label="static inline int common_clock_get(clockid_t which_clock, struct timespec *tp)";
		getnstimeofday_tp[label="getnstimeofday_tp"];
		return_0[label="return_0"];
	}

	subgraph cluster_common_clock_set{
		label="static inline int common_clock_set(clockid_t which_clock, struct timespec *tp)";
		return_do_sys_settimeofday_tp_NULL[label="return_do_sys_settimeofday_tp_NULL"];
	}

	subgraph cluster_common_timer_create{
		label="static inline int common_timer_create(struct k_itimer *new_timer)";
		INIT_LIST_HEAD_new_timer_it_real_abs_timer_entry[label="INIT_LIST_HEAD_new_timer_it_real_abs_timer_entry"];
		init_timer_new_timer_it_real_timer[label="init_timer_new_timer_it_real_timer"];
		set_new_timer_it_real_timer_data_new_timer[label="set_new_timer_it_real_timer_data_new_timer"];
		set_new_timer_it_real_timer_function_posix_timer_fn[label="set_new_timer_it_real_timer_function_posix_timer_fn"];
		set_timer_inactive_new_timer[label="set_timer_inactive_new_timer"];
		return_0[label="return_0"];
	}

	subgraph cluster_invalid_clockid{
		label="static inline int invalid_clockid(clockid_t which_clock)";
		which_clock_small_0[label="which_clock_small_0"];
		return_0[label="return_0"];
		which_clock_not_small_MAX_CLOCKS[label="which_clock_not_small_MAX_CLOCKS"];
		return_1[label="return_1"];
		posix_clocks_whick_clock_clock_getres_not_eq_NULL[label="posix_clocks_whick_clock_clock_getres_not_eq_NULL"];
		return_0[label="return_0"];
		posix_clocks_whick_clock_res_not_eq_0[label="posix_clocks_whick_clock_res_not_eq_0"];
		return_0[label="return_0"];
		return_1[label="return_1"];
	}

	subgraph cluster_init_posix_timers{
		label="static __init int init_posix_timers(void)";
		set_clock_realtime_res_CLOCK_REALTIME_RES_abs_struct_abs_list[label="set_clock_realtime_res_CLOCK_REALTIME_RES_abs_struct_abs_list"];
		set_clock_monotonic_res_CLOCK_REALTIME_RES_abs_struct_NULL_clock_get_do_posix_clock_monotonic_get[label="set_clock_monotonic_res_CLOCK_REALTIME_RES_abs_struct_NULL_clock_get_do_posix_clock_monotonic_get"];
		clock_set_do_posix_clock_nosettime[label="clock_set_do_posix_clock_nosettime"];
		register_posix_clock_CLOCK_REALTIME_clock_realtime[label="register_posix_clock_CLOCK_REALTIME_clock_realtime"];
		register_posix_clock_CLOCK_MONOTONIC_clock_monotonic[label="register_posix_clock_CLOCK_MONOTONIC_clock_monotonic"];
		set_posix_timers_cache_kmem_cache_create_posix_timers_cache[label="set_posix_timers_cache_kmem_cache_create_posix_timers_cache"];
		idr_init_posix_timers_id[label="idr_init_posix_timers_id"];
		return_0[label="return_0"];
	}

	subgraph cluster_tstojiffie{
		label="static void tstojiffie(struct timespec *tp, int res, u64 *jiff)";
		set_sec_tp_tv_sec[label="set_sec_tp_tv_sec"];
		set_nsec_tp_tv_nsec_add_res_sub_1[label="set_nsec_tp_tv_nsec_add_res_sub_1"];
		nsec_great_NSEC_PER_SEC[label="nsec_great_NSEC_PER_SEC"];
		inc_sec[label="inc_sec"];
		nsec_self_sub_NSEC_PER_SEC[label="nsec_self_sub_NSEC_PER_SEC"];
		set_jiff_mpy_l_X_l_ll_sec_SEC_CONVERSION_add_mpy_l_X_l_ll_nsec_NSEC_CONVERSION_right_move_NSEC_JIFFIE_SC_sub_SEC_JIFFIE_SC_right_move_SEC_JIFFIE_SC[label="set_jiff_mpy_l_X_l_ll_sec_SEC_CONVERSION_add_mpy_l_X_l_ll_nsec_NSEC_CONVERSION_right_move_NSEC_JIFFIE_SC_sub_SEC_JIFFIE_SC_right_move_SEC_JIFFIE_SC"];
	}

	subgraph cluster_add_clockset_delta{
		label="static long add_clockset_delta(struct k_itimer *timr, struct timespec *new_wall_to)";
		set_normalized_timespec_delta_new_wall_to_tv_sec_sub_timr_it_real_wall_to_prev_tv_sec_new_wall_to_tv_nsec_sub_timr_it_real_wall_to_prev_tv_nsec[label="set_normalized_timespec_delta_new_wall_to_tv_sec_sub_timr_it_real_wall_to_prev_tv_sec_new_wall_to_tv_nsec_sub_timr_it_real_wall_to_prev_tv_nsec"];
		delta_tv_sec_or_delta_tv_nsec_not_null[label="delta_tv_sec_or_delta_tv_nsec_not_null"];
		return_0[label="return_0"];
		delata_tv_sec_small_0[label="delata_tv_sec_small_0"];
		set_normalized_timespec_delta_neg_delta_tv_sec_1_sub_delta_tv_nsec_sub_posix_clocks_timr_it_clock_res[label="set_normalized_timespec_delta_neg_delta_tv_sec_1_sub_delta_tv_nsec_sub_posix_clocks_timr_it_clock_res"];
		inc_sign[label="inc_sign"];
		tstojiffie_delta_posix_clocks_timr_it_clock_res_exp[label="tstojiffie_delta_posix_clocks_timr_it_clock_res_exp"];
		set_timr_it_real_wall_to_prev_new_wall_to[label="set_timr_it_real_wall_to_prev_new_wall_to"];
		timr_it_real_timer_expires_self_add_neg_exp_or_exp_decide_sign[label="timr_it_real_timer_expires_self_add_neg_exp_or_exp_decide_sign"];
		return_1[label="return_1"];
	}

        subgraph cluster_remove_from_abslist{
                label="static void remove_from_abslist(struct k_itimer *timr)";
                list_empty_timr_it_real_abs_timer_entry_false[label="list_empty_timr_it_real_abs_timer_entry_false"];
                lock_abs_list_lock[label="lock_abs_list_lock"];
                list_del_init_timr_it_real_abs_timer_entry[label="list_del_init_timr_it_real_abs_timer_entry"];
                unlock_abs_list_lock[label="unlock_abs_list_lock"];
        }

        subgraph cluster_schdule_next_timer{
                label="static void schedule_next_timer(struct k_itimer *timr)";
                set_sq_read_seqbegin_xtime_lock[label="set_sq_read_seqbegin_xtime_lock"];
                set_new_wall_to_wall_to_monotonic[label="set_new_wall_to_wall_to_monotonic"];
                posix_get_now_now[label="posix_get_now_now"];
                read_seqretry_xtime_lock_seq[label="read_seqretry_xtime_lock_seq"];
                list_empty_timr_it_real_abs_timer_entry_false[label="list_empty_timr_it_real_abs_timer_entry_false"];
                lock_abs_list_lock[label="lock_abs_list_lock"];
                add_clockset_delta_timr_new_wall_to[label="add_clockset_delta_timr_new_wall_to"];
                posix_bump_timer_timr_new[label="posix_bump_timer_timr_new"];
                unlock_abs_list_lock[label="unlock_abs_list_lock"];
                posix_bump_timer_timr_now[label="posix_bump_timer_timr_now"];
                set_timr_it_overrun_last_timr_it_overrun[label="set_timr_it_overrun_last_timr_it_overrun"];
                timr_it_overrun_neg1[label="timr_it_overrun_neg1"];
                inc_timr_it_requeue_pending[label="inc_timr_it_requeue_pending"];
                add_timer_timr_it_real_timer[label="add_timer_timr_it_real_timer"];
        }

        subgraph cluster_do_schedule_next_timer{
                label="void do_schedule_next_timer(struct siginfo *info)";
                set_timr_lock_timer_info_si_tid[label="set_timr_lock_timer_info_si_tid"];
                timr_null_or_timr_it_requeue_pending_not_eq_info_is_sys_private[label="timr_null_or_timr_it_requeue_pending_not_eq_info_is_sys_private"];
                goto_exit[label="goto_exit"];
                timr_it_clock_small_0[label="timr_it_clock_small_0"];
                posix_cpu_timer_schedule_timr[label="posix_cpu_timer_schedule_timr"];
                schedule_next_timer_timr[label="schedule_next_timer_timr"];
                set_info_si_overrun_timr_it_overrun_last[label="set_info_si_overrun_timr_it_overrun_last"];
                timr_not_null[label="timr_not_null"];
                unlock_timer_timr[label="unlock_timer_timr"];
        }

        subgraph cluster_posix_timer_event{
                label="int posix_timer_event(struct k_itimer *timr,int si_private)";
                memset_timr_sigq_info_0[label="memset_timr_sigq_info_0"];
                set_timr_sigq_info_si_sys_private_si_private[label="set_timr_sigq_info_si_sys_private_si_private"];
                set_timr_sigq_info_si_signo_timr_it_sigev_signo[label="set_timr_sigq_info_si_signo_timr_it_sigev_signo"];
                set_timr_sigq_info_si_errno_0[label="set_timr_sigq_info_si_errno_0"];
                set_timr_sigq_info_si_code_SI_TIMER[label="set_timr_sigq_info_si_code_SI_TIMER"];
                set_timr_sigq_info_si_tid_timr_it_id[label="set_timr_sigq_info_si_tid_timr_it_id"];
                set_timr_sigq_info_si_value_timr_it_sigev_value[label="set_timr_sigq_info_si_value_timr_it_sigev_value"];
                timr_it_sigev_notify_SIGEV_THREAD_ID_set[label="timr_it_sigev_notify_SIGEV_THREAD_ID_set"];
                timr_it_process_flags_PF_EXITING_set[label="timr_it_process_flags_PF_EXITING_set"];
                set_timr_it_sigev_notify_SIGEV_SIGNAL[label="set_timr_it_sigev_notify_SIGEV_SIGNAL"];
                put_task_struct_timr_ti_process[label="put_task_struct_timr_ti_process"];
                set_timr_it_process_timr_it_process_group_leader[label="set_timr_it_process_timr_it_process_group_leader"];
                goto_group[label="goto_group"];
                return_send_sigqueue_timr_it_sigev_signo_timr_sigq_timr_it_process[label="return_send_sigqueue_timr_it_sigev_signo_timr_sigq_timr_it_process"];
                return_send_group_sigqueue_timr_it_sigev_signo_timr_sigq_timr_it_process[label="return_send_group_sigqueue_timr_it_sigev_signo_timr_sigq_timr_it_process"];
        }

        subgraph cluster_posix_timer_fn{
                label="static void posix_timer_fn(unsigned long __data)";
                set_timr___data[label="set_timr___data"];
                lock_timr_it_lock[label="lock_timr_it_lock"];
                set_timer_inactive_timr[label="set_timer_inactive_timr"];
                list_empty_timr_it_real_abs_timer_entry_fasle[label="list_empty_timr_it_real_abs_timer_entry_fasle"];
                lock_abs_list_lock[label="lock_abs_list_lock"];
                set_seq_read_seqbegin_xtime_lock[label="set_seq_read_seqbegin_xtime_lock"];
                set_new_wall_to_wall_to_monotonic[label="set_new_wall_to_wall_to_monotonic"];
                read_seqretry_xtime_lock_seq[label="read_seqretry_xtime_lock_seq"];
                set_normalized_timespec_delta_new_wall_to_tv-sec_sub_timr_it_real_wall_to_prev_tv_sec_new_wall_to_tv_nsec_sub_timr_it_real_wall_to_prev_tv_nsec[label="set_normalized_timespec_delta_new_wall_to_tv-sec_sub_timr_it_real_wall_to_prev_tv_sec_new_wall_to_tv_nsec_sub_timr_it_real_wall_to_prev_tv_nsec"];
                delta_tv_sec_or_delta_tv_nsec_eq_0[label="delta_tv_sec_or_delta_tv_nsec_eq_0"];
                delta_tv_sec_small_0[label="delta_tv_sec_small_0"];
                tstojiffie_delta_posix_clocks_timr_it_clock_res_exp[label="tstojiffie_delta_posix_clocks_timr_it_clock_res_exp"];
                set_timr_it_real_wall_to_prev_new_wall_to[label="set_timr_it_real_wall_to_prev_new_wall_to"];
                timr_it_real_timer_expires_self_add_exp[label="timr_it_real_timer_expires_self_add_exp"];
                add_timer_timr_it_real_timer[label="add_timer_timr_it_real_timer"];
                set_do_notify_0[label="set_do_notify_0"];
                unlock_abs_list_lock[label="unlock_abs_list_lock"];
                do_notify_not_null[label="do_notify_not_null"];
                set_private_0[label="set_private_0"];
                timr_it_real_incr_not_Null[label="timr_it_real_incr_not_Null"];
                si_set_si_private_inc_timr_it_requeue_pending[label="si_set_si_private_inc_timr_it_requeue_pending"];
                remove_from_abslist_timr[label="remove_from_abslist_timr"];
                posix_timer_event_timr_si_private_false[label="posix_timer_event_timr_si_private_false"];
                schedule_next_timer_timr[label="schedule_next_timer_timr"];
                unlock_timer_timr[label="unlock_timer_timr"];
        }

        sugraph cluster_good_sigevent{
                label="static inline struct task_struct * good_sigevent(sigevent_t * event)";
                set_rtn_current_group_leader[label="set_rtn_current_group_leader"];
                event_sigev_notify_and_SIGEV_THREAD_ID_true_and_set_rtn_find_task_by_pid_event_sigev_notify_thread_id_not_null_or_rtn_tgid_not_eq_current_tgid_or_event_sigev_notify_set_ignore_SIGEV_THREAD_ID_not_eq_SIGEV_SIGNAL[label="event_sigev_notify_and_SIGEV_THREAD_ID_true_and_set_rtn_find_task_by_pid_event_sigev_notify_thread_id_not_null_or_rtn_tgid_not_eq_current_tgid_or_event_sigev_notify_set_ignore_SIGEV_THREAD_ID_not_eq_SIGEV_SIGNAL"];
                return_NULL[label="return_NULL"];
                event_sigev_notify_set_ignore_SIGEV_THREAD_ID_not_eq_SIGEV_NONE_and_event_sigev_signo_not_great_or_event_sigev_signo_great_SIGRTMAX[label="event_sigev_notify_set_ignore_SIGEV_THREAD_ID_not_eq_SIGEV_NONE_and_event_sigev_signo_not_great_or_event_sigev_signo_great_SIGRTMAX"];
                return_NULL[label="return_NULL"];
                return_rtn[label="return_rtn"];
        }

        subgraph cluster_register_posix_clock{
                label="void register_posix_clock(clockid_t clock_id, struct k_clock *new_clock)";
                clock_id_not_small_MAX_CLOCKS[label="clock_id_not_small_MAX_CLOCKS"];
                return[label="return"];
                set_posix_clocks_clock_id_new_clock[label="set_posix_clocks_clock_id_new_clock"];
        }

        subgraph cluster_alloc_posix_timer{
                label="static struct k_itimer * alloc_posix_timer(void)";
                set_tmr_kmem_cache_allocc_posix_timers_cache[label="set_tmr_kmem_cache_allocc_posix_timers_cache"];
                tmr_null[label="tmr_null"];
                return_tmr[label="return_tmr"];
                memset_tmr_0[label="memset_tmr_0"];
                tmr_sigq_eq_sigqueue_alloc_null[label="tmr_sigq_eq_sigqueue_alloc_null"];
                kmeme_cache_free_posix_timers_cache[label="kmeme_cache_free_posix_timers_cache"];
                set_tmr_NULL[label="set_tmr_NULL"];
                return_tmr[label="return_tmr"];
        }

        subgraph cluster_release_posix_timer{
                label="static void release_posix_timer(struct k_itimer *tmr, int it_id_set)";
                it_id_set_not_null[label="it_id_set_not_null"];
                lock_idr_loc[label="lock_idr_loc"];
                idr_remove_posix_timers_id_tmr_it_id[label="idr_remove_posix_timers_id_tmr_it_id"];
                unlock_idr_lock[label="unlock_idr_lock"];
                sigqeueue_free_tmr_sigq[label="sigqeueue_free_tmr_sigq"];
                tmr_it_process_and_tmr_it_sigev_notify_eq_SIGEV_SIGNAL_or_SIGEV_THREAD_ID[label="tmr_it_process_and_tmr_it_sigev_notify_eq_SIGEV_SIGNAL_or_SIGEV_THREAD_ID"];
                put_task_struct_tmr_it_process[label="put_task_struct_tmr_it_process"];
                kmem_cache_free_posix_timers_cache_tmr[label="kmem_cache_free_posix_timers_cache_tmr"];
        }

        subgraph cluster_sys_timer_create{
                label="asmlinkage long sys_timer_create(clockid_t which_clock, struct sigevent __user *timer_event_spec, timer_t __user * created_timer_id)";
                set_ir_id_set_IT_ID_NOT_SET[label="set_ir_id_set_IT_ID_NOT_SET"];
                invalid_clockid_which_clock_not_null[label="invalid_clockid_which_clock_not_null"];
                return_EAGAIN[label="return_EAGAIN"];
                lock_new_timer_it_lock[label="lock_new_timer_it_lock"];
                idr_pre_get_posix_timers_id_not_null[label="idr_pre_get_posix_timers_id_not_null"];
                set_error_EAGAIN[label="set_error_EAGAIN"];
                goto_out[label="goto_out"];
                lock_idr_lock[label="lock_idr_lock"];
                set_error_idr_get_new_posix_timers_id_new_timer_new_timer_id[label="set_error_idr_get_new_posix_timers_id_new_timer_new_timer_id"];
                unlock__idr_lock[label="unlock__idr_lock"];
                error_eq_EAGAIN[label="error_eq_EAGAIN"];
                goto_retry[label="goto_retry"];
                error_not_null[label="error_not_null"];
                set_error_EAGAIN[label="set_error_EAGAIN"];
                goto_out[label="goto_out"];
                set_it_id_set_IT_ID_SET[label="set_it_id_set_IT_ID_SET"];
                set_new_timer_it_id_new_timer_id[label="set_new_timer_it_id_new_timer_id"];
                set_new_timer_it_clock_which_clock[label="set_new_timer_it_clock_which_clock"];
                set_new_timer_it_overrun_neg1[label="set_new_timer_it_overrun_neg1"];
                CLOCK_DISPATCH_which_clock_timer_create_new_timer[label="CLOCK_DISPATCH_which_clock_timer_create_new_timer"];
                copy_to_user_created_timer_id_new_timer_id[label="copy_to_user_created_timer_id_new_timer_id"];
                timer_event_spec_not_null[label="timer_event_spec_not_null"];
                copy_from_user_event_timer_event_spec[label="copy_from_user_event_timer_event_spec"];
                set_new_timer_it_sigev_notify_eventn_sigev_notify[label="set_new_timer_it_sigev_notify_eventn_sigev_notify"];
                set_new_timer_it_sigev_signo_event_sigev_signo[label="set_new_timer_it_sigev_signo_event_sigev_signo"];
                set_new_timer_it_sigev_value_event_sigev_value[label="set_new_timer_it_sigev_value_event_sigev_value"];
                lock_tasklist_lock[label="lock_tasklist_lock"];
                set_process_good_sigevent_event_not_null[label="set_process_good_sigevent_event_not_null"];
                lock_process_sighand_siglock[label="lock_process_sighand_siglock"];
                process_flags_PF_EXITING_clear[label="process_flags_PF_EXITING_clear"];
                set_new_timer_it_process_process[label="set_new_timer_it_process_process"];
                list_add_new_timer_listt_process_signal_posix_timers[label="list_add_new_timer_listt_process_signal_posix_timers"];
                unlock_process_sighand_siglock[label="unlock_process_sighand_siglock"];
                new_timer_it_sigev_notify_eq_SIGEV_SIGNAL_or_SIGEV_THREAD_ID[label="new_timer_it_sigev_notify_eq_SIGEV_SIGNAL_or_SIGEV_THREAD_ID"];
                unlock_process_sighand_siglock[label="unlock_process_sighand_siglock"];
                clear_process[label="clear_process"];
                unlock_tasklist_lock[label="unlock_tasklist_lock"];
                process_null[label="process_null"];
                set_error_EINVAL[label="set_error_EINVAL"];
                goto_out[label="goto_out"];
                set_new_timer_it_sigev_notify_SIGEV_SIGNAL[label="set_new_timer_it_sigev_notify_SIGEV_SIGNAL"];
                set_new_timer_it_sigev_signo_SIGALRM[label="set_new_timer_it_sigev_signo_SIGALRM"];
                set_new_timer_it_sigev_value_sival_int_new_timer_it_id[label="set_new_timer_it_sigev_value_sival_int_new_timer_it_id"];
                set_process_current_group_leader[label="set_process_current_group_leader"];
                lock_process_sighand_siglock[label="lock_process_sighand_siglock"];
                set_new_timer_it_process_process[label="set_new_timer_it_process_process"];
                list_add_new_timer_list_process_signal_posix_timers[label="list_add_new_timer_list_process_signal_posix_timers"];
                unlock_process_sighand_siglock[label="unlock_process_sighand_siglock"];
                error_not_null[label="error_not_null"];
                release_posix_timer_new_timer_it_id_set[label="release_posix_timer_new_timer_it_id_set"];
                return_error[label="return_error"];
        }

        subgraph cluster_good_timespec{
                label="static int good_timespec(const struct timespec *ts)";
                ts_null_or_ts_tv_sec_small_0_or_ts_tv_nsec_not_small_NSEC_PER_SEC[label="ts_null_or_ts_tv_sec_small_0_or_ts_tv_nsec_not_small_NSEC_PER_SEC"];
                return_0[label="return_0"];
                return_1[label="return_1"];
        }

        subgraph cluster_lock_timer{
                label="static struct k_itimer * lock_timer(timer_t timer_id, unsigned long *flags)";
                lock_idr_lock[label="lock_idr_lock"];
                set_timr_idr_find_posix_timers_id_timer_id[label="set_timr_idr_find_posix_timers_id_timer_id"];
                timr_not_null[label="timr_not_null"];
                lock_timr_ti_lock[label="lock_timr_ti_lock"];
                unlock_idr_lock[label="unlock_idr_lock"];
                timr_it_id_not_eq_tiemr_id_or_timr_it_it_process_not_null_or_timr_it_process_tgid_not_eq_current_tgid[label="timr_it_id_not_eq_tiemr_id_or_timr_it_it_process_not_null_or_timr_it_process_tgid_not_eq_current_tgid"];
                unlock_timer_timr[label="unlock_timer_timr"];
                set_timr_NULL[label="set_timr_NULL"];
                unlock_idr_lock[label="unlock_idr_lock"];
                return_timr[label="return_timr"];
        }

        subgraph cluster_common_timer_get{
			label="static void common_timer_get(struct k_itimer *timr, struct itimerspec *cur_setting)";
			set_expires_timr_it_real_timer_expires[label="set_expires_timr_it_real_timer_expires"];
			timr_it_real_timer_expires_not_eq_expires[label="timr_it_real_timer_expires_not_eq_expires"];
			posix_get_now_now[label="posix_get_now_now"];
			expires_not_null[label="expires_not_null"];
			timr_it_sigev_notify_SIGEV_THREAD_ID_clear_eq_SIGEV_NONE_and_timer_it_real_inc_null_and_posix_time_before_timr_it_real_timer_now_not_null[label="timr_it_sigev_notify_SIGEV_THREAD_ID_clear_eq_SIGEV_NONE_and_timer_it_real_inc_null_and_posix_time_before_timr_it_real_timer_now_not_null"];
			set_timr_it_real_timer_expires_expires_0[label="set_timr_it_real_timer_expires_expires_0"];
			expires_not_null[label="expires_not_null"];
			timr_it_requeue_pending_REQUEUE_PENDING_set_or_timr_it_sigev_notify_SIGEV_THREAD_ID_clear_eq_SIGEV_NONE[label="timr_it_requeue_pending_REQUEUE_PENDING_set_or_timr_it_sigev_notify_SIGEV_THREAD_ID_clear_eq_SIGEV_NONE"];
			posix_bump_timer_timr_now[label="posix_bump_timer_timr_now"];
			set_expires_timr_it_real_ttimer_expires[label="set_expires_timr_it_real_ttimer_expires"];
			timer_pending_timr_it_real_timer_false[label="timer_pending_timr_it_real_timer_false"];
			set_expires_0[label="set_expires_0"];
			expires_null[label="expires_null"];
			expires_self_sub_now_jiffies[label="expires_self_sub_now_jiffies"];
			jiffies_to_timespec_expires_cur_setting_it_value[label="jiffies_to_timespec_expires_cur_setting_it_value"];
			jiffies_to_timespec_timr_it_real_incr_cur_setting_it_interval[label="jiffies_to_timespec_timr_it_real_incr_cur_setting_it_interval"];
			cur_setting_it_value_tv_sec_small_0[label="cur_setting_it_value_tv_sec_small_0"];
			set_cur_setting_it_value_tv_nsec_1[label="set_cur_setting_it_value_tv_nsec_1"];
			set_cursetting_it_value_tv_sec_0[label="set_cursetting_it_value_tv_sec_0"];
		}

		subgraph cluster_sys_timer_gettime{
			label="asmlinkage long sys_timer_gettime(timer_t timer_id, struct itimerspec __user *setting)";
			set_timr_lock_timer_timer_id[label="set_timr_lock_timer_timer_id"];
			timr_null[label="timr_null"];
			return_EINVAL[label="return_EINVAL"];
			CLOCK_DISPATCH_timr_it_clock_timer_get_timr_cur_setting[label="CLOCK_DISPATCH_timr_it_clock_timer_get_timr_cur_setting"];
			unlock_timer_timr[label="unlock_timer_timr"];
			copy_to_user_setting_cur_setting[label="copy_to_user_setting_cur_setting"];
			return_0[label="return_0"];
		}

		subgraph cluster_sys_timer_getoverrun{
			label="asmlinkage long sys_timer_getoverrun(timer_t timer_id)";
			set_timr_lock_timer_timer_id[label="set_timr_lock_timer_timer_id"];
			timr_null[label="timr_null"];
			return_EINVAL[label="return_EINVAL"];
			set_overrun_timr_it_overrun_last[label="set_overrun_timr_it_overrun_last"];
			unlock_timer_timr[label="unlock_timer_timr"];
			return_overrun[label="return_overrun"];
		}

		subgraph cluster_adjust_abs_time{
			label="static int adjust_abs_time(struct k_clock *clock, struct timespec *tp, int abs, u64 *exp, struct timespec *wall_to)";
			set_oc_tp[label="set_oc_tp"];
			abs_not_null[label="abs_not_null"];
			clock_sub_posix_clocks_0_set_ignore_CLOCKS_MASK[label="clock_sub_posix_clocks_0_set_ignore_CLOCKS_MASK"];
			set_jiffies_64_f_do_posix_clock_monotonic_gettime_parts_now_wall_to[label="set_jiffies_64_f_do_posix_clock_monotonic_gettime_parts_now_wall_to"];
			clock_sub_posix_clocks_0_CLOCKS_MONO_set[label="clock_sub_posix_clocks_0_CLOCKS_MONO_set"];
			new_tv_sec_self_add_wall_to_tv_sec[label="new_tv_sec_self_add_wall_to_tv_sec"];
			now_tv_nsec_self_andd_wall_to_tv_nsec[label="now_tv_nsec_self_andd_wall_to_tv_nsec"];
			clock_clock_get_clock_posix_clocks_now[label="clock_clock_get_clock_posix_clocks_now"];
			set_jiffies_64_f_get_jiffies_64[label="set_jiffies_64_f_get_jiffies_64"];
			oc_tv_sec_self_sub_now_tv_sec[label="oc_tv_sec_self_sub_now_tv_sec"];
			oc_tv_nsec_self_sub_now_tv_nsec[label="oc_tv_nsec_self_sub_now_tv_nsec"];
			oc_tv_nsec_sub_NSEC_PER_SEC_not_small_0[label="oc_tv_nsec_sub_NSEC_PER_SEC_not_small_0"];
			oc_tv_nsec_self_sub_NSEC_PER_SEC[label="oc_tv_nsec_self_sub_NSEC_PER_SEC"];
			inc_oc_tv_sec[label="inc_oc_tv_sec"];
			oc_tv_nsec_small_0[label="oc_tv_nsec_small_0"];
			oc_tv_nsec_self_add_NSEC_PER_SEC[label="oc_tv_nsec_self_add_NSEC_PER_SEC"];
			dec_oc_tv_sec[label="dec_oc_tv_sec"];
			set_jiffies_64_f_get_jiffies_64[label="set_jiffies_64_f_get_jiffies_64"];
			oc_tv_sec_small_0[label="oc_tv_sec_small_0"];
			set_oc_tv_sec_oc_tv_nsec_0[label="set_oc_tv_sec_oc_tv_nsec_0"];
			oc_tv_sec_or_oc_tv_nsec_not_null[label="oc_tv_sec_or_oc_tv_nsec_not_null"];
			set_normalized_timerspec_oc_oc_tv_sec_oc_tv_nsec_add_clock_res[label="set_normalized_timerspec_oc_oc_tv_sec_oc_tv_nsec_add_clock_res"];
			tstojiffie_oc_clock_res_exp[label="tstojiffie_oc_clock_res_exp"];
			exp_great_MAX_JIFFY_OFFSET[label="exp_great_MAX_JIFFY_OFFSET"];
			set_rtn_EINVAL[label="set_rtn_EINVAL"];
			exp_self_add_jiffies_64_f[label="exp_self_add_jiffies_64_f"];
			return_rtn[label="return_rtn"];
		}

		subgraph cluster_common_timer_set{
			label="static inline int common_timer_set(struct k_itimer *timr, int flags, struct itimerspec *new_setting, struct itimerspec *old_setting)";
			set_clock_posix_clocks_timr_it_clock[label="set_clock_posix_clocks_timr_it_clock"];
			old_setting_not_null[label="old_setting_not_null"];
			common_timer_get_timr_old_setting[label="common_timer_get_timr_old_setting"];
			set_timr_it_real_incr_0[label="set_timr_it_real_incr_0"];
			CONFIG_SMP[label="CONFIG_SMP"];
			timer_active_timr_and_del_timer_timr_it_real_timer_false[label="timer_active_timr_and_del_timer_timr_it_real_timer_false"];
			return_TIMER_RETRY[label="return_TIMER_RETRY"];
			set_timer_inactive_timr[label="set_timer_inactive_timr"];
			del_timer_timr_it_real_timer[label="del_timer_timr_it_real_timer"];
			remove_from_abslist_timr[label="remove_from_abslist_timr"];
			set_timr_it_requeue_pending_timr_it_requeue_pending_add_2_ignore_REQUEUE_PENDING[label="set_timr_it_requeue_pending_timr_it_requeue_pending_add_2_ignore_REQUEUE_PENDING"];
			set_timr_it_overrun_last_0[label="set_timr_it_overrun_last_0"];
			set_timr_it_overrun_neg1[label="set_timr_it_overrun_neg1"];
			new_setting_it_value_tv_sec_null_and_new_setting_it_value_tv_nsec_null[label="new_setting_it_value_tv_sec_null_and_new_setting_it_value_tv_nsec_null"];
			set_timr_it_real_timer_expires_0[label="set_timr_it_real_timer_expires_0"];
			return_0[label="return_0"];
			adjust_abs_time_clock_new_setting_it_value_flags_TIMER_ABSTIME_set_expire_64_timr_it_real_wall_to_prev[label="adjust_abs_time_clock_new_setting_it_value_flags_TIMER_ABSTIME_set_expire_64_timr_it_real_wall_to_prev"];
			return_EINVAL[label="return_EINVAL"];
			set_timr_it_real_timer_expires_expire_64[label="set_timr_it_real_timer_expires_expire_64"];
			tstojiffie_new_setting_it_interval_clock_res_expire_64[label="tstojiffie_new_setting_it_interval_clock_res_expire_64"];
			set_timr_it_real_incr_expire_64[label="set_timr_it_real_incr_expire_64"];
			timr_it_sigev_notify_set_ignore_SIGEV_THREAD_ID_not_eq_SIGEV_NONE[label="timr_it_sigev_notify_set_ignore_SIGEV_THREAD_ID_not_eq_SIGEV_NONE"];
			add_timer_timr_it_real_timer[label="add_timer_timr_it_real_timer"];
			flags_TIMER_ABSTIME_set_and_clock_abs_struct_not_null[label="flags_TIMER_ABSTIME_set_and_clock_abs_struct_not_null"];
			lock_clock_abs_struct_lock[label="lock_clock_abs_struct_lock"];
			list_add_tail_timr_it_real_abs_timer_entry_clock_abs_struct_list[label="list_add_tail_timr_it_real_abs_timer_entry_clock_abs_struct_list"];
			unlock_clock_abs_struct_lock[label="unlock_clock_abs_struct_lock"];
			return_0[label="return_0"];
		}

		subgraph cluster_sys_timer_settime{
			label="asmlinkage long sys_timer_settime(timer_t timer_id, int flags, const struct itimerspec __user *new_setting, struct itimerspec __user *old_setting)";
			set_rtn_old_spec_or_NULL_decide_old_setting[label="set_rtn_old_spec_or_NULL_decide_old_setting"];
			new_setting_null[label="new_setting_null"];
			return_EINVAL[label="return_EINVAL"];
			copy_from_user_new_spec_new_setting[label="copy_from_user_new_spec_new_setting"];
			good_timespec_new_spec_it_interval_false_or_good_timerspec_new_spec_it_vaue_false[label="good_timespec_new_spec_it_interval_false_or_good_timerspec_new_spec_it_vaue_false"];
			return_EINVAL[label="return_EINVAL"];
			set_timr_lock_timer_timer_id[label="set_timr_lock_timer_timer_id"];
			timr_null[label="timr_null"];
			return_EINVAL[label="return_EINVAL"];
			set_error_CLOCK_DISPATCH_timr_it_clock_timer_set_timr_flags_new_spec_rtn[label="set_error_CLOCK_DISPATCH_timr_it_clock_timer_set_timr_flags_new_spec_rtn"];
			unlock_timer_timr[label="unlock_timer_timr"];
			error_eq_TIMER_RETRY[label="error_eq_TIMER_RETRY"];
			set_rtn_NULL[label="set_rtn_NULL"];
			goto_retry[label="goto_retry"];
			old_setting_not_null_and_error_null_and_copy_to_user_old_setting_old_spec_not_null[label="old_setting_not_null_and_error_null_and_copy_to_user_old_setting_old_spec_not_null"];
			set_error_EFAULT[label="set_error_EFAULT"];
			return_error[label="return_error"];
		}

		subgraph cluster_common_timer_del{
			label="static inline int common_timer_del(struct k_itimer *timer)";
			set_timer_it_real_incr_0[label="set_timer_it_real_incr_0"];
			CONFIG_SMP[label="CONFIG_SMP"];
			timer_active_timer_and_del_timer_timer_it_real_timer_false[label="timer_active_timer_and_del_timer_timer_it_real_timer_false"];
			return_TIMER_RETRY[label="return_TIMER_RETRY"];
			del_timer_timer_it_real_timer[label="del_timer_timer_it_real_timer"];
			remove_from_abslist_timer[label="remove_from_abslist_timer"];
			return_0[label="return_0"];
		}

		subgraphc cluster_timer_delete_hook{
			label="static inline int timer_delete_hook(struct k_itimer *timer)";
			return_CLOCK_DISPATCH_timer_it_clock_timer_del_timer[label="return_CLOCK_DISPATCH_timer_it_clock_timer_del_timer"];
		}

		subgraph cluster_sys_timer_delete{
			label="asmlinkage long sys_timer_delete(timer_t timer_id)";
			CONFIG_SMP[label="CONFIG_SMP"];
			set_timer_lock_timer_timer_id[label="set_timer_lock_timer_timer_id"];
			timer_null[label="timer_null"];
			return_EINVAL[label="return_EINVAL"];
			set_error_timer_delete_hook_timer[label="set_error_timer_delete_hook_timer"];
			error_eq_TIMER_RETRY[label="error_eq_TIMER_RETRY"];
			unlock_timer_timer[label="unlock_timer_timer"];
			goto_retry_delete[label="goto_retry_delete"];
			timer_delete_hook_timer[label="timer_delete_hook_timer"];
			lock_current_sighand_siglock[label="lock_current_sighand_siglock"];
			list_del_timer_list[label="list_del_timer_list"];
			unlock_current_sighand_siglock[label="unlock_current_sighand_siglock"];
			timer_it_process_not_null[label="timer_it_process_not_null"];
			timer_it_sigev_notify_eq_SIGEV_SIGNAL_or_SIGEV_THREAD_ID[label="timer_it_sigev_notify_eq_SIGEV_SIGNAL_or_SIGEV_THREAD_ID"];
			put_task_struct_timer_it_process[label="put_task_struct_timer_it_process"];
			clear_timer_it_process[label="clear_timer_it_process"];
			unlock_timer_timer[label="unlock_timer_timer"];
			release_posix_timer_timer_IT_ID_SET[label="release_posix_timer_timer_IT_ID_SET"];
			return_0[label="return_0"];
		}

		subgraph cluster_itimer_delete{
			label="static inline void itimer_delete(struct k_itimer *timer)";
			CONFIG_SMP[label="CONFIG_SMP"];
			lock_timer_it_lock[label="lock_timer_it_lock"];
			set_error_itmer_delete_hook_timer[label="set_error_itmer_delete_hook_timer"];
			error_eq_TIMER_RETRY[label="error_eq_TIMER_RETRY"];
			unlock_timer_timer[label="unlock_timer_timer"];
			goto_retry_delete[label="goto_retry_delete"];
			timer_delete_hook_timer[label="timer_delete_hook_timer"];
			list_del_timer_list[label="list_del_timer_list"];
			timer_it_process_not_null[label="timer_it_process_not_null"];
			timer_it_sigev_notify_eq_SIGEV_SIGNAL_or_SIGEV_THREAD_ID[label="timer_it_sigev_notify_eq_SIGEV_SIGNAL_or_SIGEV_THREAD_ID"];
			put_task_struct_timer_it_process[label="put_task_struct_timer_it_process"];
			clear_timer_it_process[label="clear_timer_it_process"];
			unlock_timer_timer[label="unlock_timer_timer"];
			release_posix_timer_timer_IT_ID_SET[label="release_posix_timer_timer_IT_ID_SET"];
		}

		subgraph cluster_exit_itimers{
			label="void exit_itimers(struct signal_struct *sig)";
			list_empty_sig_posix_timers_false[label="list_empty_sig_posix_timers_false"];
			set_tmr_list_entry_sig_posix_timers_next_struct_k_itimer_list[label="set_tmr_list_entry_sig_posix_timers_next_struct_k_itimer_list"];
			itimer_delete_tmr[label="itimer_delete_tmr"];
			del_timer_sync_sig_real_timer[label="del_timer_sync_sig_real_timer"];
		}

		subgraph cluster_do_posix_clock_monotonic_gettime_parts{
			label="static u64 do_posix_clock_monotonic_gettime_parts( struct timespec *tp, struct timespec *mo)";
			set_seq_read_seqbegin_xtime_lock[label="set_seq_read_seqbegin_xtime_lock"];
			getnstimeofday_tp[label="getnstimeofday_tp"];
			set_mo_wall_ot_monotonic[label="set_mo_wall_ot_monotonic"];
			set_jiff_jiffies_64[label="set_jiff_jiffies_64"];
			read_seqretry_xtime_lock_seq[label="read_seqretry_xtime_lock_seq"];
			return_jiff[label="return_jiff"];
		}

		subgraph cluster_do_posix_clock_monotonic_get{
			label="static int do_posix_clock_monotonic_get(clockid_t clock, struct timespec *tp)";
			do_posix_clock_monotonic_gettime_parts_tp_wall_to_mono[label="do_posix_clock_monotonic_gettime_parts_tp_wall_to_mono"];
			tp_tv_sec_self_add_wall_to_mono_tv_sec[label="tp_tv_sec_self_add_wall_to_mono_tv_sec"];
			tp_tv_nsec_self_add_wall_to_mono_tv_nsec[label="tp_tv_nsec_self_add_wall_to_mono_tv_nsec"];
			tp_tv_nsec_sub_NSEC_PER_SEC_great_0[label="tp_tv_nsec_sub_NSEC_PER_SEC_great_0"];
			tp_tv_nsec_self_sub_NSEC_PER_SEC[label="tp_tv_nsec_self_sub_NSEC_PER_SEC"];
			inc_tp_tv_sec[label="inc_tp_tv_sec"];
			return_0[label="return_0"];
		}

		subgraph cluster_do_posix_clock_monotonic_gettime{
			label="int do_posix_clock_monotonic_gettime(struct timespec *tp)";
			return_do_posix_clock_monotonic_get_CLOCK_MONOTONIC_tp[label="return_do_posix_clock_monotonic_get_CLOCK_MONOTONIC_tp"];
		}

		subgrap cluster_sys_clock_settime{
			label="asmlinkage long sys_clock_settime(clockid_t which_clock, const struct timespec __user *tp)";
			invalid_clockid_which_clock_true[label="invalid_clockid_which_clock_true"];
			return_EINVAL[label="return_EINVAL"];
			copy_from_user_new_tp_tp[label="copy_from_user_new_tp_tp"];
			return_CLOCK_DISPATCH_whick_clock_clock_set_whick_clock_new_tp[label="return_CLOCK_DISPATCH_whick_clock_clock_set_whick_clock_new_tp"];
		}

		subgraph cluster_sys_clock_gettimer{
			label="asmlinkage long sys_clock_gettime(clockid_t which_clock, struct timespec __user *tp)";
			invalid_clockid_which_clock_true[label="invalid_clockid_which_clock_true"];
			return_EINVAL[label="return_EINVAL"];
			set_error_CLOCK_DISPATCH_which_clock_clock_get_which_clock_kernel_tp[label="set_error_CLOCK_DISPATCH_which_clock_clock_get_which_clock_kernel_tp"];
			error_null_and_copy_to_user_tp_kernel_tp[label="error_null_and_copy_to_user_tp_kernel_tp"];
			set_error_EFAULT[label="set_error_EFAULT"];
			return_error[label="return_error"];
		}

		subgraph cluster_sys_clock_getres{
			label="asmlinkage long sys_clock_getres(clockid_t which_clock, struct timespec __user *tp)";
			invalid_clockid_which_clock_true[label="invalid_clockid_which_clock_true"];
			return_EINVAL[label="return_EINVAL"];
			set_error_CLOCK_DISPATCH_which_clock_clock_getres_which_clock_rtn_tp[label="set_error_CLOCK_DISPATCH_which_clock_clock_getres_which_clock_rtn_tp"];
			error_null_and_tp_not_null_or_copy_to_user_tp_rtn_tp_false[label="error_null_and_tp_not_null_or_copy_to_user_tp_rtn_tp_false"];
			set_error_EFAULT[label="set_error_EFAULT"];
			return_error[label="return_error"];
		}

		subgraph cluster_nanosleep_wake_up{
			label="static void nanosleep_wake_up(unsigned long __data)";
			set_p___data[label="set_p___data"];
			wake_up_process_p[label="wake_up_process_p"];
		}

		subgraph cluster_clock_was_set{
			label="void clock_was_set(void)";
			in_interrupt[label="in_interrupt"];
			schedule_work_clock_was_set_work[label="schedule_work_clock_was_set_work"];
			return[label="return"];
			wake_up_all_nanosleep_abs_wqueue[label="wake_up_all_nanosleep_abs_wqueue"];
			down_clock_was_set_lock[label="down_clock_was_set_lock"];
			lock_abs_list_lock[label="lock_abs_list_lock"];
			list_splice_init_abs_list_list_cws_list[label="list_splice_init_abs_list_list_cws_list"];
			unlock_abs_list_clock[label="unlock_abs_list_clock"];
			set_seq_read_seqbegin_xtime_clock[label="set_seq_read_seqbegin_xtime_clock"];
			set_new_wall_to_wall_to_monotonic[label="set_new_wall_to_wall_to_monotonic"];
			read_seqretry_xtime_lock_seq[label="read_seqretry_xtime_lock_seq"];
			lock_abs_list_lock[label="lock_abs_list_lock"];
			list_empty_cws_list_true[label="list_empty_cws_list_true"];
			unlock_abs_list_lock[label="unlock_abs_list_lock"];
			set_timr_list_entry_cws_list_next_struct_k_itimer_ir_real_abs_tiemr_entry[label="set_timr_list_entry_cws_list_next_struct_k_itimer_ir_real_abs_tiemr_entry"];
			list_del_init_timr_it_real_abs_timer_entry[label="list_del_init_timr_it_real_abs_timer_entry"];
			add_clockset_delta_timr_new_wall_to_true_and_del_timer_timr_it_real_timer_true_add_timer_timr_it_real_timer_true[label="add_clockset_delta_timr_new_wall_to_true_and_del_timer_timr_it_real_timer_true_add_timer_timr_it_real_timer_true"];
			list_add_timr_it_real_abs_timer_entry_abs_list_list[label="list_add_timr_it_real_abs_timer_entry_abs_list_list"];
			unlock_abs_list_lock[label="unlock_abs_list_lock"];
			up__clock_was_set_lock[label="up__clock_was_set_lock"];
		}

		subgraph cluster_sys_clock_nanosleep{
				label="asmlinkage long sys_clock_nanosleep(clockid_t which_clock, int flags, const struct timespec __user *rqtp, struct timespec __user *rmtp)";
				set_restart_block_current_thread_info_restart_block[label="set_restart_block_current_thread_info_restart_block"];
				invalid_clockid_which_clock[label="invalid_clockid_which_clock"];
				return_EINVAL[label="return_EINVAL"];
				copy_from_user_t_rqtp[label="copy_from_user_t_rqtp"];
				t_tv_nsec_not_small_NSEC_PER_SEC_or_t_tv_sec_small_0[label="t_tv_nsec_not_small_NSEC_PER_SEC_or_t_tv_sec_small_0"];
				return_EINVAL[label="return_EINVAL"];
				set_restart_block_arg1_rmtp[label="set_restart_block_arg1_rmtp"];
				set_ret_CLOCK_DISPATCH_which_clock_nsleep_which_clock_flags_t[label="set_ret_CLOCK_DISPATCH_which_clock_nsleep_which_clock_flags_t"];
				ret-eq-neg-ERESTART-RESTARTBLOCK-and-rmtp-not-null-and-copy-to-user-rmtp-copy-to-user-rmtp-t-not-null[label="ret-eq-neg-ERESTART-RESTARTBLOCK-and-rmtp-not-null-and-copy-to-user-rmtp-copy-to-user-rmtp-t-not-null"];
				return-EFAULT[label="return-EFAULT"];
				return-ret[label="return-ret"];
		}

		subgraph cluster-common-nsleep{
			label="static int common_nsleep(clockid_t which_clock, int flags, struct timespec *tsave)";
			DECLARE-WAITQUEUE-abs-wqueue-current[label="DECLARE-WAITQUEUE-abs-wqueue-current"];
			set-restrat-block-current-thread-info-restart-block[label="set-restrat-block-current-thread-info-restart-block"];
			set-abs-wqueue-flags-0[label="set-abs-wqueue-flags-0"];
			init-timer-new-timer[label="init-timer-new-timer"];
			set-new-timer-expires-0[label="set-new-timer-expires-0"];
			set-new-timer-data-current[label="set-new-timer-data-current"];
			set-new-timer-function-nanosleep-wake-up[label="set-new-timer-function-nanosleep-wake-up"];
			set-abs-flags-TIMER-ABSTIME-set[label="set-abs-flags-TIMER-ABSTIME-set"];
			restart-block-fn-eq-clock-namosleep-restart[label="restart-block-fn-eq-clock-namosleep-restart"];
			set-restart-block-fn-do-no-restart-syscall[label="set-restart-block-fn-do-no-restart-syscall"];
			set-rq-time-restart-block-arg3[label="set-rq-time-restart-block-arg3"];
			set-rq-time-rq-time-left-move-32-restart-block-arg2[label="set-rq-time-rq-time-left-move-32-restart-block-arg2"];
			rq-time-null[label="rq-time-null"];
			retrun-EINTR[label="retrun-EINTR"];
			set-left-rq-time-sub-get-jiffies-64[label="set-left-rq-time-sub-get-jiffies-64"];
			left-not-great-0[label="left-not-great-0"];
			return-0[label="return-0"];
			abs-not-null-and-posix-clocks-which-clock-clock-get-not-eq-posix-clock-CLOCK-MONOTONIC-clock-get[label="abs-not-null-and-posix-clocks-which-clock-clock-get-not-eq-posix-clock-CLOCK-MONOTONIC-clock-get"];
			add-wait-queue-nanosleep-abs-wqueue-abs-wqueue[label="add-wait-queue-nanosleep-abs-wqueue-abs-wqueue"];
			set-t-tsave[label="set-t-tsave"];
			abs-not-null-or-rq-time-null[label="abs-not-null-or-rq-time-null"];
			adjust-abs-time-posix-clocks-which-clock-t-abs-rq-time-dum[label="adjust-abs-time-posix-clocks-which-clock-t-abs-rq-time-dum"];
			set-left-rq-time-sub-get-jiffies-64[label="set-left-rq-time-sub-get-jiffies-64"];
			left-not-small-MAX-JIFFY-OFFSET[label="left-not-small-MAX-JIFFY-OFFSET"];
			set-left-MAX-JIFFY-OFFSET[label="set-left-MAX-JIFFY-OFFSET"];
			left-small-0[label="left-small-0"];
			set-new-timer-expires-jiffies-add-left[label="set-new-timer-expires-jiffies-add-left"];
			--set-current-state-TASK-INTERRUPTIBLE[label="--set-current-state-TASK-INTERRUPTIBLE"];
			add-timer-new-timer[label="add-timer-new-timer"];
			schedule[label="schedule"];
			del-timer-sync-new-timer[label="del-timer-sync-new-timer"];
			set-left-rq-time-sub-get-jiffies-64[label="set-left-rq-time-sub-get-jiffies-64"];
			left-great-0-and-test-thread-flag-TIF-SIGPENDING[label="left-great-0-and-test-thread-flag-TIF-SIGPENDING"];
			abs-wqueue-task-list-next[label="abs-wqueue-task-list-next"];
			finish-wait-nanosleep-abs-wqueue-abs-wqueue[label="finish-wait-nanosleep-abs-wqueue-abs-wqueue"];
			left-great-0[label="left-great-0"];
			abs-not-null[label="abs-not-null"];
			return-ERESTARTNOHAND[label="return-ERESTARTNOHAND"];
			set-left-TICK-NSEC[label="set-left-TICK-NSEC"];
			set-tsave-tv-sec-div-long-long-rem-left-NSEC-PER-SEC-tsave-tv-nsec[label="set-tsave-tv-sec-div-long-long-rem-left-NSEC-PER-SEC-tsave-tv-nsec"];
			set-restart-block-fn-clock-nanosleep-restart[label="set-restart-block-fn-clock-nanosleep-restart"];
			set-restart-block-arg0-which-clock[label="set-restart-block-arg0-which-clock"];
			set-restart-block-arg2-rq-time-and-0xffffffffLL[label="set-restart-block-arg2-rq-time-and-0xffffffffLL"];
			set-restart-block-arg3-rq-time-right-move-32[label="set-restart-block-arg3-rq-time-right-move-32"];
			return-ERESTART-RESTARTBLOCK[label="return-ERESTART-RESTARTBLOCK"];
			return-0[label="return-0"];
		}

		subgraph cluster_clock-nanosleep-restart{
			label="long clock_nanosleep_restart(struct restart_block *restart_block)";
			set-ret-common-nsleep-restart-block-arg0-0-t[label="set-ret-common-nsleep-restart-block-arg0-0-t"];
			ret-eq-ERESTART-RESTARTBLOCK-and-restart-block-arg1-and-copy-to-user-restart-block-arg1-t[label="ret-eq-ERESTART-RESTARTBLOCK-and-restart-block-arg1-and-copy-to-user-restart-block-arg1-t"];
			return-EFAULT[label="return-EFAULT"];
			return-ret[label="return-ret"];
		}

}
