digraph mlock_c{
	subgraph cluster_mlock_fixup{
		label="static int mlock_fixup(struct vm_area_struct *vma, struct vm_area_struct **prev, unsigned long start, unsigned long end, unsigned int newflags)";
		set_mm_vma_vm_mm[label="set_mm_vma_vm_mm"];
		newflags_eq_mva_vm_flags[label="newflags_eq_mva_vm_flags"];
		set_prev_vma[label="set_prev_vma"];
		goto_out[label="goto_out"];
		set_pgoff_vma_vm_pgoff_add_start_sub_vma_vm_start_right_move_PAGE_SHIFT[label="set_pgoff_vma_vm_pgoff_add_start_sub_vma_vm_start_right_move_PAGE_SHIFT"];
		set_prev_vma_merge_mm_prev_start_end_newflags_vma_anon_vma_vma_vm_file_pgoff_vma_policy_vma[label="set_prev_vma_merge_mm_prev_start_end_newflags_vma_anon_vma_vma_vm_file_pgoff_vma_policy_vma"];
		prev_true[label="prev_true"];
		set_vma_prev[label="set_vma_prev"];
		goto_success[label="goto_success"];
		set_prev_vma[label="set_prev_vma"];
		start_not_eq_vma_vm_start[label="start_not_eq_vma_vm_start"];
		set_ret_split_vma_mm_vma_start_1[label="set_ret_split_vma_mm_vma_start_1"];
		ret_true[label="ret_true"];
		goto_out[label="goto_out"];
		end_not_eq_vma_vm_end[label="end_not_eq_vma_vm_end"];
		set_ret_split_vma_mm_vma_end_0[label="set_ret_split_vma_mm_vma_end_0"];
		ret_true[label="ret_true"];
		goto_out[label="goto_out"];
		set_vma_vm_flags_newflags[label="set_vma_vm_flags_newflags"];
		set_pages_end_sub_start_right_move_PAGE_SHIFT[label="set_pages_end_sub_start_right_move_PAGE_SHIFT"];
		newflags_VM_LOCKED_set[label="newflags_VM_LOCKED_set"];
		set_pages_neg_pages[label="set_pages_neg_pages"];
		newflags_VM_IO_false[label="newflags_VM_IO_false"];
		set_ret_make_pages_present_start_end[label="set_ret_make_pages_present_start_end"];
		vma_vm_mm_locked_vm_self_sub_pages[label="vma_vm_mm_locked_vm_self_sub_pages"];
		ret_eq_ENOMEM[label="ret_eq_ENOMEM"];
		set_ret_EAGAIN[label="set_ret_EAGAIN"];
		return_ret[label="return_ret"];
	}

	subgraph cluster_do_mlock{
		label="static int do_mlock(unsigned long start, size_t len, int on)";
		set_len_PAGE_ALIGN_len[label="set_len_PAGE_ALIGN_len"];
		set_end_start_add_len[label="set_end_start_add_len"];
		end_small_start[label="end_small_start"];
		return_EINVAL[label="return_EINVAL"];
		end_not_eq_start[label="end_not_eq_start"];
		return_0[label="return_0"];
		set_vma_find_vma_prev_current_mm_start_prev[label="set_vma_find_vma_prev_current_mm_start_prev"];
		vma_false_or_vma_vm_start_great_start[label="vma_false_or_vma_vm_start_great_start"];
		return_ENOMEM[label="return_ENOMEM"];
		start_great_vma_vm_start[label="start_great_vma_vm_start"];
		set_prev_vma[label="set_prev_vma"];
		for_nstart_start[label="for_nstart_start"];
		set_newflags_vma_vm_flags_or_VM_LOCKED[label="set_newflags_vma_vm_flags_or_VM_LOCKED"];
		on_false[label="on_false"];
		clear_newflags_VM_LOCKED[label="clear_newflags_VM_LOCKED"];
		set_tmp_vma_vm_end[label="set_tmp_vma_vm_end"];
		tmp_great_end[label="tmp_great_end"];
		set_tmp_end[label="set_tmp_end"];
		set_error_mlock_fixup_vma_prev_nstart_tmp_newflags[label="set_error_mlock_fixup_vma_prev_nstart_tmp_newflags"];
		error_true[label="error_true"];
		set_nstart_tmp[label="set_nstart_tmp"];
		nstart_small_prev_vm_end[label="nstart_small_prev_vm_end"];
		set_nstart_prev_vm_end[label="set_nstart_prev_vm_end"];
		nstart_not_small_end[label="nstart_not_small_end"];
		set_vma_prev_vm_next[label="set_vma_prev_vm_next"];
		vma_false_or_vma_vm_start_not_eq_nstart[label="vma_false_or_vma_vm_start_not_eq_nstart"];
		set_error_ENOMEM[label="set_error_ENOMEM"];
		return_error[label="return_error"];
	}

	subgraph cluster_sys_mlock{
		label="asmlinkage long sys_mlock(unsigned long start, size_t len)";
		can_do_mlock_false[label="can_do_mlock_false"];
		return_EPERM[label="return_EPERM"];
		down_write_current_mm_mmap_sem[label="down_write_current_mm_mmap_sem"];
		set_len_PAGE_ALIGN_len_add_start_clear_PAGE_MASK[label="set_len_PAGE_ALIGN_len_add_start_clear_PAGE_MASK"];
		start_self_and_PAGE_MASK[label="start_self_and_PAGE_MASK"];
		set_locked_len_right_move_PAGE_SHIFT[label="set_locked_len_right_move_PAGE_SHIFT"];
		locked_self_add_current_mm_locked_vm[label="locked_self_add_current_mm_locked_vm"];
		set_lock_limit_current_signal_rlim_RLIMIT_MEMLOCK_rlim_cur[label="set_lock_limit_current_signal_rlim_RLIMIT_MEMLOCK_rlim_cur"];
		lock_limit_self_right_move_PAGE_SHIFT[label="lock_limit_self_right_move_PAGE_SHIFT"];
		locked_not_great_lock_limit_or_capable_CAP_IPC_LOCK_true[label="locked_not_great_lock_limit_or_capable_CAP_IPC_LOCK_true"];
		set_error_do_mlock_start_len_1[label="set_error_do_mlock_start_len_1"];
		up_write_current_mm_mmap_sem[label="up_write_current_mm_mmap_sem"];
		return_error[label="return_error"];
	}

	subgraph cluster_sys_munlock{
		label="asmlinkage long sys_munlock(unsigned long start, size_t len)";
		down_write_current_mm_mmap_sem[label="down_write_current_mm_mmap_sem"];
		set_len_PAGE_ALIGN_len_add_start_clear_PAGE_MASK[label="set_len_PAGE_ALIGN_len_add_start_clear_PAGE_MASK"];
		start_self_and_PAGE_MASK[label="start_self_and_PAGE_MASK"];
		set_ret_do_mlock_start_len_0[label="set_ret_do_mlock_start_len_0"];
		up_write_current_mm_mmap_sem[label="up_write_current_mm_mmap_sem"];
		return_ret[label="return_ret"];
	}

	subgraph cluster_do_mlockall{
		label="static int do_mlockall(int flags)";
		clear_prev[label="clear_prev"];
		set_def_flags_0[label="set_def_flags_0"];
		flags_MCL_FUTURE_set[label="flags_MCL_FUTURE_set"];
		set_def_flags_VM_LOCKED[label="set_def_flags_VM_LOCKED"];
		set_current_mm_def_flags_def_flags[label="set_current_mm_def_flags_def_flags"];
		flags_eq_MCL_FUTURE[label="flags_eq_MCL_FUTURE"];
		goto_out[label="goto_out"];
		for_vma_current_mm_mmap_prev_vm_next[label="for_vma_current_mm_mmap_prev_vm_next"];
		set_newflags_vma_vm_flags_or_VM_LOCKED[label="set_newflags_vma_vm_flags_or_VM_LOCKED"];
		flags_MCL_CURRENT_clear[label="flags_MCL_CURRENT_clear"];
		clear_newflags_VM_LOCKED[label="clear_newflags_VM_LOCKED"];
		mlock_fixup_vma_prev_vma_vm_start_vma_vm_end_newflags[label="mlock_fixup_vma_prev_vma_vm_start_vma_vm_end_newflags"];
		return_0[label="return_0"];
	}

	bugraph cluster_sys_mlockall{
		label="asmlinkage long sys_mlockall(int flags)";
		flags_false_or_flags_set_except_MCL_CURRENT_MCL_FUTURE[label="flags_false_or_flags_set_except_MCL_CURRENT_MCL_FUTURE"];
		goto_out[label="goto_out"];
		set_ret_EPERM[label="set_ret_EPERM"];
		can_do_mlock_false[label="can_do_mlock_false"];
		goto_out[label="goto_out"];
		down_write_current_mm_mmap_sem[label="down_write_current_mm_mmap_sem"];
		set_lock_limit_current_signal_rlim_RLIMIT_MEMLOCK_rlim_cur[label="set_lock_limit_current_signal_rlim_RLIMIT_MEMLOCK_rlim_cur"];
		lock_limit_self_right_move_PAGE_SHIFT[label="lock_limit_self_right_move_PAGE_SHIFT"];
		set_ret_ENOMEM[label="set_ret_ENOMEM"];
		flags_MCL_CURRENT_false_or_current_mm_total_vm_not_great_lock_limit_or_capable_CAP_IPC_LOCK[label="flags_MCL_CURRENT_false_or_current_mm_total_vm_not_great_lock_limit_or_capable_CAP_IPC_LOCK"];
		set_ret_do_mlockall_flags[label="set_ret_do_mlockall_flags"];
		up_write_current_mm_mmap_sem[label="up_write_current_mm_mmap_sem"];
		return_ret[label="return_ret"];
	}

	subgraph cluster_sys_munlockall{
		label="asmlinkage long sys_munlockall(void)";
		down_write_current_mm_mmap_sem[label="down_write_current_mm_mmap_sem"];
		set_ret_do_mlockall_0[label="set_ret_do_mlockall_0"];
		up_write_current_mm_mmap_sem[label="up_write_current_mm_mmap_sem"];
		return_ret[label="return_ret"];
	}

	subgraph cluster_user_shm_lock{
		label="int user_shm_lock(size_t size, struct user_struct *user)";
		set_locked_size_add_PAGE_SIZE_sub_1_right_move_PAGE_SHIFT[label="set_locked_size_add_PAGE_SIZE_sub_1_right_move_PAGE_SHIFT"];
		set_lock_limit_current_signal_rlim_RLIMIT_MEMLOCK_rlim_cur[label="set_lock_limit_current_signal_rlim_RLIMIT_MEMLOCK_rlim_cur"];
		lock_limit_self_right_move_PAGE_SHIFT[label="lock_limit_self_right_move_PAGE_SHIFT"];
		lock_shmlock_user_lock[label="lock_shmlock_user_lock"];
		locked_add_user_locked_shm_great_lock_limit_and_capable_CAP_IPC_LOCK_false[label="locked_add_user_locked_shm_great_lock_limit_and_capable_CAP_IPC_LOCK_false"];
		goto_out[label="goto_out"];
		get_uid_user[label="get_uid_user"];
		user_locked_shm_self_add_locked[label="user_locked_shm_self_add_locked"];
		set_allowed_1[label="set_allowed_1"];
		unlock_shmlock_user_lock[label="unlock_shmlock_user_lock"];
		return_allowed[label="return_allowed"];
	}

	subgraph cluster_user_shm_unlock{
		label="void user_shm_unlock(size_t size, struct user_struct *user)";
		lock_shmlock_user_lock[label="lock_shmlock_user_lock"];
		user_locked_shm_self_sub_size_add_PAGE_SIZE_sub_1_right_move_PAGE_SHIFT[label="user_locked_shm_self_sub_size_add_PAGE_SIZE_sub_1_right_move_PAGE_SHIFT"];
		unlock_shmlock_user_lock[label="unlock_shmlock_user_lock"];
		free_uid_user[label="free_uid_user"];
	}
}
